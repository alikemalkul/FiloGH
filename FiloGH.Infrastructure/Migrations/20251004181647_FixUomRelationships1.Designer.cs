// <auto-generated />
using System;
using FiloGH.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiloGH.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004181647_FixUomRelationships1")]
    partial class FixUomRelationships1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FiloGH.Core.Entities.AccountChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMetalAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPostingAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("AccountCharts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("FinancialStatementCategory")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountingJournalEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferenceDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceDocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("AccountingJournalEntries");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountingJournalEntryLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseCurrencyCredit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BaseCurrencyDebit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("EntryId")
                        .HasColumnType("bigint");

                    b.Property<short>("LineNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntryId");

                    b.ToTable("AccountingJournalEntryLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMCostType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("AffectsMetalInventory")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BOMCostTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMLabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillOfMaterialsId")
                        .HasColumnType("int");

                    b.Property<int>("BomId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("LaborCostTypeId")
                        .HasColumnType("tinyint");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialsId");

                    b.HasIndex("BomId");

                    b.HasIndex("LaborCostTypeId");

                    b.ToTable("BOMLabors");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMStone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BomId")
                        .HasColumnType("int");

                    b.Property<decimal>("CaratTotal")
                        .HasColumnType("decimal(8,4)");

                    b.Property<decimal>("CostPerCarat")
                        .HasColumnType("decimal(18,4)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<decimal>("StoneSize")
                        .HasColumnType("decimal(4,2)");

                    b.Property<byte>("StoneTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("StoneTypeId");

                    b.ToTable("BOMStones");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMStoneType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BaseUnitId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrecious")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.ToTable("BOMStoneTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BOMTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountChartId")
                        .HasColumnType("int");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("AccountChartId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BillOfMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("BOMTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MetalLossRatio")
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("MetalWeightNet")
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("RevisionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("TotalLeadTimeHours")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BOMTypeId");

                    b.HasIndex("ProductVariantId")
                        .IsUnique();

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Branch", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("DefaultCashLocationId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DefaultMetalLocationId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesPoint")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("OwnCompanyId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DefaultCashLocationId");

                    b.HasIndex("DefaultMetalLocationId");

                    b.HasIndex("OwnCompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BranchLocation", b =>
                {
                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("LocationId1")
                        .HasColumnType("tinyint");

                    b.HasKey("BranchId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationId1");

                    b.ToTable("BranchLocations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Brand", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Cargo", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountChartId")
                        .HasColumnType("int");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountChartId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CashRegisters");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.City", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<byte?>("DefaultCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasPredefinedCityNames")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrencyId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Currency", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRateTracked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<byte?>("DefaultCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsB2BPartner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PartnerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte?>("PaymentTermId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("DefaultCurrencyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.CustomerMetalAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceInGrams")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("MetalCurrencyId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MetalCurrencyId");

                    b.ToTable("CustomerMetalAccounts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.CustomerMetalAccountTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<byte>("MetalCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RelatedDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("TransactionTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("WeightGrams")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MetalCurrencyId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("CustomerMetalAccountTransactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.CustomerMetalAccountTransactionType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("MovementSign")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerMetalAccountTransactionTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.DailyMetalRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("GoldBuyRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal>("PalladiumBuyRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal>("PlatinumBuyRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<DateOnly>("RateDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SilverBuyRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal>("TryRate")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal>("UsdRate")
                        .HasColumnType("decimal(9,4)");

                    b.HasKey("Id");

                    b.ToTable("DailyMetalRates");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("PrimaryBranchId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryBranchId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ImageType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("ImageTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CalculatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("MetalCost")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<decimal>("OtherCosts")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("StockItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalUnitCost")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("WorkmanshipCost")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderLineId")
                        .IsUnique()
                        .HasFilter("[OrderLineId] IS NOT NULL");

                    b.HasIndex("StockItemId");

                    b.ToTable("InventoryCosts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MetalPurityId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCaratWeight")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("TotalMetalWeightGross")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotalMetalWeightNet")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("ValuationCost")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MetalPurityId");

                    b.HasIndex("StockItemId");

                    b.ToTable("InventoryLevels");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CaratWeight")
                        .HasColumnType("decimal(10,4)");

                    b.Property<byte>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("MetalWeightGross")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("MetalWeightNet")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTimeOffset>("MovementDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("SourceOrderId")
                        .HasColumnType("int");

                    b.Property<int>("StockItemId")
                        .HasColumnType("int");

                    b.Property<byte>("TransactionTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SourceOrderId");

                    b.HasIndex("StockItemId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryTransactionType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("AffectsCost")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("MovementSign")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryTransactionTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<DateTimeOffset>("InvoiceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("InvoiceStatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("JournalEntryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RelatedOrderId")
                        .HasColumnType("int");

                    b.Property<byte>("RootTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("RootTypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InvoiceLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("LineAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<short>("LineNumber")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte>("TaxRateId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("TaxRateId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InvoiceStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegalSubmission")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Karat", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Fineness")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Karats");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Location", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MailingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("CityId")
                        .HasColumnType("tinyint");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("MailingAddresses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MetalPurity", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BaseMetalId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("KaratValue")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PurityRatio")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.HasIndex("BaseMetalId");

                    b.ToTable("MetalPurities");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MetalType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BaseUnitId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrecious")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.ToTable("MetalTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OperationDefinition", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsMetalPurityChanging")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresWorkCenter")
                        .HasColumnType("bit");

                    b.Property<decimal>("StandardDurationHours")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.ToTable("OperationDefinitions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OperationStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("AllowTimeEntry")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperationStatuses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("CreatedById")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeliveryDateTarget")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpectedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("OrderPaymentStatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("RequiredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("RootTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TaxesIncluded")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("UpdatedById")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderPaymentStatusId");

                    b.HasIndex("RootTypeId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderAdditionalFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountingAccountId")
                        .HasColumnType("int");

                    b.Property<byte>("AdditionalFeeDefinitionId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("AmountTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.HasIndex("AccountingAccountId");

                    b.HasIndex("AdditionalFeeDefinitionId");

                    b.HasIndex("AmountTypeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAdditionalFees");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderAdditionalFeeDefinition", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DefaultAccountingAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAccountingAccountId");

                    b.ToTable("OrderAdditionalFeeDefinitions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderFeeAmountType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderFeeAmountTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderFulfillment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("CargoId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("CashOnDeliveryPrice")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PackageControlledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("PackageControlledById")
                        .HasColumnType("tinyint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PackageControlledById");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderFulfillments");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("CustomerAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("CustomerCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("FixedExchangeRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<string>("LineNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("LineStatusId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LineTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<byte>("RootTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("StockCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCurrencyId");

                    b.HasIndex("LineStatusId");

                    b.HasIndex("LineTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("RootTypeId");

                    b.HasIndex("StockCurrencyId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLineCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("CustomerAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("CustomerRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<decimal?>("Fineness")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("OrderLineCostTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderLineId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderLineCostTypeId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("OrderLineId1");

                    b.ToTable("OrderLineCost");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLineCostType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("AffectsMetalInventory")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCost")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderLineCostType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLineType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("MovementSign")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderLineType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderMetalSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CustomerCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCaratWeight")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("TotalWeightOrAmount")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCurrencyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.ToTable("OrderMetalSummaries");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderPaymentLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CashId")
                        .HasColumnType("int");

                    b.Property<byte>("CreatedById")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CashId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.ToTable("OrderPaymentLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderPaymentStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentStatuses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderStatusDefinition", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("AllowsChanges")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("OrderStatusDefinitions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderTaxLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PresentmentTaxAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("PresentmentTaxBaseAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,3)");

                    b.Property<decimal>("ShopTaxAmount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal>("ShopTaxBaseAmount")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderTaxLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OwnCompany", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BaseCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LegalAddressId")
                        .HasColumnType("int");

                    b.Property<string>("LegalName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("LegalAddressId");

                    b.ToTable("OwnCompanies");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("bit");

                    b.Property<long>("JournalEntryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ReferenceDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceDocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.PaymentTerm", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("DueDateDays")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.PaymentType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("Module")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasePriceList")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("BrandId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DesignCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("StockUnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StockUnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("ImageTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ImageTypeId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("BaseUnitId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MetalColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("MetalPurityId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("MetalPurityId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ActualEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ActualStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("BomId")
                        .HasColumnType("int");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RoutingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ScheduledEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ScheduledStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("RoutingId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProductionOrders");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionOrderStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionOrderStatuses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRouting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short>("TotalTimeHours")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("ProductionRoutings");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRoutingItem", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionRoutingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<byte>("RoutingPurposeId")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductVariantId", "ProductionRoutingId");

                    b.HasIndex("ProductionRoutingId");

                    b.HasIndex("RoutingPurposeId");

                    b.ToTable("ProductionRoutingItems");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRoutingStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsInspectionStep")
                        .HasColumnType("bit");

                    b.Property<int>("RoutingId")
                        .HasColumnType("int");

                    b.Property<short>("Sequence")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TimeRequiredHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte>("WorkCenterId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RoutingId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("ProductionRoutingSteps");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("RoutingStepId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("TransactionTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("RoutingStepId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductionTransactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionTransactionType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInventoryInflow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductionTransactionTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionWorkCenter", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<short>("CapacityPerShift")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("ProductionWorkCenters");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("bit");

                    b.Property<byte>("MaterialTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RawMaterialType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RawMaterialTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RefiningProcess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("InputKaratId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("InputWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("LossWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("MetalCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("OutputKaratId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("OutputWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTimeOffset>("ProcessDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("InputKaratId");

                    b.HasIndex("MetalCurrencyId");

                    b.HasIndex("OutputKaratId");

                    b.ToTable("RefiningProcesses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RootType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("StockMovementSign")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("RootTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RoutingPurpose", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoutingPurposes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.SalePricingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CalculationValue")
                        .HasColumnType("decimal(10,5)");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("decimal(19,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("SalePricingRules");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ScrapTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("KaratId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MetalCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RelatedOrderId")
                        .HasColumnType("int");

                    b.Property<byte>("ScrapTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("WeightGrams")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("KaratId");

                    b.HasIndex("MetalCurrencyId");

                    b.HasIndex("RelatedOrderId");

                    b.HasIndex("ScrapTypeId");

                    b.ToTable("ScrapTransactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ScrapType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ScrapTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("BaseUnitId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMetalItem")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("MetalPurityId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MetalTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("StockItemTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("MetalPurityId");

                    b.HasIndex("MetalTypeId");

                    b.HasIndex("StockItemTypeId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockItemType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StockItemTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockMovementType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Sign")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("StockMovementTypes");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BaseExchangeCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("CostPerGramEUR")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("CreatedById")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Fineness")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FixedExchangeRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<byte>("LocationId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MetalCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MetalPurityId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MovementTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceDocType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SourceOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("WeightInGrams")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("BaseExchangeCurrencyId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("MetalCurrencyId");

                    b.HasIndex("MetalPurityId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("SourceOrderLineId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockUnitOfMeasure", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("DecimalPlaces")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StockUnitOfMeasures");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.TaxRate", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("RatePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTimeOffset>("ValidFromDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte?>("BaseUnitId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(10,5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("UomTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("UomTypeId1")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("UomTypeId");

                    b.HasIndex("UomTypeId1");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UnitOfMeasureConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("decimal(19,8)");

                    b.Property<byte>("FromUnitId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<byte>("ToUnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FromUnitId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ToUnitId");

                    b.ToTable("UnitOfMeasureConversions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UomType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UomTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "WEIGHT",
                            IsActive = true,
                            Name = "Ağırlık"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "COUNT",
                            IsActive = true,
                            Name = "Adet"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "LENGTH",
                            IsActive = true,
                            Name = "Uzunluk"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "VOLUME",
                            IsActive = true,
                            Name = "Hacim"
                        });
                });

            modelBuilder.Entity("FiloGH.Core.Entities.User", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("DefaultCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("PrimaryBranchId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCurrencyId");

                    b.HasIndex("PrimaryBranchId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UserBranchAccess", b =>
                {
                    b.Property<byte>("UserId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranchAccesses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UserRole", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UserRolePermission", b =>
                {
                    b.Property<byte>("UserRoleId")
                        .HasColumnType("tinyint");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserRolePermissions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkCenter", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("BranchId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("HourlyCostRate")
                        .HasColumnType("decimal(19,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMachine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("WorkCenters");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkCenterOperation", b =>
                {
                    b.Property<byte>("WorkCenterId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OperationDefinitionId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte?>("OperationDefinitionId1")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("OverrideCostRate")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("WorkCenterId", "OperationDefinitionId");

                    b.HasIndex("OperationDefinitionId");

                    b.HasIndex("OperationDefinitionId1");

                    b.ToTable("WorkCenterOperations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CalculatedScrapWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("CreatedById")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("IssuedMetalWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,2)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("TargetMetalWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("StatusId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MetalInputWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("MetalOutputWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte>("OperationDefinitionId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ScrapWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("WorkCenterId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationDefinitionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkCenterId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderOperations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderOperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdjustmentType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<byte>("EmployeeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MetalAdjustmentWeight")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("WorkOrderOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OperationId");

                    b.HasIndex("WorkOrderOperationId");

                    b.ToTable("WorkOrderOperationLogs");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInProduction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountChart", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.AccountChart", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountType");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountingJournalEntry", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountingJournalEntryLine", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.AccountingJournalEntry", "Entry")
                        .WithMany("Lines")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMLabor", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.BillOfMaterials", null)
                        .WithMany("Labors")
                        .HasForeignKey("BillOfMaterialsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.BillOfMaterials", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.BOMCostType", "LaborCostType")
                        .WithMany()
                        .HasForeignKey("LaborCostTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("LaborCostType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMStone", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.BillOfMaterials", "Bom")
                        .WithMany("Stones")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.BOMStoneType", "StoneType")
                        .WithMany()
                        .HasForeignKey("StoneTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("StoneType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BOMStoneType", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseUnit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Bank", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "AccountChart")
                        .WithMany()
                        .HasForeignKey("AccountChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountChart");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BillOfMaterials", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.BOMType", "BOMType")
                        .WithMany()
                        .HasForeignKey("BOMTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithOne("BillOfMaterials")
                        .HasForeignKey("FiloGH.Core.Entities.BillOfMaterials", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BOMType");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Branch", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Location", "DefaultCashLocation")
                        .WithMany()
                        .HasForeignKey("DefaultCashLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Location", "DefaultMetalLocation")
                        .WithMany()
                        .HasForeignKey("DefaultMetalLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OwnCompany", "OwnCompany")
                        .WithMany("Branches")
                        .HasForeignKey("OwnCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DefaultCashLocation");

                    b.Navigation("DefaultMetalLocation");

                    b.Navigation("OwnCompany");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BranchLocation", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany("BranchLocations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Location", null)
                        .WithMany("BranchLocations")
                        .HasForeignKey("LocationId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Cash", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "AccountChart")
                        .WithMany()
                        .HasForeignKey("AccountChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountChart");

                    b.Navigation("Branch");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.City", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Country", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultCurrency");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Customer", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BillingAddress");

                    b.Navigation("DefaultCurrency");

                    b.Navigation("PaymentTerm");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.CustomerMetalAccount", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "MetalCurrency")
                        .WithMany()
                        .HasForeignKey("MetalCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MetalCurrency");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.CustomerMetalAccountTransaction", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "MetalCurrency")
                        .WithMany()
                        .HasForeignKey("MetalCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.CustomerMetalAccountTransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MetalCurrency");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Employee", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "PrimaryBranch")
                        .WithMany()
                        .HasForeignKey("PrimaryBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrimaryBranch");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryCost", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLine", "OrderLine")
                        .WithOne("InventoryCost")
                        .HasForeignKey("FiloGH.Core.Entities.InventoryCost", "OrderLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.StockItem", "StockItem")
                        .WithMany()
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");

                    b.Navigation("OrderLine");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryLevel", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MetalPurity", "MetalPurity")
                        .WithMany()
                        .HasForeignKey("MetalPurityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.StockItem", "StockItem")
                        .WithMany()
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("MetalPurity");

                    b.Navigation("StockItem");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", "SourceOrder")
                        .WithMany()
                        .HasForeignKey("SourceOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.StockItem", "StockItem")
                        .WithMany()
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.InventoryTransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("SourceOrder");

                    b.Navigation("StockItem");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Invoice", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.AccountingJournalEntry", "JournalEntry")
                        .WithMany()
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.RootType", "RootType")
                        .WithMany()
                        .HasForeignKey("RootTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("JournalEntry");

                    b.Navigation("RootType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.InvoiceLine", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLine", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.TaxRate", "TaxRate")
                        .WithMany()
                        .HasForeignKey("TaxRateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("OrderLine");

                    b.Navigation("ProductVariant");

                    b.Navigation("TaxRate");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MailingAddress", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MetalPurity", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.MetalType", "BaseMetal")
                        .WithMany()
                        .HasForeignKey("BaseMetalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseMetal");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MetalType", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseUnit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Order", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.OrderPaymentStatus", "OrderPaymentStatus")
                        .WithMany()
                        .HasForeignKey("OrderPaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.RootType", "RootType")
                        .WithMany()
                        .HasForeignKey("RootTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "ShippingAddress")
                        .WithMany("ShippingForOrders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.OrderStatusDefinition", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BillingAddress");

                    b.Navigation("Branch");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("OrderPaymentStatus");

                    b.Navigation("RootType");

                    b.Navigation("ShippingAddress");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderAdditionalFee", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "AccountingAccount")
                        .WithMany()
                        .HasForeignKey("AccountingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderAdditionalFeeDefinition", "AdditionalFeeDefinition")
                        .WithMany()
                        .HasForeignKey("AdditionalFeeDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderFeeAmountType", "AmountType")
                        .WithMany()
                        .HasForeignKey("AmountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany("AdditionalFees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountingAccount");

                    b.Navigation("AdditionalFeeDefinition");

                    b.Navigation("AmountType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderAdditionalFeeDefinition", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "DefaultAccountingAccount")
                        .WithMany()
                        .HasForeignKey("DefaultAccountingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultAccountingAccount");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderFulfillment", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany("Fulfillments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.User", "PackageControlledBy")
                        .WithMany()
                        .HasForeignKey("PackageControlledById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "ShippingAddress")
                        .WithMany("ShippingForFulfillments")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.OrderStatusDefinition", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Location");

                    b.Navigation("Order");

                    b.Navigation("PackageControlledBy");

                    b.Navigation("ShippingAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLine", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "CustomerCurrency")
                        .WithMany()
                        .HasForeignKey("CustomerCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderStatusDefinition", "LineStatus")
                        .WithMany()
                        .HasForeignKey("LineStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLineType", "LineType")
                        .WithMany()
                        .HasForeignKey("LineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.RootType", "RootType")
                        .WithMany()
                        .HasForeignKey("RootTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "StockCurrency")
                        .WithMany()
                        .HasForeignKey("StockCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerCurrency");

                    b.Navigation("LineStatus");

                    b.Navigation("LineType");

                    b.Navigation("Location");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");

                    b.Navigation("RootType");

                    b.Navigation("StockCurrency");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLineCost", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLineCostType", "OrderLineCostType")
                        .WithMany("OrderLineCosts")
                        .HasForeignKey("OrderLineCostTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLine", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLine", null)
                        .WithMany("OrderLineCosts")
                        .HasForeignKey("OrderLineId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Currency");

                    b.Navigation("OrderLine");

                    b.Navigation("OrderLineCostType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderMetalSummary", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "CustomerCurrency")
                        .WithMany()
                        .HasForeignKey("CustomerCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", null)
                        .WithMany("MetalSummaries")
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerCurrency");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderPaymentLine", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Cash", "Cash")
                        .WithMany()
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", null)
                        .WithMany("PaymentLines")
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bank");

                    b.Navigation("Cash");

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderTaxLine", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Order", null)
                        .WithMany("TaxLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OwnCompany", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MailingAddress", "LegalAddress")
                        .WithMany()
                        .HasForeignKey("LegalAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseCurrency");

                    b.Navigation("LegalAddress");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Payment", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.AccountChart", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.AccountingJournalEntry", "JournalEntry")
                        .WithMany()
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("JournalEntry");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.PriceList", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Product", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.StockUnitOfMeasure", "StockUnit")
                        .WithMany()
                        .HasForeignKey("StockUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("StockUnit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductCategory", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductImage", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.ImageType", "ImageType")
                        .WithMany()
                        .HasForeignKey("ImageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImageType");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductVariant", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MetalPurity", "MetalPurity")
                        .WithMany()
                        .HasForeignKey("MetalPurityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseUnit");

                    b.Navigation("MetalPurity");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionOrder", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.BillOfMaterials", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionRouting", "Routing")
                        .WithMany()
                        .HasForeignKey("RoutingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("Branch");

                    b.Navigation("ProductVariant");

                    b.Navigation("Routing");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRoutingItem", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionRouting", "ProductionRouting")
                        .WithMany()
                        .HasForeignKey("ProductionRoutingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.RoutingPurpose", "RoutingPurpose")
                        .WithMany()
                        .HasForeignKey("RoutingPurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("ProductionRouting");

                    b.Navigation("RoutingPurpose");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRoutingStep", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.ProductionRouting", "Routing")
                        .WithMany("Steps")
                        .HasForeignKey("RoutingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionWorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Routing");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionTransaction", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.ProductionOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionRoutingStep", "RoutingStep")
                        .WithMany()
                        .HasForeignKey("RoutingStepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductionTransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");

                    b.Navigation("ProductionOrder");

                    b.Navigation("RoutingStep");

                    b.Navigation("TransactionType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionWorkCenter", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RawMaterial", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.RawMaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.RefiningProcess", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Karat", "InputKarat")
                        .WithMany()
                        .HasForeignKey("InputKaratId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "MetalCurrency")
                        .WithMany()
                        .HasForeignKey("MetalCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Karat", "OutputKarat")
                        .WithMany()
                        .HasForeignKey("OutputKaratId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("InputKarat");

                    b.Navigation("MetalCurrency");

                    b.Navigation("OutputKarat");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.SalePricingRule", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PriceList");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ScrapTransaction", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Karat", "Karat")
                        .WithMany()
                        .HasForeignKey("KaratId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "MetalCurrency")
                        .WithMany()
                        .HasForeignKey("MetalCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductionOrder", "RelatedOrder")
                        .WithMany()
                        .HasForeignKey("RelatedOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ScrapType", "ScrapType")
                        .WithMany()
                        .HasForeignKey("ScrapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Karat");

                    b.Navigation("MetalCurrency");

                    b.Navigation("RelatedOrder");

                    b.Navigation("ScrapType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockItem", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MetalPurity", "MetalPurity")
                        .WithMany()
                        .HasForeignKey("MetalPurityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.MetalType", "MetalType")
                        .WithMany()
                        .HasForeignKey("MetalTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.StockItemType", "StockItemType")
                        .WithMany()
                        .HasForeignKey("StockItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseUnit");

                    b.Navigation("MetalPurity");

                    b.Navigation("MetalType");

                    b.Navigation("StockItemType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.StockTransaction", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "BaseExchangeCurrency")
                        .WithMany()
                        .HasForeignKey("BaseExchangeCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Currency", "MetalCurrency")
                        .WithMany()
                        .HasForeignKey("MetalCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.MetalPurity", "MetalPurity")
                        .WithMany()
                        .HasForeignKey("MetalPurityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.StockMovementType", "MovementType")
                        .WithMany()
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OrderLine", "SourceOrderLine")
                        .WithMany()
                        .HasForeignKey("SourceOrderLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseExchangeCurrency");

                    b.Navigation("Branch");

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("MetalCurrency");

                    b.Navigation("MetalPurity");

                    b.Navigation("MovementType");

                    b.Navigation("SourceOrderLine");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UnitOfMeasure", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "BaseUnit")
                        .WithMany("RelatedUnits")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.UomType", "UomType")
                        .WithMany()
                        .HasForeignKey("UomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UomType", null)
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("UomTypeId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseUnit");

                    b.Navigation("UomType");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UnitOfMeasureConversion", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "FromUnit")
                        .WithMany()
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.UnitOfMeasure", "ToUnit")
                        .WithMany()
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUnit");

                    b.Navigation("ProductVariant");

                    b.Navigation("ToUnit");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.User", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Currency", "DefaultCurrency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.Branch", "PrimaryBranch")
                        .WithMany()
                        .HasForeignKey("PrimaryBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultCurrency");

                    b.Navigation("PrimaryBranch");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UserBranchAccess", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.User", "User")
                        .WithMany("BranchAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UserRolePermission", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkCenter", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkCenterOperation", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.OperationDefinition", "OperationDefinition")
                        .WithMany()
                        .HasForeignKey("OperationDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OperationDefinition", null)
                        .WithMany("AllowedWorkCenters")
                        .HasForeignKey("OperationDefinitionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.WorkCenter", "WorkCenter")
                        .WithMany("AllowedOperations")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperationDefinition");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrder", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FiloGH.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.WorkOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderOperation", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.OperationDefinition", "OperationDefinition")
                        .WithMany()
                        .HasForeignKey("OperationDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.OperationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Operations")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperationDefinition");

                    b.Navigation("Status");

                    b.Navigation("WorkCenter");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderOperationLog", b =>
                {
                    b.HasOne("FiloGH.Core.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.WorkOrderOperation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FiloGH.Core.Entities.WorkOrderOperation", null)
                        .WithMany("Logs")
                        .HasForeignKey("WorkOrderOperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountChart", b =>
                {
                    b.Navigation("ChildAccounts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.AccountingJournalEntry", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.BillOfMaterials", b =>
                {
                    b.Navigation("Labors");

                    b.Navigation("Stones");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Branch", b =>
                {
                    b.Navigation("BranchLocations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Location", b =>
                {
                    b.Navigation("BranchLocations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.MailingAddress", b =>
                {
                    b.Navigation("ShippingForFulfillments");

                    b.Navigation("ShippingForOrders");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OperationDefinition", b =>
                {
                    b.Navigation("AllowedWorkCenters");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Order", b =>
                {
                    b.Navigation("AdditionalFees");

                    b.Navigation("Fulfillments");

                    b.Navigation("MetalSummaries");

                    b.Navigation("OrderLines");

                    b.Navigation("PaymentLines");

                    b.Navigation("TaxLines");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLine", b =>
                {
                    b.Navigation("InventoryCost");

                    b.Navigation("OrderLineCosts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OrderLineCostType", b =>
                {
                    b.Navigation("OrderLineCosts");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.OwnCompany", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductCategory", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductVariant", b =>
                {
                    b.Navigation("BillOfMaterials");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionOrder", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.ProductionRouting", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("RelatedUnits");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.UomType", b =>
                {
                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.User", b =>
                {
                    b.Navigation("BranchAccesses");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkCenter", b =>
                {
                    b.Navigation("AllowedOperations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrder", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("FiloGH.Core.Entities.WorkOrderOperation", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
