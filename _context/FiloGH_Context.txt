{
  "Root": "C:\\Users\\ak\\OneDrive\\VSProje\\FiloGH",
  "GeneratedAt": "2025-10-21T20:18:29.2005527+03:00",
  "Solution": {
    "SolutionPath": "C:\\Users\\ak\\OneDrive\\VSProje\\FiloGH\\FiloGH.sln",
    "Projects": [
      {
        "Name": "FiloGH.Web",
        "RelativePath": "FiloGH/FiloGH.Web.csproj"
      },
      {
        "Name": "FiloGH.Core",
        "RelativePath": "FiloGH.Core/FiloGH.Core.csproj"
      },
      {
        "Name": "FiloGH.Application",
        "RelativePath": "FiloGH.Application/FiloGH.Application.csproj"
      },
      {
        "Name": "FiloGH.Infrastructure",
        "RelativePath": "FiloGH.Infrastructure/FiloGH.Infrastructure.csproj"
      }
    ]
  },
  "Program": {
    "Path": "C:\\Users\\ak\\OneDrive\\VSProje\\FiloGH\\FiloGH\\Program.cs",
    "ProviderHint": "SqlServer"
  },
  "AppSettings": {
    "Path": "C:\\Users\\ak\\OneDrive\\VSProje\\FiloGH\\FiloGH\\appsettings.json",
    "ConnectionStrings": [
      {
        "Key": "yol",
        "Value": "***"
      }
    ]
  },
  "DbContexts": [
    {
      "Path": "FiloGH.Infrastructure/Data/Contexts/AppDbContext.cs",
      "Name": "AppDbContext"
    }
  ],
  "MigrationsDirs": [
    "FiloGH.Infrastructure/Migrations"
  ],
  "RazorFiles": [
    "FiloGH/Components/_Imports.razor",
    "FiloGH/Components/App.razor",
    "FiloGH/Components/CustomControls/DateTimeOffsetPicker.razor",
    "FiloGH/Components/Layout/_BaseIndex.razor",
    "FiloGH/Components/Layout/CustomLayout.razor",
    "FiloGH/Components/Layout/Footer.razor",
    "FiloGH/Components/Layout/MainHeader.razor",
    "FiloGH/Components/Layout/MainLayout.razor",
    "FiloGH/Components/Layout/Modal.razor",
    "FiloGH/Components/Layout/NavMenu.razor",
    "FiloGH/Components/Layout/SubNavMenu.razor",
    "FiloGH/Components/Pages/Authentication/Error401.razor",
    "FiloGH/Components/Pages/Dashboards/Dashboard.razor",
    "FiloGH/Components/Pages/Index.razor",
    "FiloGH/Components/Pages/Mock/Pages/CurrencyDialog.razor",
    "FiloGH/Components/Pages/Mock/Pages/PriceListDialog.razor",
    "FiloGH/Components/Pages/Mock/Pages/ProductDetail.razor",
    "FiloGH/Components/Pages/Mock/Pages/ProductList.razor",
    "FiloGH/Components/Pages/Mock/Pages/TestDialog.razor",
    "FiloGH/Components/Pages/Mock/Pages/UnitOfMeasures.razor",
    "FiloGH/Components/Pages/Mock/Pages/UomDialog.razor",
    "FiloGH/Components/Pages/OrderDetail.razor",
    "FiloGH/Components/Pages/OrderList.razor",
    "FiloGH/Components/Pages/Test.razor",
    "FiloGH/Components/Routes.razor"
  ],
  "Services": [
    {
      "Path": "FiloGH/Components/Services/ActionService.cs",
      "Name": "ActionService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH/Components/Services/AppStateService.cs",
      "Name": "AppStateService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/BaseService.cs",
      "Name": "BaseService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Infrastructure/Services/Cache/CacheService.cs",
      "Name": "CacheService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Infrastructure/Services/Client/ClientTimeZoneService.cs",
      "Name": "ClientTimeZoneService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/CurrencyService.cs",
      "Name": "CurrencyService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH/Components/Services/ActionService.cs",
      "Name": "IActionService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/IBaseService.cs",
      "Name": "IBaseService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Core/Interfaces/ICacheService.cs",
      "Name": "ICacheService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Core/Interfaces/IClientTimeZoneService.cs",
      "Name": "IClientTimeZoneService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/ICurrencyService.cs",
      "Name": "ICurrencyService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Interfaces/IInventoryService.cs",
      "Name": "IInventoryService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/InventoryService.cs",
      "Name": "InventoryService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Interfaces/IOrderService.cs",
      "Name": "IOrderService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/IPriceListService.cs",
      "Name": "IPriceListService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Interfaces/IProductionService.cs",
      "Name": "IProductionService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/IProductService.cs",
      "Name": "IProductService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/IUnitOfMeasureService.cs",
      "Name": "IUnitOfMeasureService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH.Application/Services/Abstract/IUomTypeService.cs",
      "Name": "IUomTypeService",
      "Kind": "interface"
    },
    {
      "Path": "FiloGH/Components/Services/MenuData.Service.cs",
      "Name": "MenuDataService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH/Components/Services/NavScroll.Service.cs",
      "Name": "NavScrollService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/OrderService.cs",
      "Name": "OrderService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/PriceListService.cs",
      "Name": "PriceListService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/ProductionService.cs",
      "Name": "ProductionService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/ProductService.cs",
      "Name": "ProductService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH/Components/Services/SessionService.Service.cs",
      "Name": "SessionService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH/Components/Services/StateService.cs",
      "Name": "StateService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/UnitOfMeasureService.cs",
      "Name": "UnitOfMeasureService",
      "Kind": "class"
    },
    {
      "Path": "FiloGH.Application/Services/Concrete/UomTypeService.cs",
      "Name": "UomTypeService",
      "Kind": "class"
    }
  ],
  "Entities": [
    {
      "Class": "AccountChart",
      "Path": "FiloGH.Core/Entities/AccountChart.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(150)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "ParentAccountId",
          "Attributes": []
        },
        {
          "Type": "AccountChart?",
          "Name": "ParentAccount",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "AccountTypeId",
          "Attributes": []
        },
        {
          "Type": "AccountType",
          "Name": "AccountType",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsPostingAccount",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsMetalAccount",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CAccountChart\u003E",
          "Name": "ChildAccounts",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class AccountChart { public int Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(150)] public required string Name { get; set; } public int? ParentAccountId { get; set; } public AccountChart? ParentAccount { get; set; } public byte AccountTypeId { get; set; } public required AccountType AccountType { get; set; } = null!; public bool IsPostingAccount { get; set; } = true; public bool IsMetalAccount { get; set; } = false; public bool IsActive { get; set; } = true; public ICollection\u003CAccountChart\u003E ChildAccounts { get; set; } = new List\u003CAccountChart\u003E(); } }"
    },
    {
      "Class": "AccountingJournalEntry",
      "Path": "FiloGH.Core/Entities/AccountingJournalEntry.cs",
      "Kind": "Entity",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "EntryNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "EntryDate",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsPosted",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ReferenceDocumentId",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceDocumentType",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "ICollection\u003CAccountingJournalEntryLine\u003E",
          "Name": "Lines",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Entities; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class AccountingJournalEntry { public long Id { get; set; } [MaxLength(20)] public required string EntryNumber { get; set; } public DateTimeOffset EntryDate { get; set; } = DateTimeOffset.Now; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; [MaxLength(500)] public string? Description { get; set; } public bool IsPosted { get; set; } = false; public int? ReferenceDocumentId { get; set; } [MaxLength(50)] public string? ReferenceDocumentType { get; set; } public ICollection\u003CAccountingJournalEntryLine\u003E Lines { get; set; } = new List\u003CAccountingJournalEntryLine\u003E(); } }"
    },
    {
      "Class": "AccountingJournalEntryLine",
      "Path": "FiloGH.Core/Entities/AccountingJournalEntryLine.cs",
      "Kind": "Entity",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "long",
          "Name": "EntryId",
          "Attributes": []
        },
        {
          "Type": "AccountingJournalEntry",
          "Name": "Entry",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "LineNumber",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "AccountId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "Account",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "DebitAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CreditAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "BaseCurrencyDebit",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "BaseCurrencyCredit",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class AccountingJournalEntryLine { public long Id { get; set; } public long EntryId { get; set; } public required AccountingJournalEntry Entry { get; set; } = null!; public short LineNumber { get; set; } public int AccountId { get; set; } public required AccountChart Account { get; set; } = null!; public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; [MaxLength(255)] public string? Description { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal DebitAmount { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal CreditAmount { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal BaseCurrencyDebit { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal BaseCurrencyCredit { get; set; } = 0.0M; } }"
    },
    {
      "Class": "AccountType",
      "Path": "FiloGH.Core/Entities/AccountType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "FinancialStatementCategory",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class AccountType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public byte FinancialStatementCategory { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "ActionService",
      "Path": "FiloGH/Components/Services/ActionService.cs",
      "Kind": "Entity",
      "BaseName": "IActionService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "using System; public interface IActionService { event Action\u003Cstring\u003E OnActionTriggered; void TriggerAction(string actionValue); } public class ActionService : IActionService { public event Action\u003Cstring\u003E? OnActionTriggered; public void TriggerAction(string actionValue) { OnActionTriggered?.Invoke(actionValue); } }"
    },
    {
      "Class": "AppDbContext",
      "Path": "FiloGH.Infrastructure/Data/Contexts/AppDbContext.cs",
      "Kind": "Entity",
      "BaseName": "DbContext",
      "PropertyCount": 97,
      "Properties": [
        {
          "Type": "DbSet\u003CAccountChart\u003E",
          "Name": "AccountCharts",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CAccountingJournalEntry\u003E",
          "Name": "AccountingJournalEntries",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CAccountingJournalEntryLine\u003E",
          "Name": "AccountingJournalEntryLines",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CAccountType\u003E",
          "Name": "AccountTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBank\u003E",
          "Name": "Banks",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCash\u003E",
          "Name": "CashRegisters",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCurrency\u003E",
          "Name": "Currencies",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CPayment\u003E",
          "Name": "Payments",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CPaymentTerm\u003E",
          "Name": "PaymentTerms",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CPaymentType\u003E",
          "Name": "PaymentTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CTaxRate\u003E",
          "Name": "TaxRates",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCustomer\u003E",
          "Name": "Customers",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COwnCompany\u003E",
          "Name": "OwnCompanies",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBranch\u003E",
          "Name": "Branches",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBranchLocation\u003E",
          "Name": "BranchLocations",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CEmployee\u003E",
          "Name": "Employees",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCity\u003E",
          "Name": "Cities",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCountry\u003E",
          "Name": "Countries",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CMailingAddress\u003E",
          "Name": "MailingAddresses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrder\u003E",
          "Name": "Orders",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderLine\u003E",
          "Name": "OrderLines",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderFulfillment\u003E",
          "Name": "OrderFulfillments",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderMetalSummary\u003E",
          "Name": "OrderMetalSummaries",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderAdditionalFee\u003E",
          "Name": "OrderAdditionalFees",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderAdditionalFeeDefinition\u003E",
          "Name": "OrderAdditionalFeeDefinitions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderFeeAmountType\u003E",
          "Name": "OrderFeeAmountTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderTaxLine\u003E",
          "Name": "OrderTaxLines",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderPaymentLine\u003E",
          "Name": "OrderPaymentLines",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderPaymentStatus\u003E",
          "Name": "OrderPaymentStatuses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderStatusDefinition\u003E",
          "Name": "OrderStatusDefinitions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInvoice\u003E",
          "Name": "Invoices",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInvoiceLine\u003E",
          "Name": "InvoiceLines",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInvoiceStatus\u003E",
          "Name": "InvoiceStatuses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CRootType\u003E",
          "Name": "RootTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProduct\u003E",
          "Name": "Products",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductVariant\u003E",
          "Name": "ProductVariants",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductCategory\u003E",
          "Name": "ProductCategories",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductImage\u003E",
          "Name": "ProductImages",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CImageType\u003E",
          "Name": "ImageTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CStockItem\u003E",
          "Name": "StockItems",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CStockItemType\u003E",
          "Name": "StockItemTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInventoryLevel\u003E",
          "Name": "InventoryLevels",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInventoryTransaction\u003E",
          "Name": "InventoryTransactions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInventoryTransactionType\u003E",
          "Name": "InventoryTransactionTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CInventoryCost\u003E",
          "Name": "InventoryCosts",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CLocation\u003E",
          "Name": "Locations",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CStockMovementType\u003E",
          "Name": "StockMovementTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CStockTransaction\u003E",
          "Name": "StockTransactions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CRawMaterial\u003E",
          "Name": "RawMaterials",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CRawMaterialType\u003E",
          "Name": "RawMaterialTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COrderLineCost\u003E",
          "Name": "OrderLineCost",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionOrder\u003E",
          "Name": "ProductionOrders",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionOrderStatus\u003E",
          "Name": "ProductionOrderStatuses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionRouting\u003E",
          "Name": "ProductionRoutings",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionRoutingItem\u003E",
          "Name": "ProductionRoutingItems",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionRoutingStep\u003E",
          "Name": "ProductionRoutingSteps",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionTransaction\u003E",
          "Name": "ProductionTransactions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionTransactionType\u003E",
          "Name": "ProductionTransactionTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CProductionWorkCenter\u003E",
          "Name": "ProductionWorkCenters",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBillOfMaterials\u003E",
          "Name": "BillOfMaterials",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBOMCostType\u003E",
          "Name": "BOMCostTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBOMLabor\u003E",
          "Name": "BOMLabors",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBOMStone\u003E",
          "Name": "BOMStones",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBOMStoneType\u003E",
          "Name": "BOMStoneTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBOMType\u003E",
          "Name": "BOMTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CRoutingPurpose\u003E",
          "Name": "RoutingPurposes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkOrder\u003E",
          "Name": "WorkOrders",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkOrderStatus\u003E",
          "Name": "WorkOrderStatuses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkOrderOperation\u003E",
          "Name": "WorkOrderOperations",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COperationDefinition\u003E",
          "Name": "OperationDefinitions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003COperationStatus\u003E",
          "Name": "OperationStatuses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkCenter\u003E",
          "Name": "WorkCenters",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkCenterOperation\u003E",
          "Name": "WorkCenterOperations",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CWorkOrderOperationLog\u003E",
          "Name": "WorkOrderOperationLogs",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CMetalType\u003E",
          "Name": "MetalTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CMetalPurity\u003E",
          "Name": "MetalPurities",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CMetalColor\u003E",
          "Name": "MetalColor",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CDailyMetalRate\u003E",
          "Name": "DailyMetalRates",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCustomerMetalAccount\u003E",
          "Name": "CustomerMetalAccounts",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCustomerMetalAccountTransaction\u003E",
          "Name": "CustomerMetalAccountTransactions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCustomerMetalAccountTransactionType\u003E",
          "Name": "CustomerMetalAccountTransactionTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CRefiningProcess\u003E",
          "Name": "RefiningProcesses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CScrapTransaction\u003E",
          "Name": "ScrapTransactions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CScrapType\u003E",
          "Name": "ScrapTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CKarat\u003E",
          "Name": "Karats",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUnitOfMeasure\u003E",
          "Name": "UnitOfMeasures",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUnitOfMeasureConversion\u003E",
          "Name": "UnitOfMeasureConversions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUomType\u003E",
          "Name": "UomTypes",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CPriceList\u003E",
          "Name": "PriceLists",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CSalePricingRule\u003E",
          "Name": "SalePricingRules",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CBrand\u003E",
          "Name": "Brands",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CCargo\u003E",
          "Name": "Cargos",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUser\u003E",
          "Name": "Users",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUserRole\u003E",
          "Name": "UserRoles",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUserBranchAccess\u003E",
          "Name": "UserBranchAccesses",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CUserRolePermission\u003E",
          "Name": "UserRolePermissions",
          "Attributes": []
        },
        {
          "Type": "DbSet\u003CPermission\u003E",
          "Name": "Permissions",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; using System.Linq; namespace FiloGH.Infrastructure.Data.Contexts { public class AppDbContext : DbContext, IApplicationDbContext { public AppDbContext(DbContextOptions\u003CAppDbContext\u003E options) : base(options) { } public DbSet\u003CAccountChart\u003E AccountCharts { get; set; } public DbSet\u003CAccountingJournalEntry\u003E AccountingJournalEntries { get; set; } public DbSet\u003CAccountingJournalEntryLine\u003E AccountingJournalEntryLines { get; set; } public DbSet\u003CAccountType\u003E AccountTypes { get; set; } public DbSet\u003CBank\u003E Banks { get; set; } public DbSet\u003CCash\u003E CashRegisters { get; set; } public DbSet\u003CCurrency\u003E Currencies { get; set; } public DbSet\u003CPayment\u003E Payments { get; set; } public DbSet\u003CPaymentTerm\u003E PaymentTerms { get; set; } public DbSet\u003CPaymentType\u003E PaymentTypes { get; set; } public DbSet\u003CTaxRate\u003E TaxRates { get; set; } public DbSet\u003CCustomer\u003E Customers { get; set; } public DbSet\u003COwnCompany\u003E OwnCompanies { get; set; } public DbSet\u003CBranch\u003E Branches { get; set; } public DbSet\u003CBranchLocation\u003E BranchLocations { get; set; } public DbSet\u003CEmployee\u003E Employees { get; set; } public DbSet\u003CCity\u003E Cities { get; set; } public DbSet\u003CCountry\u003E Countries { get; set; } public DbSet\u003CMailingAddress\u003E MailingAddresses { get; set; } public DbSet\u003COrder\u003E Orders { get; set; } public DbSet\u003COrderLine\u003E OrderLines { get; set; } public DbSet\u003COrderFulfillment\u003E OrderFulfillments { get; set; } public DbSet\u003COrderMetalSummary\u003E OrderMetalSummaries { get; set; } public DbSet\u003COrderAdditionalFee\u003E OrderAdditionalFees { get; set; } public DbSet\u003COrderAdditionalFeeDefinition\u003E OrderAdditionalFeeDefinitions { get; set; } public DbSet\u003COrderFeeAmountType\u003E OrderFeeAmountTypes { get; set; } public DbSet\u003COrderTaxLine\u003E OrderTaxLines { get; set; } public DbSet\u003COrderPaymentLine\u003E OrderPaymentLines { get; set; } public DbSet\u003COrderPaymentStatus\u003E OrderPaymentStatuses { get; set; } public DbSet\u003COrderStatusDefinition\u003E OrderStatusDefinitions { get; set; } public DbSet\u003CInvoice\u003E Invoices { get; set; } public DbSet\u003CInvoiceLine\u003E InvoiceLines { get; set; } public DbSet\u003CInvoiceStatus\u003E InvoiceStatuses { get; set; } public DbSet\u003CRootType\u003E RootTypes { get; set; } public DbSet\u003CProduct\u003E Products { get; set; } public DbSet\u003CProductVariant\u003E ProductVariants { get; set; } public DbSet\u003CProductCategory\u003E ProductCategories { get; set; } public DbSet\u003CProductImage\u003E ProductImages { get; set; } public DbSet\u003CImageType\u003E ImageTypes { get; set; } public DbSet\u003CStockItem\u003E StockItems { get; set; } public DbSet\u003CStockItemType\u003E StockItemTypes { get; set; } public DbSet\u003CInventoryLevel\u003E InventoryLevels { get; set; } public DbSet\u003CInventoryTransaction\u003E InventoryTransactions { get; set; } public DbSet\u003CInventoryTransactionType\u003E InventoryTransactionTypes { get; set; } public DbSet\u003CInventoryCost\u003E InventoryCosts { get; set; } public DbSet\u003CLocation\u003E Locations { get; set; } public DbSet\u003CStockMovementType\u003E StockMovementTypes { get; set; } public DbSet\u003CStockTransaction\u003E StockTransactions { get; set; } public DbSet\u003CRawMaterial\u003E RawMaterials { get; set; } public DbSet\u003CRawMaterialType\u003E RawMaterialTypes { get; set; } public DbSet\u003COrderLineCost\u003E OrderLineCost { get; set; } public DbSet\u003CProductionOrder\u003E ProductionOrders { get; set; } public DbSet\u003CProductionOrderStatus\u003E ProductionOrderStatuses { get; set; } public DbSet\u003CProductionRouting\u003E ProductionRoutings { get; set; } public DbSet\u003CProductionRoutingItem\u003E ProductionRoutingItems { get; set; } public DbSet\u003CProductionRoutingStep\u003E ProductionRoutingSteps { get; set; } public DbSet\u003CProductionTransaction\u003E ProductionTransactions { get; set; } public DbSet\u003CProductionTransactionType\u003E ProductionTransactionTypes { get; set; } public DbSet\u003CProductionWorkCenter\u003E ProductionWorkCenters { get; set; } public DbSet\u003CBillOfMaterials\u003E BillOfMaterials { get; set; } public DbSet\u003CBOMCostType\u003E BOMCostTypes { get; set; } public DbSet\u003CBOMLabor\u003E BOMLabors { get; set; } public DbSet\u003CBOMStone\u003E BOMStones { get; set; } public DbSet\u003CBOMStoneType\u003E BOMStoneTypes { get; set; } public DbSet\u003CBOMType\u003E BOMTypes { get; set; } public DbSet\u003CRoutingPurpose\u003E RoutingPurposes { get; set; } public DbSet\u003CWorkOrder\u003E WorkOrders { get; set; } public DbSet\u003CWorkOrderStatus\u003E WorkOrderStatuses { get; set; } public DbSet\u003CWorkOrderOperation\u003E WorkOrderOperations { get; set; } public DbSet\u003COperationDefinition\u003E OperationDefinitions { get; set; } public DbSet\u003COperationStatus\u003E OperationStatuses { get; set; } public DbSet\u003CWorkCenter\u003E WorkCenters { get; set; } public DbSet\u003CWorkCenterOperation\u003E WorkCenterOperations { get; set; } public DbSet\u003CWorkOrderOperationLog\u003E WorkOrderOperationLogs { get; set; } public DbSet\u003CMetalType\u003E MetalTypes { get; set; } public DbSet\u003CMetalPurity\u003E MetalPurities { get; set; } public DbSet\u003CMetalColor\u003E MetalColor { get; set; } public DbSet\u003CDailyMetalRate\u003E DailyMetalRates { get; set; } public DbSet\u003CCustomerMetalAccount\u003E CustomerMetalAccounts { get; set; } public DbSet\u003CCustomerMetalAccountTransaction\u003E CustomerMetalAccountTransactions { get; set; } public DbSet\u003CCustomerMetalAccountTransactionType\u003E CustomerMetalAccountTransactionTypes { get; set; } public DbSet\u003CRefiningProcess\u003E RefiningProcesses { get; set; } public DbSet\u003CScrapTransaction\u003E ScrapTransactions { get; set; } public DbSet\u003CScrapType\u003E ScrapTypes { get; set; } public DbSet\u003CKarat\u003E Karats { get; set; } public DbSet\u003CUnitOfMeasure\u003E UnitOfMeasures { get; set; } public DbSet\u003CUnitOfMeasureConversion\u003E UnitOfMeasureConversions { get; set; } public DbSet\u003CUomType\u003E UomTypes { get; set; } public DbSet\u003CPriceList\u003E PriceLists { get; set; } public DbSet\u003CSalePricingRule\u003E SalePricingRules { get; set; } public DbSet\u003CBrand\u003E Brands { get; set; } public DbSet\u003CCargo\u003E Cargos { get; set; } public DbSet\u003CUser\u003E Users { get; set; } public DbSet\u003CUserRole\u003E UserRoles { get; set; } public DbSet\u003CUserBranchAccess\u003E UserBranchAccesses { get; set; } public DbSet\u003CUserRolePermission\u003E UserRolePermissions { get; set; } public DbSet\u003CPermission\u003E Permissions { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity\u003CBranchLocation\u003E() .HasKey(bl =\u003E new { bl.BranchId, bl.LocationId }); modelBuilder.Entity\u003CBranchLocation\u003E() .HasOne(bl =\u003E bl.Branch) .WithMany(l =\u003E l.BranchLocations) .HasForeignKey(bl =\u003E bl.BranchId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CBranchLocation\u003E() .HasOne(bl =\u003E bl.Location) .WithMany() .HasForeignKey(bl =\u003E bl.LocationId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CProductionRoutingItem\u003E() .HasKey(pri =\u003E new { pri.ProductVariantId, pri.ProductionRoutingId }); modelBuilder.Entity\u003CProductionRoutingItem\u003E() .HasOne(pri =\u003E pri.ProductVariant) .WithMany() .HasForeignKey(pri =\u003E pri.ProductVariantId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CProductionRoutingItem\u003E() .HasOne(pri =\u003E pri.ProductionRouting) .WithMany() .HasForeignKey(pri =\u003E pri.ProductionRoutingId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CProductionRoutingItem\u003E() .HasOne(pri =\u003E pri.RoutingPurpose) .WithMany() .HasForeignKey(pri =\u003E pri.RoutingPurposeId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CUserBranchAccess\u003E() .HasKey(uba =\u003E new { uba.UserId, uba.BranchId }); modelBuilder.Entity\u003CUserBranchAccess\u003E() .HasOne(uba =\u003E uba.User) .WithMany(l =\u003E l.BranchAccesses) .HasForeignKey(uba =\u003E uba.UserId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CUserBranchAccess\u003E() .HasOne(uba =\u003E uba.Branch) .WithMany() .HasForeignKey(uba =\u003E uba.BranchId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CUserRolePermission\u003E() .HasKey(urp =\u003E new { urp.UserRoleId, urp.PermissionId }); modelBuilder.Entity\u003CUserRolePermission\u003E() .HasOne(urp =\u003E urp.UserRole) .WithMany() .HasForeignKey(urp =\u003E urp.UserRoleId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CUserRolePermission\u003E() .HasOne(urp =\u003E urp.Permission) .WithMany() .HasForeignKey(urp =\u003E urp.PermissionId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003COrder\u003E() .HasOne(o =\u003E o.RootType) .WithMany() .HasForeignKey(o =\u003E o.RootTypeId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003COrder\u003E() .HasOne(o =\u003E o.CreatedBy) .WithMany() .HasForeignKey(o =\u003E o.CreatedById) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderLine\u003E() .HasOne(ol =\u003E ol.RootType) .WithMany() .HasForeignKey(ol =\u003E ol.RootTypeId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003COrderLine\u003E() .HasOne(ol =\u003E ol.LineStatus) .WithMany() .HasForeignKey(ol =\u003E ol.LineStatusId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003COrderLine\u003E() .HasOne(ol =\u003E ol.StockCurrency) .WithMany() .HasForeignKey(ol =\u003E ol.StockCurrencyId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderLine\u003E() .HasOne(ol =\u003E ol.Order) .WithMany(o =\u003E o.OrderLines) .HasForeignKey(ol =\u003E ol.OrderId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderAdditionalFee\u003E() .HasOne(oaf =\u003E oaf.AdditionalFeeDefinition) .WithMany() .HasForeignKey(oaf =\u003E oaf.AdditionalFeeDefinitionId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003COrderFulfillment\u003E() .HasOne(of =\u003E of.Status) .WithMany() .HasForeignKey(of =\u003E of.StatusId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003COrderFulfillment\u003E() .HasOne(of =\u003E of.Order) .WithMany(o =\u003E o.Fulfillments) .HasForeignKey(of =\u003E of.OrderId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CProduct\u003E() .HasOne(p =\u003E p.Brand) .WithMany() .HasForeignKey(p =\u003E p.BrandId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CWorkOrderOperation\u003E() .HasOne(woo =\u003E woo.WorkCenter) .WithMany() .HasForeignKey(woo =\u003E woo.WorkCenterId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CCustomerMetalAccountTransaction\u003E() .HasOne(cmat =\u003E cmat.TransactionType) .WithMany() .HasForeignKey(cmat =\u003E cmat.TransactionTypeId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CCustomer\u003E() .HasOne(c =\u003E c.BillingAddress) .WithMany() .HasForeignKey(c =\u003E c.BillingAddressId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CCustomer\u003E() .HasOne(c =\u003E c.ShippingAddress) .WithMany() .HasForeignKey(c =\u003E c.ShippingAddressId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CMailingAddress\u003E() .HasOne(ma =\u003E ma.Customer) .WithMany() .HasForeignKey(ma =\u003E ma.CustomerId) .IsRequired(false) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CBillOfMaterials\u003E() .HasOne(bom =\u003E bom.ProductVariant) .WithOne(pv =\u003E pv.BillOfMaterials) .HasForeignKey\u003CBillOfMaterials\u003E(bom =\u003E bom.ProductVariantId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CProductionTransaction\u003E() .HasOne(pt =\u003E pt.ProductionOrder) .WithMany(po =\u003E po.Transactions) .HasForeignKey(pt =\u003E pt.ProductionOrderId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CProductionTransaction\u003E() .HasOne(pt =\u003E pt.Unit) .WithMany() .HasForeignKey(pt =\u003E pt.UnitId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CWorkCenterOperation\u003E() .HasKey(wco =\u003E new { wco.WorkCenterId, wco.OperationDefinitionId }); modelBuilder.Entity\u003CWorkCenterOperation\u003E() .HasOne(wco =\u003E wco.WorkCenter) .WithMany(wc =\u003E wc.AllowedOperations) .HasForeignKey(wco =\u003E wco.WorkCenterId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CWorkCenterOperation\u003E() .HasOne(wco =\u003E wco.OperationDefinition) .WithMany() .HasForeignKey(wco =\u003E wco.OperationDefinitionId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CProductVariant\u003E() .HasOne(pv =\u003E pv.StockUnit) .WithMany() .HasForeignKey(pv =\u003E pv.StockUnitId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CProductVariant\u003E() .HasOne(pv =\u003E pv.Product) .WithMany(p =\u003E p.Variants) .HasForeignKey(pv =\u003E pv.ProductId) .OnDelete(DeleteBehavior.Cascade); modelBuilder.Entity\u003CUnitOfMeasure\u003E() .HasOne(u =\u003E u.UomType) .WithMany() .HasForeignKey(u =\u003E u.UomTypeId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CUnitOfMeasure\u003E() .HasOne(u =\u003E u.BaseUnit) .WithMany(u =\u003E u.RelatedUnits) .HasForeignKey(u =\u003E u.BaseUnitId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CUnitOfMeasureConversion\u003E() .HasOne(umc =\u003E umc.FromUnit) .WithMany() .HasForeignKey(umc =\u003E umc.FromUnitId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CUnitOfMeasureConversion\u003E() .HasOne(umc =\u003E umc.ToUnit) .WithMany() .HasForeignKey(umc =\u003E umc.ToUnitId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CBOMStone\u003E() .HasOne(bs =\u003E bs.Bom) .WithMany(bom =\u003E bom.Stones) .HasForeignKey(bs =\u003E bs.BomId) .OnDelete(DeleteBehavior.Restrict); modelBuilder.Entity\u003CBOMLabor\u003E() .HasOne(bl =\u003E bl.Bom) .WithMany() .HasForeignKey(bl =\u003E bl.BomId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CBranch\u003E() .HasOne(b =\u003E b.DefaultMetalLocation) .WithMany() .HasForeignKey(b =\u003E b.DefaultMetalLocationId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CBranch\u003E() .HasOne(b =\u003E b.OwnCompany) .WithMany(oc =\u003E oc.Branches) .HasForeignKey(b =\u003E b.OwnCompanyId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CRefiningProcess\u003E() .HasOne(rp =\u003E rp.OutputKarat) .WithMany() .HasForeignKey(rp =\u003E rp.OutputKaratId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderMetalSummary\u003E() .HasOne(oms =\u003E oms.Order) .WithMany() .HasForeignKey(oms =\u003E oms.OrderId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderPaymentLine\u003E() .HasOne(opl =\u003E opl.Order) .WithMany() .HasForeignKey(opl =\u003E opl.OrderId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CInvoiceLine\u003E() .HasOne(il =\u003E il.Unit) .WithMany() .HasForeignKey(il =\u003E il.UnitId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003COrderLineCost\u003E() .HasOne(olc =\u003E olc.OrderLine) .WithMany() .HasForeignKey(olc =\u003E olc.OrderLineId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CStockTransaction\u003E() .HasOne(st =\u003E st.MetalCurrency) .WithMany() .HasForeignKey(st =\u003E st.MetalCurrencyId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CStockTransaction\u003E() .HasOne(st =\u003E st.Location) .WithMany() .HasForeignKey(st =\u003E st.LocationId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CStockTransaction\u003E() .HasOne(st =\u003E st.CreatedBy) .WithMany() .HasForeignKey(st =\u003E st.CreatedById) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CWorkOrderOperationLog\u003E() .HasOne(wol =\u003E wol.Operation) .WithMany() .HasForeignKey(wol =\u003E wol.OperationId) .OnDelete(DeleteBehavior.NoAction); modelBuilder.Entity\u003CUomType\u003E().HasData( new UomType { Id = 1, Name = \u0022A\u011F\u0131rl\u0131k\u0022, Code = \u0022WEIGHT\u0022 }, new UomType { Id = 2, Name = \u0022Adet\u0022, Code = \u0022COUNT\u0022 }, new UomType { Id = 3, Name = \u0022Uzunluk\u0022, Code = \u0022LENGTH\u0022 }, new UomType { Id = 4, Name = \u0022Hacim\u0022, Code = \u0022VOLUME\u0022 } ); foreach (var relationship in modelBuilder.Model.GetEntityTypes().SelectMany(e =\u003E e.GetForeignKeys())) { relationship.DeleteBehavior = DeleteBehavior.Restrict; } } } }"
    },
    {
      "Class": "AppDbContextModelSnapshot",
      "Path": "FiloGH.Infrastructure/Migrations/AppDbContextModelSnapshot.cs",
      "Kind": "Entity",
      "BaseName": "ModelSnapshot",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFF using System; using FiloGH.Infrastructure.Data.Contexts; using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Infrastructure; using Microsoft.EntityFrameworkCore.Metadata; using Microsoft.EntityFrameworkCore.Storage.ValueConversion; #nullable disable namespace FiloGH.Infrastructure.Migrations { [DbContext(typeof(AppDbContext))] partial class AppDbContextModelSnapshot : ModelSnapshot { protected override void BuildModel(ModelBuilder modelBuilder) { #pragma warning disable 612, 618 modelBuilder .HasAnnotation(\u0022ProductVersion\u0022, \u00229.0.9\u0022) .HasAnnotation(\u0022Relational:MaxIdentifierLength\u0022, 128); SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountChart\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022AccountTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsMetalAccount\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsPostingAccount\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(150) .HasColumnType(\u0022nvarchar(150)\u0022); b.Property\u003Cint?\u003E(\u0022ParentAccountId\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountTypeId\u0022); b.HasIndex(\u0022ParentAccountId\u0022); b.ToTable(\u0022AccountCharts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbyte\u003E(\u0022FinancialStatementCategory\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022AccountTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022EntryDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022EntryNumber\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsPosted\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cint?\u003E(\u0022ReferenceDocumentId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022ReferenceDocumentType\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BranchId\u0022); b.ToTable(\u0022AccountingJournalEntries\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountingJournalEntryLine\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022AccountId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022BaseCurrencyCredit\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022BaseCurrencyDebit\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022CreditAmount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022DebitAmount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Clong\u003E(\u0022EntryId\u0022) .HasColumnType(\u0022bigint\u0022); b.Property\u003Cshort\u003E(\u0022LineNumber\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountId\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022EntryId\u0022); b.ToTable(\u0022AccountingJournalEntryLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMCostType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022AffectsMetalInventory\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022BOMCostTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMLabor\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint?\u003E(\u0022BillOfMaterialsId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022BomId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022LaborCostTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cshort\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cdecimal\u003E(\u0022UnitCost\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BillOfMaterialsId\u0022); b.HasIndex(\u0022BomId\u0022); b.HasIndex(\u0022LaborCostTypeId\u0022); b.ToTable(\u0022BOMLabors\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMStone\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022BomId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022CaratTotal\u0022) .HasColumnType(\u0022decimal(8,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022CostPerCarat\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cshort\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cdecimal\u003E(\u0022StoneSize\u0022) .HasColumnType(\u0022decimal(4,2)\u0022); b.Property\u003Cbyte\u003E(\u0022StoneTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BomId\u0022); b.HasIndex(\u0022StoneTypeId\u0022); b.ToTable(\u0022BOMStones\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMStoneType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsPrecious\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseUnitId\u0022); b.ToTable(\u0022BOMStoneTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022BOMTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Bank\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022AccountChartId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022AccountHolderName\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte?\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022Iban\u0022) .IsRequired() .HasMaxLength(34) .HasColumnType(\u0022nvarchar(34)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022SwiftCode\u0022) .HasMaxLength(11) .HasColumnType(\u0022nvarchar(11)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountChartId\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022CustomerId\u0022); b.ToTable(\u0022Banks\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BOMTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalLossRatio\u0022) .HasColumnType(\u0022decimal(5,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalWeightNet\u0022) .HasColumnType(\u0022decimal(8,3)\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022RevisionNumber\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cshort\u003E(\u0022TotalLeadTimeHours\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BOMTypeId\u0022); b.HasIndex(\u0022ProductVariantId\u0022) .IsUnique(); b.ToTable(\u0022BillOfMaterials\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Branch\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cint?\u003E(\u0022AddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbyte\u003E(\u0022DefaultCashLocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022DefaultMetalLocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsSalesPoint\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022OwnCompanyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AddressId\u0022); b.HasIndex(\u0022DefaultCashLocationId\u0022); b.HasIndex(\u0022DefaultMetalLocationId\u0022); b.HasIndex(\u0022OwnCompanyId\u0022); b.ToTable(\u0022Branches\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BranchLocation\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte?\u003E(\u0022LocationId1\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022BranchId\u0022, \u0022LocationId\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022LocationId1\u0022); b.ToTable(\u0022BranchLocations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Brand\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(150) .HasColumnType(\u0022nvarchar(150)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Brands\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Cargo\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cstring\u003E(\u0022TrackingUrl\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Cargos\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Cash\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022AccountChartId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022CurrentBalance\u0022) .HasColumnType(\u0022decimal(18,2)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountChartId\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.ToTable(\u0022CashRegisters\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.City\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbyte\u003E(\u0022CountryId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CountryId\u0022); b.ToTable(\u0022Cities\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Country\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(2) .HasColumnType(\u0022nvarchar(2)\u0022); b.Property\u003Cbyte?\u003E(\u0022DefaultCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022HasPredefinedCityNames\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022DefaultCurrencyId\u0022); b.ToTable(\u0022Countries\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Currency\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(5) .HasColumnType(\u0022nvarchar(5)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsRateTracked\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsSystemDefault\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022Symbol\u0022) .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbyte\u003E(\u0022Type\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Currencies\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Customer\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint?\u003E(\u0022BillingAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte?\u003E(\u0022DefaultCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsB2BPartner\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsCustomer\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsSupplier\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022PartnerCode\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbyte?\u003E(\u0022PaymentTermId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022ShippingAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022TaxNumber\u0022) .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BillingAddressId\u0022); b.HasIndex(\u0022DefaultCurrencyId\u0022); b.HasIndex(\u0022PaymentTermId\u0022); b.HasIndex(\u0022ShippingAddressId\u0022); b.ToTable(\u0022Customers\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.CustomerMetalAccount\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022BalanceInGrams\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022LastUpdated\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022MetalCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CustomerId\u0022); b.HasIndex(\u0022MetalCurrencyId\u0022); b.ToTable(\u0022CustomerMetalAccounts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.CustomerMetalAccountTransaction\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022MetalCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint?\u003E(\u0022RelatedDocumentId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022TransactionDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022TransactionTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022WeightGrams\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CustomerId\u0022); b.HasIndex(\u0022MetalCurrencyId\u0022); b.HasIndex(\u0022TransactionTypeId\u0022); b.ToTable(\u0022CustomerMetalAccountTransactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.CustomerMetalAccountTransactionType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cshort\u003E(\u0022MovementSign\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022CustomerMetalAccountTransactionTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.DailyMetalRate\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022GoldBuyRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022PalladiumBuyRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022PlatinumBuyRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.Property\u003CDateOnly\u003E(\u0022RateDate\u0022) .HasColumnType(\u0022date\u0022); b.Property\u003Cdecimal\u003E(\u0022SilverBuyRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022TryRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022UsdRate\u0022) .HasColumnType(\u0022decimal(9,4)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022DailyMetalRates\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Employee\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Department\u0022) .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cstring\u003E(\u0022Email\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022EmployeeCode\u0022) .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cstring\u003E(\u0022FirstName\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022HireDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022JobTitle\u0022) .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cstring\u003E(\u0022LastName\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbyte\u003E(\u0022PrimaryBranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022PrimaryBranchId\u0022); b.ToTable(\u0022Employees\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ImageType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cshort\u003E(\u0022SortOrder\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022ImageTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryCost\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003CDateTimeOffset\u003E(\u0022CalculatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalCost\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint?\u003E(\u0022OrderLineId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022OtherCosts\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint?\u003E(\u0022StockItemId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalUnitCost\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022WorkmanshipCost\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022OrderLineId\u0022) .IsUnique() .HasFilter(\u0022[OrderLineId] IS NOT NULL\u0022); b.HasIndex(\u0022StockItemId\u0022); b.ToTable(\u0022InventoryCosts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryLevel\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalPurityId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint\u003E(\u0022StockItemId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalCaratWeight\u0022) .HasColumnType(\u0022decimal(10,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalMetalWeightGross\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalMetalWeightNet\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022ValuationCost\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022MetalPurityId\u0022); b.HasIndex(\u0022StockItemId\u0022); b.ToTable(\u0022InventoryLevels\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryTransaction\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022CaratWeight\u0022) .HasColumnType(\u0022decimal(10,4)\u0022); b.Property\u003Cbyte\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalWeightGross\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalWeightNet\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022MovementDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint?\u003E(\u0022SourceOrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022StockItemId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022TransactionTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022UnitCost\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022SourceOrderId\u0022); b.HasIndex(\u0022StockItemId\u0022); b.HasIndex(\u0022TransactionTypeId\u0022); b.ToTable(\u0022InventoryTransactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryTransactionType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022AffectsCost\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cshort\u003E(\u0022MovementSign\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022InventoryTransactionTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Invoice\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022ExchangeRate\u0022) .HasColumnType(\u0022decimal(19,8)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022InvoiceDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022InvoiceNumber\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbyte\u003E(\u0022InvoiceStatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Clong\u003E(\u0022JournalEntryId\u0022) .HasColumnType(\u0022bigint\u0022); b.Property\u003Cint?\u003E(\u0022RelatedOrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022RootTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalAmount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022CustomerId\u0022); b.HasIndex(\u0022InvoiceStatusId\u0022); b.HasIndex(\u0022JournalEntryId\u0022); b.HasIndex(\u0022RootTypeId\u0022); b.ToTable(\u0022Invoices\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InvoiceLine\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022DiscountAmount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cint\u003E(\u0022InvoiceId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022LineAmount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cshort\u003E(\u0022LineNumber\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cint?\u003E(\u0022OrderLineId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cbyte\u003E(\u0022TaxRateId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022UnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022UnitPrice\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022InvoiceId\u0022); b.HasIndex(\u0022OrderLineId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022TaxRateId\u0022); b.HasIndex(\u0022UnitId\u0022); b.ToTable(\u0022InvoiceLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InvoiceStatus\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsFinal\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsLegalSubmission\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022InvoiceStatuses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Karat\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cdecimal\u003E(\u0022Fineness\u0022) .HasColumnType(\u0022decimal(5,4)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Karats\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Location\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022Position\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022Type\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Locations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MailingAddress\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Address1\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022Address2\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte?\u003E(\u0022CityId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022CompanyName\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022CountryId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022FirstName\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbool\u003E(\u0022IsPrimary\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022LastName\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022Phone\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cstring\u003E(\u0022ZipCode\u0022) .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CityId\u0022); b.HasIndex(\u0022CountryId\u0022); b.HasIndex(\u0022CustomerId\u0022); b.ToTable(\u0022MailingAddresses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalColor\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cstring\u003E(\u0022HexCode\u0022) .HasMaxLength(7) .HasColumnType(\u0022nvarchar(7)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022MetalColor\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalPurity\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseMetalId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbyte\u003E(\u0022KaratValue\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cdecimal\u003E(\u0022PurityRatio\u0022) .HasColumnType(\u0022decimal(5,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseMetalId\u0022); b.ToTable(\u0022MetalPurities\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsPrecious\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseUnitId\u0022); b.ToTable(\u0022MetalTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OperationDefinition\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbool\u003E(\u0022IsMetalPurityChanging\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbool\u003E(\u0022RequiresWorkCenter\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cdecimal\u003E(\u0022StandardDurationHours\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OperationDefinitions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OperationStatus\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022AllowTimeEntry\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OperationStatuses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Order\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint?\u003E(\u0022BillingAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022ClosedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022CreatedById\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022DeliveryDateTarget\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022ExpectedDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cint?\u003E(\u0022InvoiceId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022Note\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022OrderDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022OrderNumber\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbyte\u003E(\u0022OrderPaymentStatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022RequiredDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022RootTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022ShippingAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022StatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Tags\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbool\u003E(\u0022TaxesIncluded\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022UpdatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte?\u003E(\u0022UpdatedById\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BillingAddressId\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022CreatedById\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022CustomerId\u0022); b.HasIndex(\u0022InvoiceId\u0022); b.HasIndex(\u0022OrderPaymentStatusId\u0022); b.HasIndex(\u0022RootTypeId\u0022); b.HasIndex(\u0022ShippingAddressId\u0022); b.HasIndex(\u0022StatusId\u0022); b.HasIndex(\u0022UpdatedById\u0022); b.ToTable(\u0022Orders\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderAdditionalFee\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022AccountingAccountId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022AdditionalFeeDefinitionId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022Amount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022AmountTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsTaxIncluded\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022TaxRate\u0022) .HasColumnType(\u0022decimal(5,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountingAccountId\u0022); b.HasIndex(\u0022AdditionalFeeDefinitionId\u0022); b.HasIndex(\u0022AmountTypeId\u0022); b.HasIndex(\u0022OrderId\u0022); b.ToTable(\u0022OrderAdditionalFees\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderAdditionalFeeDefinition\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cint\u003E(\u0022DefaultAccountingAccountId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cint\u003E(\u0022Position\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022DefaultAccountingAccountId\u0022); b.ToTable(\u0022OrderAdditionalFeeDefinitions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderFeeAmountType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OrderFeeAmountTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderFulfillment\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte?\u003E(\u0022CargoId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022CashOnDeliveryPrice\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022PackageControlledAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte?\u003E(\u0022PackageControlledById\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022ShippingAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022StatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022TrackingNumber\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CargoId\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022PackageControlledById\u0022); b.HasIndex(\u0022ShippingAddressId\u0022); b.HasIndex(\u0022StatusId\u0022); b.ToTable(\u0022OrderFulfillments\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLine\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022Amount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal?\u003E(\u0022CustomerAmount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CustomerCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022FixedExchangeRate\u0022) .HasColumnType(\u0022decimal(19,8)\u0022); b.Property\u003Cstring\u003E(\u0022LineNote\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022LineStatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022LineTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022RootTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022StockCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022StockQuantity\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022UnitPrice\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CustomerCurrencyId\u0022); b.HasIndex(\u0022LineStatusId\u0022); b.HasIndex(\u0022LineTypeId\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022RootTypeId\u0022); b.HasIndex(\u0022StockCurrencyId\u0022); b.ToTable(\u0022OrderLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLineCost\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal?\u003E(\u0022Amount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal?\u003E(\u0022CustomerAmount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal?\u003E(\u0022CustomerRate\u0022) .HasColumnType(\u0022decimal(19,8)\u0022); b.Property\u003Cdecimal?\u003E(\u0022Fineness\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022OrderLineCostTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022OrderLineId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022OrderLineId1\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022OrderLineCostTypeId\u0022); b.HasIndex(\u0022OrderLineId\u0022); b.HasIndex(\u0022OrderLineId1\u0022); b.ToTable(\u0022OrderLineCost\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLineCostType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022AffectsMetalInventory\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsCost\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasColumnType(\u0022nvarchar(max)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OrderLineCostType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLineType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cshort\u003E(\u0022MovementSign\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OrderLineType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderMetalSummary\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022CustomerCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022OrderId1\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalCaratWeight\u0022) .HasColumnType(\u0022decimal(10,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022TotalWeightOrAmount\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CustomerCurrencyId\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022OrderId1\u0022); b.ToTable(\u0022OrderMetalSummaries\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderPaymentLine\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022Amount\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003Cint?\u003E(\u0022BankId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022CashId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022CreatedById\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022CustomerId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022Date\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022Note\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022OrderId1\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022TransactionNr\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BankId\u0022); b.HasIndex(\u0022CashId\u0022); b.HasIndex(\u0022CreatedById\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022CustomerId\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022OrderId1\u0022); b.ToTable(\u0022OrderPaymentLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderPaymentStatus\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsFinal\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbyte\u003E(\u0022Position\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OrderPaymentStatuses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderStatusDefinition\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbool\u003E(\u0022AllowsChanges\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsFinal\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbyte\u003E(\u0022Position\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022OrderStatusDefinitions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderTaxLine\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cint?\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022PresentmentTaxAmount\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003Cdecimal\u003E(\u0022PresentmentTaxBaseAmount\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003Cdecimal\u003E(\u0022Rate\u0022) .HasColumnType(\u0022decimal(9,3)\u0022); b.Property\u003Cdecimal\u003E(\u0022ShopTaxAmount\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003Cdecimal\u003E(\u0022ShopTaxBaseAmount\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022OrderId\u0022); b.ToTable(\u0022OrderTaxLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OwnCompany\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cint?\u003E(\u0022LegalAddressId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022LegalName\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022TaxNumber\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cstring\u003E(\u0022TaxOffice\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseCurrencyId\u0022); b.HasIndex(\u0022LegalAddressId\u0022); b.ToTable(\u0022OwnCompanies\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Payment\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cint\u003E(\u0022AccountId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022Amount\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsIncoming\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Clong\u003E(\u0022JournalEntryId\u0022) .HasColumnType(\u0022bigint\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022PaymentDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022PaymentNumber\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbyte\u003E(\u0022PaymentTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint?\u003E(\u0022ReferenceDocumentId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022ReferenceDocumentType\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022AccountId\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.HasIndex(\u0022JournalEntryId\u0022); b.HasIndex(\u0022PaymentTypeId\u0022); b.ToTable(\u0022Payments\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.PaymentTerm\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cshort\u003E(\u0022DueDateDays\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022PaymentTerms\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.PaymentType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022PaymentTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Permission\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbyte\u003E(\u0022Module\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022Permissions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.PriceList\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbyte\u003E(\u0022CurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsBasePriceList\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ValidFrom\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022ValidTo\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CurrencyId\u0022); b.ToTable(\u0022PriceLists\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Product\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte?\u003E(\u0022BrandId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Description\u0022) .HasMaxLength(1000) .HasColumnType(\u0022nvarchar(1000)\u0022); b.Property\u003Cstring\u003E(\u0022DesignCode\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint\u003E(\u0022ProductCategoryId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022ProductCode\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BrandId\u0022); b.HasIndex(\u0022ProductCategoryId\u0022); b.ToTable(\u0022Products\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductCategory\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint?\u003E(\u0022ParentId\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022ParentId\u0022); b.ToTable(\u0022ProductCategories\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductImage\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022AltText\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte?\u003E(\u0022ImageTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022ImageUrl\u0022) .IsRequired() .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cshort\u003E(\u0022SortOrder\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022ImageTypeId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.ToTable(\u0022ProductImages\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductVariant\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Barcode\u0022) .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsWeightBasedPricing\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cdecimal?\u003E(\u0022Length\u0022) .HasColumnType(\u0022decimal(6,1)\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalColorId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalPurityId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cint\u003E(\u0022ProductId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022SKU\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cdecimal?\u003E(\u0022Size\u0022) .HasColumnType(\u0022decimal(6,1)\u0022); b.Property\u003Cdecimal\u003E(\u0022StandardCost\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022StandardWeight\u0022) .HasColumnType(\u0022decimal(10,4)\u0022); b.Property\u003Cbyte\u003E(\u0022StockUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022SupplierCode\u0022) .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022MetalColorId\u0022); b.HasIndex(\u0022MetalPurityId\u0022); b.HasIndex(\u0022ProductId\u0022); b.HasIndex(\u0022StockUnitId\u0022); b.ToTable(\u0022ProductVariants\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003CDateTimeOffset?\u003E(\u0022ActualEndDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022ActualStartDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cint\u003E(\u0022BomId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022OrderNumber\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cint\u003E(\u0022RoutingId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ScheduledEndDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ScheduledStartDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022StatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BomId\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022RoutingId\u0022); b.HasIndex(\u0022StatusId\u0022); b.ToTable(\u0022ProductionOrders\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionOrderStatus\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022ProductionOrderStatuses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRouting\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(150) .HasColumnType(\u0022nvarchar(150)\u0022); b.Property\u003Cshort\u003E(\u0022TotalTimeHours\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022ProductionRoutings\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRoutingItem\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022ProductionRoutingId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbool\u003E(\u0022IsDefault\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbyte\u003E(\u0022RoutingPurposeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022ProductVariantId\u0022, \u0022ProductionRoutingId\u0022); b.HasIndex(\u0022ProductionRoutingId\u0022); b.HasIndex(\u0022RoutingPurposeId\u0022); b.ToTable(\u0022ProductionRoutingItems\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRoutingStep\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022CostPerHour\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cstring\u003E(\u0022Instructions\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cbool\u003E(\u0022IsInspectionStep\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cint\u003E(\u0022RoutingId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cshort\u003E(\u0022Sequence\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cdecimal\u003E(\u0022TimeRequiredHours\u0022) .HasColumnType(\u0022decimal(5,2)\u0022); b.Property\u003Cbyte\u003E(\u0022WorkCenterId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022RoutingId\u0022); b.HasIndex(\u0022WorkCenterId\u0022); b.ToTable(\u0022ProductionRoutingSteps\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionTransaction\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cint\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint?\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022ProductionOrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint?\u003E(\u0022RoutingStepId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022TransactionDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022TransactionTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022UnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022ProductionOrderId\u0022); b.HasIndex(\u0022RoutingStepId\u0022); b.HasIndex(\u0022TransactionTypeId\u0022); b.HasIndex(\u0022UnitId\u0022); b.ToTable(\u0022ProductionTransactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionTransactionType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsInventoryInflow\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022ProductionTransactionTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionWorkCenter\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cshort\u003E(\u0022CapacityPerShift\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BranchId\u0022); b.ToTable(\u0022ProductionWorkCenters\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RawMaterial\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsConsumable\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbyte\u003E(\u0022MaterialTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(150) .HasColumnType(\u0022nvarchar(150)\u0022); b.Property\u003Cdecimal\u003E(\u0022StandardCost\u0022) .HasColumnType(\u0022decimal(18,4)\u0022); b.Property\u003Cbyte\u003E(\u0022UnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022MaterialTypeId\u0022); b.HasIndex(\u0022UnitId\u0022); b.ToTable(\u0022RawMaterials\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RawMaterialType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022RawMaterialTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RefiningProcess\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022InputKaratId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022InputWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022LossWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022MetalCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cbyte\u003E(\u0022OutputKaratId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022OutputWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ProcessDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022InputKaratId\u0022); b.HasIndex(\u0022MetalCurrencyId\u0022); b.HasIndex(\u0022OutputKaratId\u0022); b.ToTable(\u0022RefiningProcesses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RootType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cshort\u003E(\u0022StockMovementSign\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022RootTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RoutingPurpose\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022RoutingPurposes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.SalePricingRule\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal?\u003E(\u0022CalculationValue\u0022) .HasColumnType(\u0022decimal(10,5)\u0022); b.Property\u003Cdecimal?\u003E(\u0022FixedPrice\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cint\u003E(\u0022PriceListId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cshort\u003E(\u0022Priority\u0022) .HasColumnType(\u0022smallint\u0022); b.Property\u003Cint?\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cstring\u003E(\u0022RuleType\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ValidFrom\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022ValidTo\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022PriceListId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.ToTable(\u0022SalePricingRules\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ScrapTransaction\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022KaratId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022MetalCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cint?\u003E(\u0022RelatedOrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022ScrapTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022TransactionDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022WeightGrams\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022KaratId\u0022); b.HasIndex(\u0022MetalCurrencyId\u0022); b.HasIndex(\u0022RelatedOrderId\u0022); b.HasIndex(\u0022ScrapTypeId\u0022); b.ToTable(\u0022ScrapTransactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ScrapType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022ScrapTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockItem\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsMetalItem\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022ItemCode\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalPurityId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022StockItemTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseUnitId\u0022); b.HasIndex(\u0022MetalPurityId\u0022); b.HasIndex(\u0022MetalTypeId\u0022); b.HasIndex(\u0022StockItemTypeId\u0022); b.ToTable(\u0022StockItems\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockItemType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsTracked\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022StockItemTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockMovementType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cshort\u003E(\u0022Sign\u0022) .HasColumnType(\u0022smallint\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022StockMovementTypes\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockTransaction\u0022, b =\u003E { b.Property\u003Clong\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022bigint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Clong\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BaseExchangeCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022CostPerGramEUR\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CreatedById\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022Fineness\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022FixedExchangeRate\u0022) .HasColumnType(\u0022decimal(19,8)\u0022); b.Property\u003Cbyte\u003E(\u0022LocationId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022MetalCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022MetalPurityId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022MovementTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cstring\u003E(\u0022ReferenceDocType\u0022) .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cint?\u003E(\u0022SourceOrderLineId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022TransactionDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022WeightInGrams\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseExchangeCurrencyId\u0022); b.HasIndex(\u0022BranchId\u0022); b.HasIndex(\u0022CreatedById\u0022); b.HasIndex(\u0022LocationId\u0022); b.HasIndex(\u0022MetalCurrencyId\u0022); b.HasIndex(\u0022MetalPurityId\u0022); b.HasIndex(\u0022MovementTypeId\u0022); b.HasIndex(\u0022SourceOrderLineId\u0022); b.ToTable(\u0022StockTransactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.TaxRate\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cdecimal\u003E(\u0022RatePercentage\u0022) .HasColumnType(\u0022decimal(5,2)\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022ValidFromDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022TaxRates\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte?\u003E(\u0022BaseUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cdecimal\u003E(\u0022ConversionFactor\u0022) .HasColumnType(\u0022decimal(10,5)\u0022); b.Property\u003Cbyte\u003E(\u0022DecimalPlaces\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.Property\u003Cbyte\u003E(\u0022UomTypeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte?\u003E(\u0022UomTypeId1\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BaseUnitId\u0022); b.HasIndex(\u0022UomTypeId\u0022); b.HasIndex(\u0022UomTypeId1\u0022); b.ToTable(\u0022UnitOfMeasures\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UnitOfMeasureConversion\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022ConversionRate\u0022) .HasColumnType(\u0022decimal(19,8)\u0022); b.Property\u003Cbyte\u003E(\u0022FromUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cint?\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022ToUnitId\u0022) .HasColumnType(\u0022tinyint\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022FromUnitId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022ToUnitId\u0022); b.ToTable(\u0022UnitOfMeasureConversions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UomType\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022UomTypes\u0022); b.HasData( new { Id = (byte)1, Code = \u0022WEIGHT\u0022, IsActive = true, Name = \u0022A\u011F\u0131rl\u0131k\u0022 }, new { Id = (byte)2, Code = \u0022COUNT\u0022, IsActive = true, Name = \u0022Adet\u0022 }, new { Id = (byte)3, Code = \u0022LENGTH\u0022, IsActive = true, Name = \u0022Uzunluk\u0022 }, new { Id = (byte)4, Code = \u0022VOLUME\u0022, IsActive = true, Name = \u0022Hacim\u0022 }); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.User\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte?\u003E(\u0022DefaultCurrencyId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Email\u0022) .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cstring\u003E(\u0022FirstName\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022LastLogin\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cstring\u003E(\u0022LastName\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.Property\u003Cstring\u003E(\u0022PasswordHash\u0022) .IsRequired() .HasMaxLength(255) .HasColumnType(\u0022nvarchar(255)\u0022); b.Property\u003Cbyte\u003E(\u0022PrimaryBranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022UserRoleId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Username\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022DefaultCurrencyId\u0022); b.HasIndex(\u0022PrimaryBranchId\u0022); b.HasIndex(\u0022UserRoleId\u0022); b.ToTable(\u0022Users\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UserBranchAccess\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022UserId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022CanWrite\u0022) .HasColumnType(\u0022bit\u0022); b.HasKey(\u0022UserId\u0022, \u0022BranchId\u0022); b.HasIndex(\u0022BranchId\u0022); b.ToTable(\u0022UserBranchAccesses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UserRole\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(20) .HasColumnType(\u0022nvarchar(20)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsDefault\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022UserRoles\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UserRolePermission\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022UserRoleId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022PermissionId\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022UserRoleId\u0022, \u0022PermissionId\u0022); b.HasIndex(\u0022PermissionId\u0022); b.ToTable(\u0022UserRolePermissions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkCenter\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cbyte\u003E(\u0022BranchId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cdecimal\u003E(\u0022HourlyCostRate\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsMachine\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(100) .HasColumnType(\u0022nvarchar(100)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022BranchId\u0022); b.ToTable(\u0022WorkCenters\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkCenterOperation\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022WorkCenterId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022OperationDefinitionId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbool\u003E(\u0022IsActive\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbyte?\u003E(\u0022OperationDefinitionId1\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal?\u003E(\u0022OverrideCostRate\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.HasKey(\u0022WorkCenterId\u0022, \u0022OperationDefinitionId\u0022); b.HasIndex(\u0022OperationDefinitionId\u0022); b.HasIndex(\u0022OperationDefinitionId1\u0022); b.ToTable(\u0022WorkCenterOperations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrder\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cdecimal\u003E(\u0022CalculatedScrapWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022CreatedById\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022CreatedDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022DueDate\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022IssuedMetalWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint?\u003E(\u0022OrderId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cint\u003E(\u0022ProductVariantId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cdecimal\u003E(\u0022Quantity\u0022) .HasColumnType(\u0022decimal(19,2)\u0022); b.Property\u003Cbyte\u003E(\u0022StatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022TargetMetalWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cstring\u003E(\u0022WorkOrderNumber\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022CreatedById\u0022); b.HasIndex(\u0022OrderId\u0022); b.HasIndex(\u0022ProductVariantId\u0022); b.HasIndex(\u0022StatusId\u0022); b.ToTable(\u0022WorkOrders\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderOperation\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003CDateTimeOffset\u003E(\u0022AssignedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022CompletedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalInputWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalOutputWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cbyte\u003E(\u0022OperationDefinitionId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cdecimal\u003E(\u0022ScrapWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cint\u003E(\u0022SequenceNumber\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022StartedAt\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cbyte\u003E(\u0022StatusId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cbyte\u003E(\u0022WorkCenterId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003Cint\u003E(\u0022WorkOrderId\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022OperationDefinitionId\u0022); b.HasIndex(\u0022StatusId\u0022); b.HasIndex(\u0022WorkCenterId\u0022); b.HasIndex(\u0022WorkOrderId\u0022); b.ToTable(\u0022WorkOrderOperations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderOperationLog\u0022, b =\u003E { b.Property\u003Cint\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022int\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cint\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022AdjustmentType\u0022) .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cint\u003E(\u0022DurationMinutes\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003Cbyte\u003E(\u0022EmployeeId\u0022) .HasColumnType(\u0022tinyint\u0022); b.Property\u003CDateTimeOffset?\u003E(\u0022EndTime\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cdecimal\u003E(\u0022MetalAdjustmentWeight\u0022) .HasColumnType(\u0022decimal(19,4)\u0022); b.Property\u003Cstring\u003E(\u0022Notes\u0022) .HasMaxLength(500) .HasColumnType(\u0022nvarchar(500)\u0022); b.Property\u003Cint\u003E(\u0022OperationId\u0022) .HasColumnType(\u0022int\u0022); b.Property\u003CDateTimeOffset\u003E(\u0022StartTime\u0022) .HasColumnType(\u0022datetimeoffset\u0022); b.Property\u003Cint?\u003E(\u0022WorkOrderOperationId\u0022) .HasColumnType(\u0022int\u0022); b.HasKey(\u0022Id\u0022); b.HasIndex(\u0022EmployeeId\u0022); b.HasIndex(\u0022OperationId\u0022); b.HasIndex(\u0022WorkOrderOperationId\u0022); b.ToTable(\u0022WorkOrderOperationLogs\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderStatus\u0022, b =\u003E { b.Property\u003Cbyte\u003E(\u0022Id\u0022) .ValueGeneratedOnAdd() .HasColumnType(\u0022tinyint\u0022); SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property\u003Cbyte\u003E(\u0022Id\u0022)); b.Property\u003Cstring\u003E(\u0022Code\u0022) .IsRequired() .HasMaxLength(10) .HasColumnType(\u0022nvarchar(10)\u0022); b.Property\u003Cbool\u003E(\u0022IsEditable\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cbool\u003E(\u0022IsInProduction\u0022) .HasColumnType(\u0022bit\u0022); b.Property\u003Cstring\u003E(\u0022Name\u0022) .IsRequired() .HasMaxLength(50) .HasColumnType(\u0022nvarchar(50)\u0022); b.HasKey(\u0022Id\u0022); b.ToTable(\u0022WorkOrderStatuses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountChart\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountType\u0022, \u0022AccountType\u0022) .WithMany() .HasForeignKey(\u0022AccountTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022ParentAccount\u0022) .WithMany(\u0022ChildAccounts\u0022) .HasForeignKey(\u0022ParentAccountId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022AccountType\u0022); b.Navigation(\u0022ParentAccount\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountingJournalEntryLine\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022Account\u0022) .WithMany() .HasForeignKey(\u0022AccountId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, \u0022Entry\u0022) .WithMany(\u0022Lines\u0022) .HasForeignKey(\u0022EntryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Account\u0022); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022Entry\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMLabor\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, null) .WithMany(\u0022Labors\u0022) .HasForeignKey(\u0022BillOfMaterialsId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, \u0022Bom\u0022) .WithMany() .HasForeignKey(\u0022BomId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.BOMCostType\u0022, \u0022LaborCostType\u0022) .WithMany() .HasForeignKey(\u0022LaborCostTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Bom\u0022); b.Navigation(\u0022LaborCostType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMStone\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, \u0022Bom\u0022) .WithMany(\u0022Stones\u0022) .HasForeignKey(\u0022BomId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.BOMStoneType\u0022, \u0022StoneType\u0022) .WithMany() .HasForeignKey(\u0022StoneTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Bom\u0022); b.Navigation(\u0022StoneType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BOMStoneType\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022BaseUnit\u0022) .WithMany() .HasForeignKey(\u0022BaseUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022BaseUnit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Bank\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022AccountChart\u0022) .WithMany() .HasForeignKey(\u0022AccountChartId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022AccountChart\u0022); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022Customer\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.BOMType\u0022, \u0022BOMType\u0022) .WithMany() .HasForeignKey(\u0022BOMTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithOne(\u0022BillOfMaterials\u0022) .HasForeignKey(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, \u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022BOMType\u0022); b.Navigation(\u0022ProductVariant\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Branch\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022Address\u0022) .WithMany() .HasForeignKey(\u0022AddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022DefaultCashLocation\u0022) .WithMany() .HasForeignKey(\u0022DefaultCashLocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022DefaultMetalLocation\u0022) .WithMany() .HasForeignKey(\u0022DefaultMetalLocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OwnCompany\u0022, \u0022OwnCompany\u0022) .WithMany(\u0022Branches\u0022) .HasForeignKey(\u0022OwnCompanyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Address\u0022); b.Navigation(\u0022DefaultCashLocation\u0022); b.Navigation(\u0022DefaultMetalLocation\u0022); b.Navigation(\u0022OwnCompany\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BranchLocation\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany(\u0022BranchLocations\u0022) .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, null) .WithMany(\u0022BranchLocations\u0022) .HasForeignKey(\u0022LocationId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022Location\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Cash\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022AccountChart\u0022) .WithMany() .HasForeignKey(\u0022AccountChartId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022AccountChart\u0022); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022Currency\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.City\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Country\u0022, \u0022Country\u0022) .WithMany(\u0022Cities\u0022) .HasForeignKey(\u0022CountryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Country\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Country\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022DefaultCurrency\u0022) .WithMany() .HasForeignKey(\u0022DefaultCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022DefaultCurrency\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Customer\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022BillingAddress\u0022) .WithMany() .HasForeignKey(\u0022BillingAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022DefaultCurrency\u0022) .WithMany() .HasForeignKey(\u0022DefaultCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.PaymentTerm\u0022, \u0022PaymentTerm\u0022) .WithMany() .HasForeignKey(\u0022PaymentTermId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022ShippingAddress\u0022) .WithMany() .HasForeignKey(\u0022ShippingAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022BillingAddress\u0022); b.Navigation(\u0022DefaultCurrency\u0022); b.Navigation(\u0022PaymentTerm\u0022); b.Navigation(\u0022ShippingAddress\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.CustomerMetalAccount\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022MetalCurrency\u0022) .WithMany() .HasForeignKey(\u0022MetalCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Customer\u0022); b.Navigation(\u0022MetalCurrency\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.CustomerMetalAccountTransaction\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022MetalCurrency\u0022) .WithMany() .HasForeignKey(\u0022MetalCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.CustomerMetalAccountTransactionType\u0022, \u0022TransactionType\u0022) .WithMany() .HasForeignKey(\u0022TransactionTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Customer\u0022); b.Navigation(\u0022MetalCurrency\u0022); b.Navigation(\u0022TransactionType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Employee\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022PrimaryBranch\u0022) .WithMany() .HasForeignKey(\u0022PrimaryBranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022PrimaryBranch\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryCost\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLine\u0022, \u0022OrderLine\u0022) .WithOne(\u0022InventoryCost\u0022) .HasForeignKey(\u0022FiloGH.Core.Entities.InventoryCost\u0022, \u0022OrderLineId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.StockItem\u0022, \u0022StockItem\u0022) .WithMany() .HasForeignKey(\u0022StockItemId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022OrderLine\u0022); b.Navigation(\u0022StockItem\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryLevel\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.MetalPurity\u0022, \u0022MetalPurity\u0022) .WithMany() .HasForeignKey(\u0022MetalPurityId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.StockItem\u0022, \u0022StockItem\u0022) .WithMany() .HasForeignKey(\u0022StockItemId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Location\u0022); b.Navigation(\u0022MetalPurity\u0022); b.Navigation(\u0022StockItem\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InventoryTransaction\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022SourceOrder\u0022) .WithMany() .HasForeignKey(\u0022SourceOrderId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.StockItem\u0022, \u0022StockItem\u0022) .WithMany() .HasForeignKey(\u0022StockItemId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.InventoryTransactionType\u0022, \u0022TransactionType\u0022) .WithMany() .HasForeignKey(\u0022TransactionTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Location\u0022); b.Navigation(\u0022SourceOrder\u0022); b.Navigation(\u0022StockItem\u0022); b.Navigation(\u0022TransactionType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Invoice\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.InvoiceStatus\u0022, \u0022InvoiceStatus\u0022) .WithMany() .HasForeignKey(\u0022InvoiceStatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, \u0022JournalEntry\u0022) .WithMany() .HasForeignKey(\u0022JournalEntryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.RootType\u0022, \u0022RootType\u0022) .WithMany() .HasForeignKey(\u0022RootTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022Customer\u0022); b.Navigation(\u0022InvoiceStatus\u0022); b.Navigation(\u0022JournalEntry\u0022); b.Navigation(\u0022RootType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.InvoiceLine\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Invoice\u0022, \u0022Invoice\u0022) .WithMany(\u0022InvoiceLines\u0022) .HasForeignKey(\u0022InvoiceId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLine\u0022, \u0022OrderLine\u0022) .WithMany() .HasForeignKey(\u0022OrderLineId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.TaxRate\u0022, \u0022TaxRate\u0022) .WithMany() .HasForeignKey(\u0022TaxRateId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022Unit\u0022) .WithMany() .HasForeignKey(\u0022UnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Invoice\u0022); b.Navigation(\u0022OrderLine\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022TaxRate\u0022); b.Navigation(\u0022Unit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MailingAddress\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.City\u0022, \u0022City\u0022) .WithMany() .HasForeignKey(\u0022CityId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Country\u0022, \u0022Country\u0022) .WithMany() .HasForeignKey(\u0022CountryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022City\u0022); b.Navigation(\u0022Country\u0022); b.Navigation(\u0022Customer\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalPurity\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.MetalType\u0022, \u0022BaseMetal\u0022) .WithMany(\u0022Purities\u0022) .HasForeignKey(\u0022BaseMetalId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022BaseMetal\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalType\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022BaseUnit\u0022) .WithMany() .HasForeignKey(\u0022BaseUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022BaseUnit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Order\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022BillingAddress\u0022) .WithMany() .HasForeignKey(\u0022BillingAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022CreatedBy\u0022) .WithMany() .HasForeignKey(\u0022CreatedById\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Invoice\u0022, \u0022Invoice\u0022) .WithMany() .HasForeignKey(\u0022InvoiceId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.OrderPaymentStatus\u0022, \u0022OrderPaymentStatus\u0022) .WithMany() .HasForeignKey(\u0022OrderPaymentStatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.RootType\u0022, \u0022RootType\u0022) .WithMany() .HasForeignKey(\u0022RootTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022ShippingAddress\u0022) .WithMany(\u0022ShippingForOrders\u0022) .HasForeignKey(\u0022ShippingAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.OrderStatusDefinition\u0022, \u0022Status\u0022) .WithMany() .HasForeignKey(\u0022StatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022UpdatedBy\u0022) .WithMany() .HasForeignKey(\u0022UpdatedById\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022BillingAddress\u0022); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022CreatedBy\u0022); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022Customer\u0022); b.Navigation(\u0022Invoice\u0022); b.Navigation(\u0022OrderPaymentStatus\u0022); b.Navigation(\u0022RootType\u0022); b.Navigation(\u0022ShippingAddress\u0022); b.Navigation(\u0022Status\u0022); b.Navigation(\u0022UpdatedBy\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderAdditionalFee\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022AccountingAccount\u0022) .WithMany() .HasForeignKey(\u0022AccountingAccountId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderAdditionalFeeDefinition\u0022, \u0022AdditionalFeeDefinition\u0022) .WithMany() .HasForeignKey(\u0022AdditionalFeeDefinitionId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderFeeAmountType\u0022, \u0022AmountType\u0022) .WithMany() .HasForeignKey(\u0022AmountTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany(\u0022AdditionalFees\u0022) .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022AccountingAccount\u0022); b.Navigation(\u0022AdditionalFeeDefinition\u0022); b.Navigation(\u0022AmountType\u0022); b.Navigation(\u0022Order\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderAdditionalFeeDefinition\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022DefaultAccountingAccount\u0022) .WithMany() .HasForeignKey(\u0022DefaultAccountingAccountId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022DefaultAccountingAccount\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderFulfillment\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Cargo\u0022, \u0022Cargo\u0022) .WithMany() .HasForeignKey(\u0022CargoId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany(\u0022Fulfillments\u0022) .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022PackageControlledBy\u0022) .WithMany() .HasForeignKey(\u0022PackageControlledById\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022ShippingAddress\u0022) .WithMany(\u0022ShippingForFulfillments\u0022) .HasForeignKey(\u0022ShippingAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.OrderStatusDefinition\u0022, \u0022Status\u0022) .WithMany() .HasForeignKey(\u0022StatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Cargo\u0022); b.Navigation(\u0022Location\u0022); b.Navigation(\u0022Order\u0022); b.Navigation(\u0022PackageControlledBy\u0022); b.Navigation(\u0022ShippingAddress\u0022); b.Navigation(\u0022Status\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLine\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022CustomerCurrency\u0022) .WithMany() .HasForeignKey(\u0022CustomerCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderStatusDefinition\u0022, \u0022LineStatus\u0022) .WithMany() .HasForeignKey(\u0022LineStatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLineType\u0022, \u0022LineType\u0022) .WithMany() .HasForeignKey(\u0022LineTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany(\u0022OrderLines\u0022) .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.RootType\u0022, \u0022RootType\u0022) .WithMany() .HasForeignKey(\u0022RootTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022StockCurrency\u0022) .WithMany() .HasForeignKey(\u0022StockCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022CustomerCurrency\u0022); b.Navigation(\u0022LineStatus\u0022); b.Navigation(\u0022LineType\u0022); b.Navigation(\u0022Location\u0022); b.Navigation(\u0022Order\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022RootType\u0022); b.Navigation(\u0022StockCurrency\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLineCost\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLineCostType\u0022, \u0022OrderLineCostType\u0022) .WithMany(\u0022OrderLineCosts\u0022) .HasForeignKey(\u0022OrderLineCostTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLine\u0022, \u0022OrderLine\u0022) .WithMany() .HasForeignKey(\u0022OrderLineId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLine\u0022, null) .WithMany(\u0022OrderLineCosts\u0022) .HasForeignKey(\u0022OrderLineId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022OrderLine\u0022); b.Navigation(\u0022OrderLineCostType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderMetalSummary\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022CustomerCurrency\u0022) .WithMany() .HasForeignKey(\u0022CustomerCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany() .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, null) .WithMany(\u0022MetalSummaries\u0022) .HasForeignKey(\u0022OrderId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022CustomerCurrency\u0022); b.Navigation(\u0022Order\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderPaymentLine\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Bank\u0022, \u0022Bank\u0022) .WithMany() .HasForeignKey(\u0022BankId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Cash\u0022, \u0022Cash\u0022) .WithMany() .HasForeignKey(\u0022CashId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022CreatedBy\u0022) .WithMany() .HasForeignKey(\u0022CreatedById\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Customer\u0022, \u0022Customer\u0022) .WithMany() .HasForeignKey(\u0022CustomerId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany() .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, null) .WithMany(\u0022PaymentLines\u0022) .HasForeignKey(\u0022OrderId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Bank\u0022); b.Navigation(\u0022Cash\u0022); b.Navigation(\u0022CreatedBy\u0022); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022Customer\u0022); b.Navigation(\u0022Order\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderTaxLine\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, null) .WithMany(\u0022TaxLines\u0022) .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OwnCompany\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022BaseCurrency\u0022) .WithMany() .HasForeignKey(\u0022BaseCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.MailingAddress\u0022, \u0022LegalAddress\u0022) .WithMany() .HasForeignKey(\u0022LegalAddressId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022BaseCurrency\u0022); b.Navigation(\u0022LegalAddress\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Payment\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.AccountChart\u0022, \u0022Account\u0022) .WithMany() .HasForeignKey(\u0022AccountId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, \u0022JournalEntry\u0022) .WithMany() .HasForeignKey(\u0022JournalEntryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.PaymentType\u0022, \u0022PaymentType\u0022) .WithMany() .HasForeignKey(\u0022PaymentTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Account\u0022); b.Navigation(\u0022Currency\u0022); b.Navigation(\u0022JournalEntry\u0022); b.Navigation(\u0022PaymentType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.PriceList\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022Currency\u0022) .WithMany() .HasForeignKey(\u0022CurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Currency\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Product\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Brand\u0022, \u0022Brand\u0022) .WithMany() .HasForeignKey(\u0022BrandId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductCategory\u0022, \u0022Category\u0022) .WithMany() .HasForeignKey(\u0022ProductCategoryId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Brand\u0022); b.Navigation(\u0022Category\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductCategory\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.ProductCategory\u0022, \u0022Parent\u0022) .WithMany(\u0022Children\u0022) .HasForeignKey(\u0022ParentId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Parent\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductImage\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.ImageType\u0022, \u0022ImageType\u0022) .WithMany() .HasForeignKey(\u0022ImageTypeId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022ImageType\u0022); b.Navigation(\u0022ProductVariant\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductVariant\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.MetalColor\u0022, \u0022MetalColor\u0022) .WithMany() .HasForeignKey(\u0022MetalColorId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.MetalPurity\u0022, \u0022MetalPurity\u0022) .WithMany() .HasForeignKey(\u0022MetalPurityId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Product\u0022, \u0022Product\u0022) .WithMany(\u0022Variants\u0022) .HasForeignKey(\u0022ProductId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022StockUnit\u0022) .WithMany() .HasForeignKey(\u0022StockUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022MetalColor\u0022); b.Navigation(\u0022MetalPurity\u0022); b.Navigation(\u0022Product\u0022); b.Navigation(\u0022StockUnit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, \u0022Bom\u0022) .WithMany() .HasForeignKey(\u0022BomId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionRouting\u0022, \u0022Routing\u0022) .WithMany() .HasForeignKey(\u0022RoutingId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionOrderStatus\u0022, \u0022Status\u0022) .WithMany() .HasForeignKey(\u0022StatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Bom\u0022); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022Routing\u0022); b.Navigation(\u0022Status\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRoutingItem\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionRouting\u0022, \u0022ProductionRouting\u0022) .WithMany() .HasForeignKey(\u0022ProductionRoutingId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.RoutingPurpose\u0022, \u0022RoutingPurpose\u0022) .WithMany() .HasForeignKey(\u0022RoutingPurposeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022ProductionRouting\u0022); b.Navigation(\u0022RoutingPurpose\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRoutingStep\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.ProductionRouting\u0022, \u0022Routing\u0022) .WithMany(\u0022Steps\u0022) .HasForeignKey(\u0022RoutingId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionWorkCenter\u0022, \u0022WorkCenter\u0022) .WithMany() .HasForeignKey(\u0022WorkCenterId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Routing\u0022); b.Navigation(\u0022WorkCenter\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionTransaction\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, \u0022Order\u0022) .WithMany() .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, \u0022ProductionOrder\u0022) .WithMany(\u0022Transactions\u0022) .HasForeignKey(\u0022ProductionOrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionRoutingStep\u0022, \u0022RoutingStep\u0022) .WithMany() .HasForeignKey(\u0022RoutingStepId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductionTransactionType\u0022, \u0022TransactionType\u0022) .WithMany() .HasForeignKey(\u0022TransactionTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022Unit\u0022) .WithMany() .HasForeignKey(\u0022UnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Order\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022ProductionOrder\u0022); b.Navigation(\u0022RoutingStep\u0022); b.Navigation(\u0022TransactionType\u0022); b.Navigation(\u0022Unit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionWorkCenter\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RawMaterial\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.RawMaterialType\u0022, \u0022MaterialType\u0022) .WithMany() .HasForeignKey(\u0022MaterialTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022Unit\u0022) .WithMany() .HasForeignKey(\u0022UnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022MaterialType\u0022); b.Navigation(\u0022Unit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.RefiningProcess\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Karat\u0022, \u0022InputKarat\u0022) .WithMany() .HasForeignKey(\u0022InputKaratId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022MetalCurrency\u0022) .WithMany() .HasForeignKey(\u0022MetalCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Karat\u0022, \u0022OutputKarat\u0022) .WithMany() .HasForeignKey(\u0022OutputKaratId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022InputKarat\u0022); b.Navigation(\u0022MetalCurrency\u0022); b.Navigation(\u0022OutputKarat\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.SalePricingRule\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.PriceList\u0022, \u0022PriceList\u0022) .WithMany() .HasForeignKey(\u0022PriceListId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022PriceList\u0022); b.Navigation(\u0022ProductVariant\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ScrapTransaction\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Karat\u0022, \u0022Karat\u0022) .WithMany() .HasForeignKey(\u0022KaratId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022MetalCurrency\u0022) .WithMany() .HasForeignKey(\u0022MetalCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, \u0022RelatedOrder\u0022) .WithMany() .HasForeignKey(\u0022RelatedOrderId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ScrapType\u0022, \u0022ScrapType\u0022) .WithMany() .HasForeignKey(\u0022ScrapTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022Karat\u0022); b.Navigation(\u0022MetalCurrency\u0022); b.Navigation(\u0022RelatedOrder\u0022); b.Navigation(\u0022ScrapType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockItem\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022BaseUnit\u0022) .WithMany() .HasForeignKey(\u0022BaseUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.MetalPurity\u0022, \u0022MetalPurity\u0022) .WithMany() .HasForeignKey(\u0022MetalPurityId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.MetalType\u0022, \u0022MetalType\u0022) .WithMany() .HasForeignKey(\u0022MetalTypeId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.StockItemType\u0022, \u0022StockItemType\u0022) .WithMany() .HasForeignKey(\u0022StockItemTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022BaseUnit\u0022); b.Navigation(\u0022MetalPurity\u0022); b.Navigation(\u0022MetalType\u0022); b.Navigation(\u0022StockItemType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.StockTransaction\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022BaseExchangeCurrency\u0022) .WithMany() .HasForeignKey(\u0022BaseExchangeCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022CreatedBy\u0022) .WithMany() .HasForeignKey(\u0022CreatedById\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Location\u0022, \u0022Location\u0022) .WithMany() .HasForeignKey(\u0022LocationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022MetalCurrency\u0022) .WithMany() .HasForeignKey(\u0022MetalCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.MetalPurity\u0022, \u0022MetalPurity\u0022) .WithMany() .HasForeignKey(\u0022MetalPurityId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.StockMovementType\u0022, \u0022MovementType\u0022) .WithMany() .HasForeignKey(\u0022MovementTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OrderLine\u0022, \u0022SourceOrderLine\u0022) .WithMany() .HasForeignKey(\u0022SourceOrderLineId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022BaseExchangeCurrency\u0022); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022CreatedBy\u0022); b.Navigation(\u0022Location\u0022); b.Navigation(\u0022MetalCurrency\u0022); b.Navigation(\u0022MetalPurity\u0022); b.Navigation(\u0022MovementType\u0022); b.Navigation(\u0022SourceOrderLine\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022BaseUnit\u0022) .WithMany(\u0022RelatedUnits\u0022) .HasForeignKey(\u0022BaseUnitId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.UomType\u0022, \u0022UomType\u0022) .WithMany() .HasForeignKey(\u0022UomTypeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UomType\u0022, null) .WithMany(\u0022UnitOfMeasures\u0022) .HasForeignKey(\u0022UomTypeId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022BaseUnit\u0022); b.Navigation(\u0022UomType\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UnitOfMeasureConversion\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022FromUnit\u0022) .WithMany() .HasForeignKey(\u0022FromUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, \u0022ToUnit\u0022) .WithMany() .HasForeignKey(\u0022ToUnitId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022FromUnit\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022ToUnit\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.User\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Currency\u0022, \u0022DefaultCurrency\u0022) .WithMany() .HasForeignKey(\u0022DefaultCurrencyId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022PrimaryBranch\u0022) .WithMany() .HasForeignKey(\u0022PrimaryBranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UserRole\u0022, \u0022UserRole\u0022) .WithMany() .HasForeignKey(\u0022UserRoleId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022DefaultCurrency\u0022); b.Navigation(\u0022PrimaryBranch\u0022); b.Navigation(\u0022UserRole\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UserBranchAccess\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022User\u0022) .WithMany(\u0022BranchAccesses\u0022) .HasForeignKey(\u0022UserId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); b.Navigation(\u0022User\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UserRolePermission\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Permission\u0022, \u0022Permission\u0022) .WithMany() .HasForeignKey(\u0022PermissionId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.UserRole\u0022, \u0022UserRole\u0022) .WithMany() .HasForeignKey(\u0022UserRoleId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Permission\u0022); b.Navigation(\u0022UserRole\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkCenter\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.Branch\u0022, \u0022Branch\u0022) .WithMany() .HasForeignKey(\u0022BranchId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022Branch\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkCenterOperation\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.OperationDefinition\u0022, \u0022OperationDefinition\u0022) .WithMany() .HasForeignKey(\u0022OperationDefinitionId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OperationDefinition\u0022, null) .WithMany(\u0022AllowedWorkCenters\u0022) .HasForeignKey(\u0022OperationDefinitionId1\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.WorkCenter\u0022, \u0022WorkCenter\u0022) .WithMany(\u0022AllowedOperations\u0022) .HasForeignKey(\u0022WorkCenterId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022OperationDefinition\u0022); b.Navigation(\u0022WorkCenter\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrder\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022CreatedBy\u0022) .WithMany() .HasForeignKey(\u0022CreatedById\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.Order\u0022, \u0022Order\u0022) .WithMany() .HasForeignKey(\u0022OrderId\u0022) .OnDelete(DeleteBehavior.Restrict); b.HasOne(\u0022FiloGH.Core.Entities.ProductVariant\u0022, \u0022ProductVariant\u0022) .WithMany() .HasForeignKey(\u0022ProductVariantId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.WorkOrderStatus\u0022, \u0022Status\u0022) .WithMany() .HasForeignKey(\u0022StatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022CreatedBy\u0022); b.Navigation(\u0022Order\u0022); b.Navigation(\u0022ProductVariant\u0022); b.Navigation(\u0022Status\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderOperation\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.OperationDefinition\u0022, \u0022OperationDefinition\u0022) .WithMany() .HasForeignKey(\u0022OperationDefinitionId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.OperationStatus\u0022, \u0022Status\u0022) .WithMany() .HasForeignKey(\u0022StatusId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.WorkCenter\u0022, \u0022WorkCenter\u0022) .WithMany() .HasForeignKey(\u0022WorkCenterId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.WorkOrder\u0022, \u0022WorkOrder\u0022) .WithMany(\u0022Operations\u0022) .HasForeignKey(\u0022WorkOrderId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.Navigation(\u0022OperationDefinition\u0022); b.Navigation(\u0022Status\u0022); b.Navigation(\u0022WorkCenter\u0022); b.Navigation(\u0022WorkOrder\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderOperationLog\u0022, b =\u003E { b.HasOne(\u0022FiloGH.Core.Entities.User\u0022, \u0022Employee\u0022) .WithMany() .HasForeignKey(\u0022EmployeeId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.WorkOrderOperation\u0022, \u0022Operation\u0022) .WithMany() .HasForeignKey(\u0022OperationId\u0022) .OnDelete(DeleteBehavior.Restrict) .IsRequired(); b.HasOne(\u0022FiloGH.Core.Entities.WorkOrderOperation\u0022, null) .WithMany(\u0022Logs\u0022) .HasForeignKey(\u0022WorkOrderOperationId\u0022) .OnDelete(DeleteBehavior.Restrict); b.Navigation(\u0022Employee\u0022); b.Navigation(\u0022Operation\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountChart\u0022, b =\u003E { b.Navigation(\u0022ChildAccounts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.AccountingJournalEntry\u0022, b =\u003E { b.Navigation(\u0022Lines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.BillOfMaterials\u0022, b =\u003E { b.Navigation(\u0022Labors\u0022); b.Navigation(\u0022Stones\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Branch\u0022, b =\u003E { b.Navigation(\u0022BranchLocations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Country\u0022, b =\u003E { b.Navigation(\u0022Cities\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Invoice\u0022, b =\u003E { b.Navigation(\u0022InvoiceLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Location\u0022, b =\u003E { b.Navigation(\u0022BranchLocations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MailingAddress\u0022, b =\u003E { b.Navigation(\u0022ShippingForFulfillments\u0022); b.Navigation(\u0022ShippingForOrders\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.MetalType\u0022, b =\u003E { b.Navigation(\u0022Purities\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OperationDefinition\u0022, b =\u003E { b.Navigation(\u0022AllowedWorkCenters\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Order\u0022, b =\u003E { b.Navigation(\u0022AdditionalFees\u0022); b.Navigation(\u0022Fulfillments\u0022); b.Navigation(\u0022MetalSummaries\u0022); b.Navigation(\u0022OrderLines\u0022); b.Navigation(\u0022PaymentLines\u0022); b.Navigation(\u0022TaxLines\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLine\u0022, b =\u003E { b.Navigation(\u0022InventoryCost\u0022); b.Navigation(\u0022OrderLineCosts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OrderLineCostType\u0022, b =\u003E { b.Navigation(\u0022OrderLineCosts\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.OwnCompany\u0022, b =\u003E { b.Navigation(\u0022Branches\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.Product\u0022, b =\u003E { b.Navigation(\u0022Variants\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductCategory\u0022, b =\u003E { b.Navigation(\u0022Children\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductVariant\u0022, b =\u003E { b.Navigation(\u0022BillOfMaterials\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionOrder\u0022, b =\u003E { b.Navigation(\u0022Transactions\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.ProductionRouting\u0022, b =\u003E { b.Navigation(\u0022Steps\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UnitOfMeasure\u0022, b =\u003E { b.Navigation(\u0022RelatedUnits\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.UomType\u0022, b =\u003E { b.Navigation(\u0022UnitOfMeasures\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.User\u0022, b =\u003E { b.Navigation(\u0022BranchAccesses\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkCenter\u0022, b =\u003E { b.Navigation(\u0022AllowedOperations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrder\u0022, b =\u003E { b.Navigation(\u0022Operations\u0022); }); modelBuilder.Entity(\u0022FiloGH.Core.Entities.WorkOrderOperation\u0022, b =\u003E { b.Navigation(\u0022Logs\u0022); }); #pragma warning restore 612, 618 } } }"
    },
    {
      "Class": "AppState",
      "Path": "FiloGH/Components/Services/StateService.cs",
      "Kind": "Entity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "string",
          "Name": "ColorTheme",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Direction",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "NavigationStyles",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "MenuStyles",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "LayoutStyles",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "PageStyles",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "WidthStyles",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "MenuPosition",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "HeaderPosition",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "MenuColor",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "HeaderColor",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ThemePrimary",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ThemeBackground",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ThemeBackground1",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "BackgroundImage",
          "Attributes": []
        },
        {
          "Type": "MainMenuItems?",
          "Name": "currentItem",
          "Attributes": []
        }
      ],
      "Code": "using Microsoft.JSInterop; using System.Text.Json; public class AppState { public string ColorTheme { get; set; } = \u0022light\u0022; public string Direction { get; set; } = \u0022ltr\u0022; public string NavigationStyles { get; set; } = \u0022vertical\u0022; public string MenuStyles { get; set; } = \u0022\u0022; public string LayoutStyles { get; set; } = \u0022default-menu\u0022; public string PageStyles { get; set; } = \u0022regular\u0022; public string WidthStyles { get; set; } = \u0022fullwidth\u0022; public string MenuPosition { get; set; } = \u0022fixed\u0022; public string HeaderPosition { get; set; } = \u0022fixed\u0022; public string MenuColor { get; set; } = \u0022dark\u0022; public string HeaderColor { get; set; } = \u0022light\u0022; public string ThemePrimary { get; set; } = \u0022\u0022; public string ThemeBackground { get; set; } = \u0022\u0022; public string ThemeBackground1 { get; set; } = \u0022\u0022; public string BackgroundImage { get; set; } = \u0022\u0022; public MainMenuItems? currentItem { get; set; } = null; public bool IsDifferentFrom(AppState other) { return ColorTheme != other.ColorTheme || Direction != other.Direction || NavigationStyles != other.NavigationStyles || MenuStyles != other.MenuStyles || LayoutStyles != other.LayoutStyles || PageStyles != other.PageStyles || WidthStyles != other.WidthStyles || MenuPosition != other.MenuPosition || HeaderPosition != other.HeaderPosition || MenuColor != other.MenuColor || HeaderColor != other.HeaderColor || ThemePrimary != other.ThemePrimary || ThemeBackground != other.ThemeBackground || ThemeBackground1 != other.ThemeBackground1 || BackgroundImage != other.BackgroundImage || (currentItem != null ? !currentItem.Equals(other.currentItem) : other.currentItem != null); } public override bool Equals(object? obj) { if (obj == null || GetType() != obj.GetType()) { return false; } AppState other = (AppState)obj; return ColorTheme == other.ColorTheme \u0026\u0026 Direction == other.Direction \u0026\u0026 NavigationStyles == other.NavigationStyles \u0026\u0026 MenuStyles == other.MenuStyles \u0026\u0026 LayoutStyles == other.LayoutStyles \u0026\u0026 PageStyles == other.PageStyles \u0026\u0026 WidthStyles == other.WidthStyles \u0026\u0026 MenuPosition == other.MenuPosition \u0026\u0026 HeaderPosition == other.HeaderPosition \u0026\u0026 MenuColor == other.MenuColor \u0026\u0026 HeaderColor == other.HeaderColor \u0026\u0026 ThemePrimary == other.ThemePrimary \u0026\u0026 ThemeBackground == other.ThemeBackground \u0026\u0026 ThemeBackground1 == other.ThemeBackground1 \u0026\u0026 BackgroundImage == other.BackgroundImage \u0026\u0026 Equals(currentItem, other.currentItem); } public override int GetHashCode() { return base.GetHashCode(); } public async Task InitializeFromSession(AppState sessionState, SessionService _sessionService) { var _currentState = new AppState(); var stored = await _sessionService.GetInitalAppStateFromSession(); if (stored != null \u0026\u0026 _currentState.IsDifferentFrom(stored)) { ColorTheme = ColorTheme; Direction = Direction; NavigationStyles = NavigationStyles; MenuStyles = MenuStyles; LayoutStyles = LayoutStyles; PageStyles = PageStyles; WidthStyles = WidthStyles; MenuPosition = MenuPosition; HeaderPosition = HeaderPosition; MenuColor = MenuColor; HeaderColor = HeaderColor; ThemePrimary = ThemePrimary; ThemeBackground = ThemeBackground; ThemeBackground1 = ThemeBackground1; BackgroundImage = BackgroundImage; currentItem = currentItem; await _sessionService.SetInitalAppStateToSession(_currentState); } else if (sessionState != null) { ColorTheme = sessionState.ColorTheme; Direction = sessionState.Direction; NavigationStyles = sessionState.NavigationStyles; MenuStyles = sessionState.MenuStyles; LayoutStyles = sessionState.LayoutStyles; PageStyles = sessionState.PageStyles; WidthStyles = sessionState.WidthStyles; MenuPosition = sessionState.MenuPosition; HeaderPosition = sessionState.HeaderPosition; MenuColor = sessionState.MenuColor; HeaderColor = sessionState.HeaderColor; ThemePrimary = sessionState.ThemePrimary; ThemeBackground = sessionState.ThemeBackground; ThemeBackground1 = sessionState.ThemeBackground1; BackgroundImage = sessionState.BackgroundImage; currentItem = sessionState.currentItem; } } } public class StateService { private readonly IJSRuntime _jsRuntime; private readonly SessionService _sessionService; private readonly AppState _currentState; private readonly ILogger\u003CAppState\u003E _logger; public AppState GetAppState() { return _currentState; } public event Action OnChange; public event Action? OnStateChanged; public StateService(IJSRuntime jsRuntime, SessionService sessionService, AppState appState, ILogger\u003CAppState\u003E logger) { _jsRuntime = jsRuntime; _sessionService = sessionService; _currentState = new AppState(); OnChange = () =\u003E { }; _logger = logger; Task.Run(async () =\u003E await InitializeAppStateAsync()); } private async Task InitializeAppStateAsync() { try { var sessionState = await _sessionService.GetAppStateFromSession(); var initialAppState = await _sessionService.GetInitalAppStateFromSession(); if (initialAppState == null) { await _sessionService.SetInitalAppStateToSession(_currentState); } await _currentState.InitializeFromSession(sessionState, _sessionService); OnChange?.Invoke(); NotifyStateChanged(); } catch (Exception ex) { _logger.LogError(ex, \u0022Error initializing AppState\u0022); } } public async Task InitializeLandingAppState() { var sessionState = await _sessionService.GetAppStateFromSession(); _currentState.NavigationStyles = \u0022horizontal\u0022; _currentState.MenuStyles = \u0022menu-click\u0022; await _currentState.InitializeFromSession(sessionState, _sessionService); NotifyStateChanged(); } private async void NotifyStateChanged() { await _sessionService.SetAppStateToSession(_currentState); OnStateChanged?.Invoke(); } public async Task directionFn(string val) { _currentState.Direction = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022dir\u0022, val); NotifyStateChanged(); } public Task setCurrentItem(MainMenuItems val) { _currentState.currentItem = val; return Task.CompletedTask; } public async Task colorthemeFn(string val, bool stateClick) { _currentState.ColorTheme = val; if (stateClick) { _currentState.ThemeBackground = \u0022\u0022; _currentState.ThemeBackground1 = \u0022\u0022; } await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-theme-mode\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, val); if (stateClick) { if (val == \u0022light\u0022) { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, \u0022dark\u0022); await menuColorFn(\u0022dark\u0022); } else { await menuColorFn(val); } await headerColorFn(val); } await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--body-bg-rgb\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--body-bg-rgb2\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--light-rgb\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--form-control-bg\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--input-border\u0022); NotifyStateChanged(); await PersistState(); } int screenSize = 1268; public async Task navigationStylesFn(string val, bool stateClick) { if (stateClick \u0026\u0026 val == \u0022vertical\u0022) { _currentState.MenuStyles = \u0022\u0022; _currentState.LayoutStyles = \u0022default-menu\u0022; if(_currentState.HeaderColor == \u0022light\u0022) { _currentState.HeaderColor = \u0022transparent\u0022; await headerColorFn(_currentState.HeaderColor); } } if (stateClick \u0026\u0026 val == \u0022horizontal\u0022 \u0026\u0026 _currentState.ColorTheme != \u0022dark\u0022) { if(_currentState.HeaderColor == \u0022transparent\u0022) { _currentState.HeaderColor = \u0022light\u0022; await headerColorFn(_currentState.HeaderColor); } } if (string.IsNullOrEmpty(_currentState.MenuStyles) \u0026\u0026 val == \u0022horizontal\u0022) { _currentState.MenuStyles = \u0022menu-click\u0022; _currentState.LayoutStyles = \u0022\u0022; await menuStylesFn(\u0022menu-click\u0022); } _currentState.NavigationStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, val); if (val == \u0022horizontal\u0022) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-vertical-style\u0022); } else { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); if (await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022) \u003E 992) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-toggled\u0022); } } screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task layoutStylesFn(string val) { _currentState.LayoutStyles = val; _currentState.MenuStyles = \u0022\u0022; await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); switch (val) { case \u0022default-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); if (await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022) \u003E 992) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-toggled\u0022); } break; case \u0022closed-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022closed\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close-menu-close\u0022); break; case \u0022detached\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022detached\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022detached-close\u0022); break; case \u0022icontext-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022icontext\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022icon-text-close\u0022); break; case \u0022icon-overlay\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022icon-overlay-close\u0022); break; case \u0022double-menu\u0022: var isdoubleMenuActive = await _jsRuntime.InvokeAsync\u003Cbool\u003E(\u0022interop.isEleExist\u0022, \u0022.double-menu-active\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022doublemenu\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022double-menu-open\u0022); if (!isdoubleMenuActive) { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022double-menu-close\u0022); } break; } screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task menuStylesFn(string val) { _currentState.LayoutStyles = \u0022\u0022; _currentState.MenuStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-vertical-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-hor-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-style\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, $\u0022{val}-closed\u0022); screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task pageStyleFn(string val) { _currentState.PageStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-page-style\u0022, val); NotifyStateChanged(); } public async Task widthStylessFn(string val) { _currentState.WidthStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-width\u0022, val); NotifyStateChanged(); } public async Task menuPositionFn(string val) { _currentState.MenuPosition = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-position\u0022, val); NotifyStateChanged(); } public async Task headerPositionFn(string val) { _currentState.HeaderPosition = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-position\u0022, val); NotifyStateChanged(); } public async Task menuColorFn(string val) { _currentState.MenuColor = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, val); NotifyStateChanged(); } public async Task headerColorFn(string val) { _currentState.HeaderColor = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, val); NotifyStateChanged(); } public async Task themePrimaryFn(string val) { _currentState.ThemePrimary = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--primary-rgb\u0022, val); NotifyStateChanged(); } public async Task themeBackgroundFn(string val, string val2,bool stateClick) { _currentState.ThemeBackground = val; _currentState.ThemeBackground1 = val2; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-theme-mode\u0022, \u0022dark\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, \u0022dark\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, \u0022dark\u0022); _currentState.ColorTheme = \u0022dark\u0022; if (stateClick) { _currentState.MenuColor = \u0022dark\u0022; _currentState.HeaderColor = \u0022dark\u0022; } await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--body-bg-rgb\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--body-bg-rgb2\u0022, val2); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--light-rgb\u0022, val2); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--form-control-bg\u0022, $\u0022rgb({val2})\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--input-border\u0022, \u0022rgba(255,255,255,0.1)\u0022); NotifyStateChanged(); } public async Task backgroundImageFn(string val) { _currentState.BackgroundImage = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-bg-img\u0022, val); NotifyStateChanged(); } public async Task reset() { _currentState.ColorTheme = \u0022light\u0022; _currentState.Direction = \u0022ltr\u0022; _currentState.NavigationStyles = \u0022vertical\u0022; _currentState.MenuStyles = \u0022\u0022; _currentState.LayoutStyles = \u0022default-menu\u0022; _currentState.PageStyles = \u0022regular\u0022; _currentState.WidthStyles = \u0022fullwidth\u0022; _currentState.MenuPosition = \u0022fixed\u0022; _currentState.HeaderPosition = \u0022fixed\u0022; _currentState.MenuColor = \u0022dark\u0022; _currentState.HeaderColor = \u0022light\u0022; _currentState.ThemePrimary = \u0022\u0022; _currentState.ThemeBackground = \u0022\u0022; _currentState.ThemeBackground1 = \u0022\u0022; _currentState.BackgroundImage = \u0022\u0022; await _jsRuntime.InvokeVoidAsync(\u0022interop.clearAllLocalStorage\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.setclearCssVariables\u0022); await colorthemeFn(\u0022light\u0022, false); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-menu-position\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-header-position\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-page-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-width\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-bg-img\u0022); await directionFn(\u0022ltr\u0022); await widthStylessFn(\u0022full-width\u0022); await navigationStylesFn(\u0022vertical\u0022, false); await menuColorFn(\u0022dark\u0022); await headerColorFn(\u0022light\u0022); _sessionService.DeleteAppStateFromSession(); NotifyStateChanged(); } public async Task Landingreset() { await _jsRuntime.InvokeVoidAsync(\u0022interop.clearAllLocalStorage\u0022); await colorthemeFn(\u0022light\u0022, false); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022style\u0022); await directionFn(\u0022ltr\u0022); await menuColorFn(\u0022dark\u0022); _currentState.ThemePrimary = \u0022\u0022; _sessionService.DeleteAppStateFromSession(); NotifyStateChanged(); } public async Task retrieveFromLocalStorage() { string direction = _currentState.Direction; await directionFn(direction); string navstyles = _currentState.NavigationStyles; await navigationStylesFn(navstyles, false); string pageStyle = _currentState.PageStyles; await pageStyleFn(pageStyle); string widthStyles = _currentState.WidthStyles; await widthStylessFn(widthStyles); string ynexmenuposition = _currentState.MenuPosition; await menuPositionFn(ynexmenuposition); string ynexheaderposition = _currentState.HeaderPosition; await headerPositionFn(ynexheaderposition); string ynexcolortheme = _currentState.ColorTheme; await colorthemeFn(ynexcolortheme, false); string ynexbgimg = _currentState.BackgroundImage; if (!string.IsNullOrEmpty(ynexbgimg)) { await backgroundImageFn(ynexbgimg); } string ynexbgcolor = _currentState.ThemeBackground; string ynexbgcolor1 = _currentState.ThemeBackground1; if (!string.IsNullOrEmpty(ynexbgcolor)) { await themeBackgroundFn(ynexbgcolor, ynexbgcolor1,false); _currentState.ColorTheme = \u0022dark\u0022; } string ynexMenu = _currentState.MenuColor; await menuColorFn(ynexMenu); string ynexHeader = _currentState.HeaderColor; await headerColorFn(ynexHeader); string ynexmenuStyles = _currentState.MenuStyles; string ynexverticalstyles = _currentState.LayoutStyles; if (string.IsNullOrEmpty(ynexverticalstyles)) { await menuStylesFn(ynexmenuStyles); } else { await layoutStylesFn(ynexverticalstyles); } string ynexprimaryRGB = _currentState.ThemePrimary; await themePrimaryFn(ynexprimaryRGB); } public async Task retrieveFromLandingLocalStorage() { await navigationStylesFn(\u0022horizontal\u0022, false); _currentState.MenuStyles = \u0022menu-click\u0022; _currentState.LayoutStyles = \u0022\u0022; await menuStylesFn(\u0022menu-click\u0022); string direction = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexdirection\u0022) ?? _currentState.Direction; await directionFn(direction); string ynexcolortheme = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexcolortheme\u0022) ?? _currentState.ColorTheme; await colorthemeFn(ynexcolortheme, false); string ynexprimaryRGB = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexprimaryRGB\u0022) ?? _currentState.ThemePrimary; await themePrimaryFn(ynexprimaryRGB); } private async Task PersistState() { await Task.Delay(0); await _sessionService.SetAppStateToSession(_currentState); } }"
    },
    {
      "Class": "AppStateService",
      "Path": "FiloGH/Components/Services/AppStateService.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "public class AppStateService { private string? _direction; public string? Direction { get =\u003E _direction; set { if (_direction != value) { _direction = value; OnDirectionChanged?.Invoke(value ?? string.Empty); } } } public event Action\u003Cstring\u003E? OnDirectionChanged; public void SetDirection(string direction) { Direction = direction; } }"
    },
    {
      "Class": "Bank",
      "Path": "FiloGH.Core/Entities/Bank.cs",
      "Kind": "Entity",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "AccountHolderName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Iban",
          "Attributes": [
            "[MaxLength(34)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "SwiftCode",
          "Attributes": [
            "[MaxLength(11)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch?",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "AccountChartId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "AccountChart",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer?",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Bank { public int Id { get; set; } [MaxLength(255)] public required string AccountHolderName { get; set; } [MaxLength(34)] public required string Iban { get; set; } [MaxLength(11)] public string? SwiftCode { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; public byte? BranchId { get; set; } public Branch? Branch { get; set; } public int AccountChartId { get; set; } public required AccountChart AccountChart { get; set; } = null!; public int? CustomerId { get; set; } public Customer? Customer { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "BaseService",
      "Path": "FiloGH.Application/Services/Concrete/BaseService.cs",
      "Kind": "Entity",
      "BaseName": "IDisposable",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System; using System.Collections.Generic; using System.Threading.Tasks; namespace FiloGH.Core.Services { public abstract class BaseService\u003CT, TId\u003E : IDisposable where T : class, IEntity\u003CTId\u003E where TId : struct, IComparable, IConvertible, IComparable\u003CTId\u003E, IEquatable\u003CTId\u003E { protected readonly IUnitOfWork UnitOfWork; protected readonly IGenericRepository\u003CT, TId\u003E Repository; public BaseService(IUnitOfWork unitOfWork) { UnitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork)); Repository = unitOfWork.GetRepository\u003CT, TId\u003E(); } public virtual async Task\u003CT?\u003E GetByIdAsync(TId id, bool disableTracking = false) { return await Repository.GetByIdAsync(id, disableTracking); } public virtual async Task\u003CIEnumerable\u003CT\u003E\u003E GetAllAsync() { return await Repository.GetAllAsync(); } public virtual async Task\u003CT\u003E AddAsync(T entity) { await Repository.AddAsync(entity); await UnitOfWork.SaveAsync(); return entity; } public virtual async Task UpdateAsync(T entity) { Repository.Update(entity); await UnitOfWork.SaveAsync(); } public virtual async Task DeleteAsync(TId id) { await Repository.DeleteAsync(id); await UnitOfWork.SaveAsync(); } private bool disposed = false; protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { UnitOfWork.Dispose(); } disposed = true; } } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } } }"
    },
    {
      "Class": "BillOfMaterials",
      "Path": "FiloGH.Core/Entities/BillOfMaterials.cs",
      "Kind": "Entity",
      "PropertyCount": 15,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string",
          "Name": "RevisionNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MetalWeightNet",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(8,3)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MetalLossRatio",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BOMTypeId",
          "Attributes": []
        },
        {
          "Type": "BOMType",
          "Name": "BOMType",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "TotalLeadTimeHours",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CBOMStone\u003E",
          "Name": "Stones",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CBOMLabor\u003E",
          "Name": "Labors",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BillOfMaterials { public int Id { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; [MaxLength(255)] public required string Name { get; set; } [MaxLength(255)] public string? Description { get; set; } [MaxLength(20)] public required string RevisionNumber { get; set; } = \u00221.0\u0022; public bool IsActive { get; set; } = true; [Column(TypeName = \u0022decimal(8,3)\u0022)] public decimal MetalWeightNet { get; set; } [Column(TypeName = \u0022decimal(5,4)\u0022)] public decimal MetalLossRatio { get; set; } = 0.05M; public byte BOMTypeId { get; set; } public required BOMType BOMType { get; set; } = null!; public short TotalLeadTimeHours { get; set; } = 0; public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.Now; public ICollection\u003CBOMStone\u003E Stones { get; set; } = new List\u003CBOMStone\u003E(); public ICollection\u003CBOMLabor\u003E Labors { get; set; } = new List\u003CBOMLabor\u003E(); } }"
    },
    {
      "Class": "BOMCostType",
      "Path": "FiloGH.Core/Entities/BOMCostType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "AffectsMetalInventory",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BOMCostType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool AffectsMetalInventory { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "BOMLabor",
      "Path": "FiloGH.Core/Entities/BOMLabor.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "BomId",
          "Attributes": []
        },
        {
          "Type": "BillOfMaterials",
          "Name": "Bom",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LaborCostTypeId",
          "Attributes": []
        },
        {
          "Type": "BOMCostType",
          "Name": "LaborCostType",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "Quantity",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "UnitCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BOMLabor { public int Id { get; set; } public int BomId { get; set; } public required BillOfMaterials Bom { get; set; } = null!; public byte LaborCostTypeId { get; set; } public required BOMCostType LaborCostType { get; set; } = null!; public short Quantity { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal UnitCost { get; set; } [MaxLength(255)] public string? Description { get; set; } } }"
    },
    {
      "Class": "BOMStone",
      "Path": "FiloGH.Core/Entities/BOMStone.cs",
      "Kind": "Entity",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "BomId",
          "Attributes": []
        },
        {
          "Type": "BillOfMaterials",
          "Name": "Bom",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StoneTypeId",
          "Attributes": []
        },
        {
          "Type": "BOMStoneType",
          "Name": "StoneType",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StoneSize",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(4,2)\u0022)]"
          ]
        },
        {
          "Type": "short",
          "Name": "Quantity",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "CaratTotal",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(8,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CostPerCarat",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BOMStone { public int Id { get; set; } public int BomId { get; set; } public required BillOfMaterials Bom { get; set; } = null!; public byte StoneTypeId { get; set; } public required BOMStoneType StoneType { get; set; } = null!; [Column(TypeName = \u0022decimal(4,2)\u0022)] public decimal StoneSize { get; set; } public short Quantity { get; set; } [Column(TypeName = \u0022decimal(8,4)\u0022)] public decimal CaratTotal { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal CostPerCarat { get; set; } } }"
    },
    {
      "Class": "BOMStoneType",
      "Path": "FiloGH.Core/Entities/BOMStoneType.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsPrecious",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BaseUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "BaseUnit",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BOMStoneType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public string? Code { get; set; } public bool IsPrecious { get; set; } = false; public bool IsActive { get; set; } = true; public byte BaseUnitId { get; set; } public required UnitOfMeasure BaseUnit { get; set; } = null!; } }"
    },
    {
      "Class": "BOMType",
      "Path": "FiloGH.Core/Entities/BOMType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class BOMType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Branch",
      "Path": "FiloGH.Core/Entities/Branch.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 14,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsSalesPoint",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "OwnCompanyId",
          "Attributes": []
        },
        {
          "Type": "OwnCompany",
          "Name": "OwnCompany",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "AddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "Address",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "DefaultCashLocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "DefaultCashLocation",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "DefaultMetalLocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "DefaultMetalLocation",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CBranchLocation\u003E",
          "Name": "BranchLocations",
          "Attributes": []
        }
      ],
      "Code": "\uFEFF using FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Branch : IEntity\u003Cbyte\u003E { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(255)] public required string Name { get; set; } public bool IsActive { get; set; } public bool IsSalesPoint { get; set; } = false; public byte OwnCompanyId { get; set; } public required OwnCompany OwnCompany { get; set; } = null!; public int? AddressId { get; set; } public MailingAddress? Address { get; set; } public byte DefaultCashLocationId { get; set; } public required Location DefaultCashLocation { get; set; } = null!; public byte DefaultMetalLocationId { get; set; } public required Location DefaultMetalLocation { get; set; } = null!; public ICollection\u003CBranchLocation\u003E BranchLocations { get; set; } = new List\u003CBranchLocation\u003E(); } }"
    },
    {
      "Class": "BranchLocation",
      "Path": "FiloGH.Core/Entities/BranchLocation.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Core.Entities { public class BranchLocation { public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public byte LocationId { get; set; } public required Location Location { get; set; } = null!; public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.UtcNow; } }"
    },
    {
      "Class": "Brand",
      "Path": "FiloGH.Core/Entities/Brand.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(150)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Brand { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(150)] public required string Name { get; set; } [MaxLength(20)] public string? Code { get; set; } [MaxLength(500)] public string? Description { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "CacheInitializer",
      "Path": "FiloGH.Infrastructure/Services/Cache/CacheInitializer.cs",
      "Kind": "Entity",
      "BaseName": "IHostedService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using System.Threading; using System.Threading.Tasks; using System; using System.Linq; using System.Collections.Generic; namespace FiloGH.Infrastructure.Services.Cache { public class CacheInitializer : IHostedService { private readonly IServiceScopeFactory _scopeFactory; private readonly ILogger\u003CCacheInitializer\u003E _logger; public CacheInitializer(IServiceScopeFactory scopeFactory, ILogger\u003CCacheInitializer\u003E logger) { _scopeFactory = scopeFactory; _logger = logger; } public async Task StartAsync(CancellationToken cancellationToken) { _logger.LogInformation(\u0022\u00D6nbellek ba\u015Flatma i\u015Flemi ba\u015Flat\u0131l\u0131yor...\u0022); await LoadAndSetCacheAsync\u003CBranch, byte\u003E(cancellationToken); await LoadAndSetCacheAsync\u003CCurrency, byte\u003E(cancellationToken); await LoadAndSetCacheAsync\u003CUomType, byte\u003E(cancellationToken); _logger.LogInformation(\u0022T\u00FCm \u00F6nbellek ba\u015Flatma i\u015Flemleri tamamland\u0131.\u0022); } private async Task LoadAndSetCacheAsync\u003CTEntity, TId\u003E(CancellationToken cancellationToken) where TEntity : class, IEntity\u003CTId\u003E where TId : struct, System.IComparable, System.IConvertible, System.IComparable\u003CTId\u003E, System.IEquatable\u003CTId\u003E { var entityName = typeof(TEntity).Name; _logger.LogInformation(\u0022Ba\u015Flat\u0131l\u0131yor: {EntityName} \u00F6nbelle\u011Fi.\u0022, entityName); try { using var scope = _scopeFactory.CreateScope(); var uow = scope.ServiceProvider.GetRequiredService\u003CIUnitOfWork\u003E(); var repository = uow.GetRepository\u003CTEntity, TId\u003E(); var cacheService = scope.ServiceProvider.GetRequiredService\u003CICacheService\u003CTEntity\u003E\u003E(); IEnumerable\u003CTEntity\u003E items = await repository.GetAllAsync(disableTracking: true); await cacheService.SetItemsAsync(items.ToList()); _logger.LogInformation(\u0022Ba\u015Far\u0131l\u0131: {EntityName} \u00F6nbelle\u011Fi y\u00FCklendi. Toplam {Count} kay\u0131t.\u0022, entityName, items.Count()); } catch (Exception ex) { _logger.LogError(ex, \u0022HATA: {EntityName} \u00F6nbelle\u011Fi y\u00FCklenirken bir sorun olu\u015Ftu.\u0022, entityName); } } public Task StopAsync(CancellationToken cancellationToken) =\u003E Task.CompletedTask; } }"
    },
    {
      "Class": "CacheService",
      "Path": "FiloGH.Infrastructure/Services/Cache/CacheService.cs",
      "Kind": "Entity",
      "BaseName": "ICacheService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.Collections.Generic; using System.Threading.Tasks; using System; namespace FiloGH.Infrastructure.Services.Cache { public class CacheService\u003CTEntity\u003E : ICacheService\u003CTEntity\u003E where TEntity : class { private readonly object _lock = new object(); public List\u003CTEntity\u003E Items { get; private set; } = new List\u003CTEntity\u003E(); public CacheService() { } public Task SetItemsAsync(List\u003CTEntity\u003E items) { lock (_lock) { Items = items; } return Task.CompletedTask; } public async Task ReloadFromSourceAsync(Func\u003CTask\u003CList\u003CTEntity\u003E\u003E\u003E dataLoader) { var newItems = await dataLoader(); await SetItemsAsync(newItems); } } }"
    },
    {
      "Class": "Carat",
      "Path": "FiloGH.Models/Entities/Carat.cs",
      "Kind": "Entity",
      "PropertyCount": 2,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Carat { public int Id { get; set; } [MaxLength(255)] public required string Name { get; set; } } }"
    },
    {
      "Class": "Cargo",
      "Path": "FiloGH.Core/Entities/Cargo.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "TrackingUrl",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Cargo { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(255)] public string? TrackingUrl { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Cash",
      "Path": "FiloGH.Core/Entities/Cash.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "AccountChartId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "AccountChart",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "CurrentBalance",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,2)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Cash { public int Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public int AccountChartId { get; set; } public required AccountChart AccountChart { get; set; } = null!; [Column(TypeName = \u0022decimal(18,2)\u0022)] public decimal CurrentBalance { get; set; } = 0.0M; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Category",
      "Path": "FiloGH.Models/Entities/Category.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Enabled",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "int",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ParentId",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CCategory\u003E?",
          "Name": "SubCategories",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CCategoryAttributeName\u003E?",
          "Name": "AttributeNames",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Category { public int Id { get; set; } public bool Enabled { get; set; } [MaxLength(255)] public required string Name { get; set; } public int Position { get; set; } public int? ParentId { get; set; } public ICollection\u003CCategory\u003E? SubCategories { get; set; } public ICollection\u003CCategoryAttributeName\u003E? AttributeNames { get; set; } } }"
    },
    {
      "Class": "CategoryAttribute",
      "Path": "FiloGH.Models/Entities/CategoryAttribute.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductCategoryAttributeNameId",
          "Attributes": []
        },
        {
          "Type": "CategoryAttributeName",
          "Name": "CategoryAttributeName",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ProductCategoryAttributeValueId",
          "Attributes": []
        },
        {
          "Type": "CategoryAttributeValue?",
          "Name": "CategoryAttributeValue",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CategoryCustomValue",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class CategoryAttribute { public int Id { get; set; } public int ProductId { get; set; } public int ProductCategoryAttributeNameId { get; set; } public required CategoryAttributeName CategoryAttributeName { get; set; } public int? ProductCategoryAttributeValueId { get; set; } public CategoryAttributeValue? CategoryAttributeValue { get; set; } [MaxLength(255)] public string? CategoryCustomValue { get; set; } } }"
    },
    {
      "Class": "CategoryAttributeName",
      "Path": "FiloGH.Models/Entities/CategoryAttributeName.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CCategory\u003E?",
          "Name": "ProductCategories",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CCategoryAttributeValue\u003E?",
          "Name": "AttributeValues",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsRequired",
          "Attributes": []
        },
        {
          "Type": "InputType",
          "Name": "InputType",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Models.Models.Enum; namespace FiloGH.Models.Entities { public class CategoryAttributeName { public int Id { get; set; } public required string Name { get; set; } public ICollection\u003CCategory\u003E? ProductCategories { get; set; } public ICollection\u003CCategoryAttributeValue\u003E? AttributeValues { get; set; } public bool IsRequired { get; set; } public InputType InputType { get; set; } } }"
    },
    {
      "Class": "CategoryAttributeValue",
      "Path": "FiloGH.Models/Entities/CategoryAttributeValue.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductCategoryAttributeNameId",
          "Attributes": []
        },
        {
          "Type": "CategoryAttributeName",
          "Name": "CategoryAttributeName",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Value",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class CategoryAttributeValue { public int Id { get; set; } public int ProductCategoryAttributeNameId { get; set; } public required CategoryAttributeName CategoryAttributeName { get; set; } [MaxLength(255)] public required string Value { get; set; } } }"
    },
    {
      "Class": "City",
      "Path": "FiloGH.Core/Entities/City.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CountryId",
          "Attributes": []
        },
        {
          "Type": "Country",
          "Name": "Country",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class City { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } = null!; [MaxLength(10)] public string? Code { get; set; } public byte CountryId { get; set; } public required Country Country { get; set; } = null!; } }"
    },
    {
      "Class": "ClientTimeZoneService",
      "Path": "FiloGH.Infrastructure/Services/Client/ClientTimeZoneService.cs",
      "Kind": "Entity",
      "BaseName": "IClientTimeZoneService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; namespace FiloGH.Infrastructure.Services.Client { public class ClientTimeZoneService : IClientTimeZoneService { private readonly TaskCompletionSource\u003Cbool\u003E _tcs = new TaskCompletionSource\u003Cbool\u003E(); public TimeZoneInfo TimeZone { get; private set; } = TimeZoneInfo.Local; public void SetTimeZone(string timeZoneId) { try { TimeZone = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId); } catch (TimeZoneNotFoundException) { } _tcs.TrySetResult(true); } public Task WaitForTimeZoneAsync() { return _tcs.Task; } } }"
    },
    {
      "Class": "Collection",
      "Path": "FiloGH.Models/Entities/Collection.cs",
      "Kind": "Entity",
      "PropertyCount": 2,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Collection { public int Id { get; set; } [MaxLength(255)] public required string Name { get; set; } ICollection\u003CProduct\u003E? Products { get; set; } } }"
    },
    {
      "Class": "Company",
      "Path": "FiloGH.Models/Entities/Company.cs",
      "Kind": "Entity",
      "PropertyCount": 2,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Company { public int Id { get; set; } [MaxLength(255)] public required string Name { get; set; } } }"
    },
    {
      "Class": "Country",
      "Path": "FiloGH.Core/Entities/Country.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(2)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "HasPredefinedCityNames",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "DefaultCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency?",
          "Name": "DefaultCurrency",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CCity\u003E",
          "Name": "Cities",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Country { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(2)] public required string Code { get; set; } = null!; [MaxLength(100)] public required string Name { get; set; } = null!; public bool IsActive { get; set; } = true; public bool HasPredefinedCityNames { get; set; } public byte? DefaultCurrencyId { get; set; } public Currency? DefaultCurrency { get; set; } public ICollection\u003CCity\u003E Cities { get; set; } = new List\u003CCity\u003E(); } }"
    },
    {
      "Class": "Currency",
      "Path": "FiloGH.Core/Entities/Currency.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(5)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Symbol",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "CurrencyType",
          "Name": "Type",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsSystemDefault",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsRateTracked",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Enums; using FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Currency : IEntity\u003Cbyte\u003E { [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(5)] public required string Code { get; set; } [MaxLength(255)] public required string Name { get; set; } public bool IsActive { get; set; } [MaxLength(10)] public string? Symbol { get; set; } public CurrencyType Type { get; set; } public bool IsSystemDefault { get; set; } public bool IsRateTracked { get; set; } } }"
    },
    {
      "Class": "CurrencyService",
      "Path": "FiloGH.Application/Services/Concrete/CurrencyService.cs",
      "Kind": "Entity",
      "BaseName": "ICurrencyService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using FiloGH.Application.Services.Abstract; using System.Linq.Expressions; using Microsoft.EntityFrameworkCore; using System.Linq; using Microsoft.EntityFrameworkCore.Query; using System.Collections.Generic; using System; using System.Threading.Tasks; namespace FiloGH.Application.Services.Concrete { public class CurrencyService : ICurrencyService { private readonly IUnitOfWork _uow; private readonly IGenericRepository\u003CCurrency, byte\u003E _currencyRepository; public CurrencyService(IUnitOfWork uow) { _uow = uow; _currencyRepository = _uow.GetRepository\u003CCurrency, byte\u003E(); } public async Task\u003CCurrency?\u003E GetByIdAsync(byte id, string? includeProperties = null) { return await _currencyRepository.GetByIdAsync( id, disableTracking: false, includeProperties: includeProperties ); } public async Task\u003CIEnumerable\u003CCurrency\u003E\u003E GetAllAsync( Expression\u003CFunc\u003CCurrency, bool\u003E\u003E? filter = null, Func\u003CIQueryable\u003CCurrency\u003E, IOrderedQueryable\u003CCurrency\u003E\u003E? orderBy = null, Func\u003CIQueryable\u003CCurrency\u003E, IIncludableQueryable\u003CCurrency, object\u003E\u003E? include = null, bool asNoTracking = true) { var result = await _currencyRepository.GetAllAsync( filter: filter, orderBy: orderBy, include: include, disableTracking: asNoTracking ); if (orderBy == null) { result = result.OrderBy(c =\u003E c.Name); } return result; } public async Task AddAsync(Currency entity) { await _currencyRepository.AddAsync(entity); await _uow.SaveAsync(); } public async Task UpdateAsync(Currency entity) { var existingEntity = await _currencyRepository.GetByIdAsync( entity.Id, disableTracking: false ); if (existingEntity == null) { throw new KeyNotFoundException($\u0022Currency with ID {entity.Id} not found.\u0022); } existingEntity.Name = entity.Name; existingEntity.Code = entity.Code; existingEntity.Symbol = entity.Symbol; existingEntity.IsActive = entity.IsActive; existingEntity.Type = entity.Type; existingEntity.IsSystemDefault = entity.IsSystemDefault; existingEntity.IsRateTracked = entity.IsRateTracked; await _currencyRepository.UpdateAsync(existingEntity); await _uow.SaveAsync(); } public async Task DeleteAsync(byte id) { var entity = await _currencyRepository.GetByIdAsync(id, disableTracking: false); if (entity != null) { await _currencyRepository.DeleteAsync(entity); await _uow.SaveAsync(); } } } }"
    },
    {
      "Class": "Customer",
      "Path": "FiloGH.Core/Entities/Customer.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "PartnerCode",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsSupplier",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsB2BPartner",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsCustomer",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "TaxNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "DefaultCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency?",
          "Name": "DefaultCurrency",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "PaymentTermId",
          "Attributes": []
        },
        {
          "Type": "PaymentTerm?",
          "Name": "PaymentTerm",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ShippingAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "ShippingAddress",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "BillingAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "BillingAddress",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Customer : IEntity\u003Cint\u003E { public int Id { get; set; } [MaxLength(20)] public required string PartnerCode { get; set; } [MaxLength(255)] public required string Name { get; set; } public bool IsActive { get; set; } = true; public bool IsSupplier { get; set; } public bool IsB2BPartner { get; set; } public bool IsCustomer { get; set; } [MaxLength(20)] public string? TaxNumber { get; set; } public byte? DefaultCurrencyId { get; set; } public Currency? DefaultCurrency { get; set; } public byte? PaymentTermId { get; set; } public PaymentTerm? PaymentTerm { get; set; } public int? ShippingAddressId { get; set; } public MailingAddress? ShippingAddress { get; set; } public int? BillingAddressId { get; set; } public MailingAddress? BillingAddress { get; set; } } }"
    },
    {
      "Class": "CustomerMetalAccount",
      "Path": "FiloGH.Core/Entities/CustomerMetalAccount.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "MetalCurrency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "BalanceInGrams",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "LastUpdated",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class CustomerMetalAccount { public int Id { get; set; } public int CustomerId { get; set; } public required Customer Customer { get; set; } = null!; public byte MetalCurrencyId { get; set; } public required Currency MetalCurrency { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal BalanceInGrams { get; set; } = 0.0M; public bool IsActive { get; set; } = true; public DateTimeOffset LastUpdated { get; set; } = DateTimeOffset.Now; } }"
    },
    {
      "Class": "CustomerMetalAccountTransaction",
      "Path": "FiloGH.Core/Entities/CustomerMetalAccountTransaction.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "TransactionDate",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "MetalCurrency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "TransactionTypeId",
          "Attributes": []
        },
        {
          "Type": "CustomerMetalAccountTransactionType",
          "Name": "TransactionType",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "WeightGrams",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "RelatedDocumentId",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class CustomerMetalAccountTransaction { public long Id { get; set; } public DateTimeOffset TransactionDate { get; set; } = DateTimeOffset.Now; public int CustomerId { get; set; } public required Customer Customer { get; set; } = null!; public byte MetalCurrencyId { get; set; } public required Currency MetalCurrency { get; set; } = null!; public byte TransactionTypeId { get; set; } public required CustomerMetalAccountTransactionType TransactionType { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal WeightGrams { get; set; } public int? RelatedDocumentId { get; set; } [MaxLength(255)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "CustomerMetalAccountTransactionType",
      "Path": "FiloGH.Core/Entities/CustomerMetalAccountTransactionType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "MovementSign",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class CustomerMetalAccountTransactionType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short MovementSign { get; set; } = 1; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "DailyMetalRate",
      "Path": "FiloGH.Core/Entities/DailyMetalRate.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateOnly",
          "Name": "RateDate",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "UsdRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TryRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "GoldBuyRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "SilverBuyRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PlatinumBuyRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PalladiumBuyRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,4)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class DailyMetalRate { public int Id { get; set; } public DateOnly RateDate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal UsdRate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal TryRate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal GoldBuyRate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal SilverBuyRate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal PlatinumBuyRate { get; set; } [Column(TypeName = \u0022decimal(9,4)\u0022)] public decimal PalladiumBuyRate { get; set; } } }"
    },
    {
      "Class": "Employee",
      "Path": "FiloGH.Core/Entities/Employee.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "FirstName",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "LastName",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "EmployeeCode",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "PrimaryBranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "PrimaryBranch",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Department",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "JobTitle",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "HireDate",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Email",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Employee { public int Id { get; set; } [MaxLength(100)] public required string FirstName { get; set; } [MaxLength(100)] public required string LastName { get; set; } [MaxLength(20)] public string? EmployeeCode { get; set; } public byte PrimaryBranchId { get; set; } public required Branch PrimaryBranch { get; set; } = null!; [MaxLength(100)] public string? Department { get; set; } [MaxLength(100)] public string? JobTitle { get; set; } public bool IsActive { get; set; } = true; public DateTimeOffset HireDate { get; set; } [MaxLength(255)] public string? Email { get; set; } } }"
    },
    {
      "Class": "FixUomRelationships1",
      "Path": "FiloGH.Infrastructure/Migrations/20251004181647_FixUomRelationships1.cs",
      "Kind": "Entity",
      "BaseName": "Migration",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing System; using Microsoft.EntityFrameworkCore.Migrations; #nullable disable #pragma warning disable CA1814 namespace FiloGH.Infrastructure.Migrations { public partial class FixUomRelationships1 : Migration { protected override void Up(MigrationBuilder migrationBuilder) { migrationBuilder.CreateTable( name: \u0022AccountTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), FinancialStatementCategory = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_AccountTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022BOMCostTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), AffectsMetalInventory = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BOMCostTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022BOMTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BOMTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Brands\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(150)\u0022, maxLength: 150, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: true), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Brands\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Cargos\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), TrackingUrl = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Cargos\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Currencies\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(5)\u0022, maxLength: 5, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Symbol = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: true), Type = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsSystemDefault = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsRateTracked = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Currencies\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022CustomerMetalAccountTransactionTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), MovementSign = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_CustomerMetalAccountTransactionTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022DailyMetalRates\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), RateDate = table.Column\u003CDateOnly\u003E(type: \u0022date\u0022, nullable: false), UsdRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false), TryRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false), GoldBuyRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false), SilverBuyRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false), PlatinumBuyRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false), PalladiumBuyRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_DailyMetalRates\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022ImageTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), SortOrder = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ImageTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022InventoryTransactionTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), MovementSign = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), AffectsCost = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InventoryTransactionTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022InvoiceStatuses\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsFinal = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsLegalSubmission = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InvoiceStatuses\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Karats\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Fineness = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,4)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Karats\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Locations\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Position = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Type = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Locations\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OperationDefinitions\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), RequiresWorkCenter = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsMetalPurityChanging = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), StandardDurationHours = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OperationDefinitions\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OperationStatuses\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), AllowTimeEntry = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OperationStatuses\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OrderFeeAmountTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderFeeAmountTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OrderLineCostType\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(max)\u0022, nullable: false), AffectsMetalInventory = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsCost = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderLineCostType\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OrderLineType\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), MovementSign = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderLineType\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OrderPaymentStatuses\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Position = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsFinal = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderPaymentStatuses\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022OrderStatusDefinitions\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Position = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), AllowsChanges = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsFinal = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderStatusDefinitions\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022PaymentTerms\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), DueDateDays = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_PaymentTerms\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022PaymentTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_PaymentTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022Permissions\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Module = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Permissions\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022ProductCategories\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), ParentId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductCategories\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductCategories_ProductCategories_ParentId\u0022, column: x =\u003E x.ParentId, principalTable: \u0022ProductCategories\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionOrderStatuses\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionOrderStatuses\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022ProductionRoutings\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(150)\u0022, maxLength: 150, nullable: false), TotalTimeHours = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionRoutings\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022ProductionTransactionTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsInventoryInflow = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionTransactionTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022RawMaterialTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_RawMaterialTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022RootTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), StockMovementSign = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_RootTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022RoutingPurposes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_RoutingPurposes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022ScrapTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ScrapTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022StockItemTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsTracked = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockItemTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022StockMovementTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Sign = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockMovementTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022StockUnitOfMeasures\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), DecimalPlaces = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockUnitOfMeasures\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022TaxRates\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), RatePercentage = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,2)\u0022, nullable: false), ValidFromDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_TaxRates\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022UomTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UomTypes\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022UserRoles\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsDefault = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UserRoles\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022WorkOrderStatuses\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), IsInProduction = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsEditable = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkOrderStatuses\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022AccountCharts\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(150)\u0022, maxLength: 150, nullable: false), ParentAccountId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), AccountTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsPostingAccount = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsMetalAccount = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_AccountCharts\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_AccountCharts_AccountCharts_ParentAccountId\u0022, column: x =\u003E x.ParentAccountId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_AccountCharts_AccountTypes_AccountTypeId\u0022, column: x =\u003E x.AccountTypeId, principalTable: \u0022AccountTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Countries\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(2)\u0022, maxLength: 2, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), HasPredefinedCityNames = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), DefaultCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Countries\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Countries_Currencies_DefaultCurrencyId\u0022, column: x =\u003E x.DefaultCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022PriceLists\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), ValidFrom = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), ValidTo = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), IsBasePriceList = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_PriceLists\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_PriceLists_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Products\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ProductCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(1000)\u0022, maxLength: 1000, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), StockUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ProductCategoryId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), DesignCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true), BrandId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Products\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Products_Brands_BrandId\u0022, column: x =\u003E x.BrandId, principalTable: \u0022Brands\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Products_ProductCategories_ProductCategoryId\u0022, column: x =\u003E x.ProductCategoryId, principalTable: \u0022ProductCategories\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Products_StockUnitOfMeasures_StockUnitId\u0022, column: x =\u003E x.StockUnitId, principalTable: \u0022StockUnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022UnitOfMeasures\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), UomTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BaseUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), ConversionFactor = table.Column\u003Cdecimal\u003E(type: \u0022decimal(10,5)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), UomTypeId1 = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UnitOfMeasures\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_UnitOfMeasures_UnitOfMeasures_BaseUnitId\u0022, column: x =\u003E x.BaseUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UnitOfMeasures_UomTypes_UomTypeId\u0022, column: x =\u003E x.UomTypeId, principalTable: \u0022UomTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UnitOfMeasures_UomTypes_UomTypeId1\u0022, column: x =\u003E x.UomTypeId1, principalTable: \u0022UomTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022UserRolePermissions\u0022, columns: table =\u003E new { UserRoleId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), PermissionId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UserRolePermissions\u0022, x =\u003E new { x.UserRoleId, x.PermissionId }); table.ForeignKey( name: \u0022FK_UserRolePermissions_Permissions_PermissionId\u0022, column: x =\u003E x.PermissionId, principalTable: \u0022Permissions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UserRolePermissions_UserRoles_UserRoleId\u0022, column: x =\u003E x.UserRoleId, principalTable: \u0022UserRoles\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderAdditionalFeeDefinitions\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Position = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), DefaultAccountingAccountId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderAdditionalFeeDefinitions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderAdditionalFeeDefinitions_AccountCharts_DefaultAccountingAccountId\u0022, column: x =\u003E x.DefaultAccountingAccountId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Cities\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: true), CountryId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Cities\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Cities_Countries_CountryId\u0022, column: x =\u003E x.CountryId, principalTable: \u0022Countries\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022BOMStoneTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: true), IsPrecious = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), BaseUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BOMStoneTypes\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_BOMStoneTypes_UnitOfMeasures_BaseUnitId\u0022, column: x =\u003E x.BaseUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022MetalTypes\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), BaseUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsPrecious = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_MetalTypes\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_MetalTypes_UnitOfMeasures_BaseUnitId\u0022, column: x =\u003E x.BaseUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022RawMaterials\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(150)\u0022, maxLength: 150, nullable: false), MaterialTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), UnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StandardCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), IsConsumable = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_RawMaterials\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_RawMaterials_RawMaterialTypes_MaterialTypeId\u0022, column: x =\u003E x.MaterialTypeId, principalTable: \u0022RawMaterialTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_RawMaterials_UnitOfMeasures_UnitId\u0022, column: x =\u003E x.UnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022MetalPurities\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), KaratValue = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), PurityRatio = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,4)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), BaseMetalId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_MetalPurities\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_MetalPurities_MetalTypes_BaseMetalId\u0022, column: x =\u003E x.BaseMetalId, principalTable: \u0022MetalTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductVariants\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ProductId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), SKU = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), MetalPurityId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), MetalColor = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Size = table.Column\u003Cdecimal\u003E(type: \u0022decimal(4,1)\u0022, nullable: true), BaseUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductVariants\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductVariants_MetalPurities_MetalPurityId\u0022, column: x =\u003E x.MetalPurityId, principalTable: \u0022MetalPurities\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductVariants_Products_ProductId\u0022, column: x =\u003E x.ProductId, principalTable: \u0022Products\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductVariants_UnitOfMeasures_BaseUnitId\u0022, column: x =\u003E x.BaseUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022StockItems\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ItemCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), StockItemTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BaseUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsMetalItem = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), MetalTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), MetalPurityId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockItems\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_StockItems_MetalPurities_MetalPurityId\u0022, column: x =\u003E x.MetalPurityId, principalTable: \u0022MetalPurities\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockItems_MetalTypes_MetalTypeId\u0022, column: x =\u003E x.MetalTypeId, principalTable: \u0022MetalTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockItems_StockItemTypes_StockItemTypeId\u0022, column: x =\u003E x.StockItemTypeId, principalTable: \u0022StockItemTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockItems_UnitOfMeasures_BaseUnitId\u0022, column: x =\u003E x.BaseUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022BillOfMaterials\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), RevisionNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), MetalWeightNet = table.Column\u003Cdecimal\u003E(type: \u0022decimal(8,3)\u0022, nullable: false), MetalLossRatio = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,4)\u0022, nullable: false), BOMTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TotalLeadTimeHours = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BillOfMaterials\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_BillOfMaterials_BOMTypes_BOMTypeId\u0022, column: x =\u003E x.BOMTypeId, principalTable: \u0022BOMTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BillOfMaterials_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductImages\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), ImageUrl = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: false), SortOrder = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), AltText = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), ImageTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductImages\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductImages_ImageTypes_ImageTypeId\u0022, column: x =\u003E x.ImageTypeId, principalTable: \u0022ImageTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductImages_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionRoutingItems\u0022, columns: table =\u003E new { ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), ProductionRoutingId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), RoutingPurposeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsDefault = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionRoutingItems\u0022, x =\u003E new { x.ProductVariantId, x.ProductionRoutingId }); table.ForeignKey( name: \u0022FK_ProductionRoutingItems_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionRoutingItems_ProductionRoutings_ProductionRoutingId\u0022, column: x =\u003E x.ProductionRoutingId, principalTable: \u0022ProductionRoutings\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionRoutingItems_RoutingPurposes_RoutingPurposeId\u0022, column: x =\u003E x.RoutingPurposeId, principalTable: \u0022RoutingPurposes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022SalePricingRules\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), PriceListId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Priority = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), RuleType = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), FixedPrice = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), CalculationValue = table.Column\u003Cdecimal\u003E(type: \u0022decimal(10,5)\u0022, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), ValidFrom = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), ValidTo = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_SalePricingRules\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_SalePricingRules_PriceLists_PriceListId\u0022, column: x =\u003E x.PriceListId, principalTable: \u0022PriceLists\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_SalePricingRules_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022UnitOfMeasureConversions\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), FromUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ToUnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ConversionRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,8)\u0022, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UnitOfMeasureConversions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_UnitOfMeasureConversions_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UnitOfMeasureConversions_UnitOfMeasures_FromUnitId\u0022, column: x =\u003E x.FromUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UnitOfMeasureConversions_UnitOfMeasures_ToUnitId\u0022, column: x =\u003E x.ToUnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022InventoryLevels\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), StockItemId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), MetalPurityId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), TotalMetalWeightGross = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), TotalMetalWeightNet = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), TotalCaratWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(10,4)\u0022, nullable: false), ValuationCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InventoryLevels\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_InventoryLevels_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryLevels_MetalPurities_MetalPurityId\u0022, column: x =\u003E x.MetalPurityId, principalTable: \u0022MetalPurities\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryLevels_StockItems_StockItemId\u0022, column: x =\u003E x.StockItemId, principalTable: \u0022StockItems\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022BOMLabors\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), BomId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LaborCostTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Quantity = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), UnitCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), BillOfMaterialsId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BOMLabors\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_BOMLabors_BOMCostTypes_LaborCostTypeId\u0022, column: x =\u003E x.LaborCostTypeId, principalTable: \u0022BOMCostTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BOMLabors_BillOfMaterials_BillOfMaterialsId\u0022, column: x =\u003E x.BillOfMaterialsId, principalTable: \u0022BillOfMaterials\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BOMLabors_BillOfMaterials_BomId\u0022, column: x =\u003E x.BomId, principalTable: \u0022BillOfMaterials\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022BOMStones\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), BomId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), StoneTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StoneSize = table.Column\u003Cdecimal\u003E(type: \u0022decimal(4,2)\u0022, nullable: false), Quantity = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), CaratTotal = table.Column\u003Cdecimal\u003E(type: \u0022decimal(8,4)\u0022, nullable: false), CostPerCarat = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BOMStones\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_BOMStones_BOMStoneTypes_StoneTypeId\u0022, column: x =\u003E x.StoneTypeId, principalTable: \u0022BOMStoneTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BOMStones_BillOfMaterials_BomId\u0022, column: x =\u003E x.BomId, principalTable: \u0022BillOfMaterials\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022AccountingJournalEntries\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), EntryNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), EntryDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true), IsPosted = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), ReferenceDocumentId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), ReferenceDocumentType = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_AccountingJournalEntries\u0022, x =\u003E x.Id); }); migrationBuilder.CreateTable( name: \u0022AccountingJournalEntryLines\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), EntryId = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false), LineNumber = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), AccountId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Description = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), DebitAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), CreditAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), BaseCurrencyDebit = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), BaseCurrencyCredit = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_AccountingJournalEntryLines\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_AccountingJournalEntryLines_AccountCharts_AccountId\u0022, column: x =\u003E x.AccountId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_AccountingJournalEntryLines_AccountingJournalEntries_EntryId\u0022, column: x =\u003E x.EntryId, principalTable: \u0022AccountingJournalEntries\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_AccountingJournalEntryLines_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Payments\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), PaymentNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), PaymentDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), IsIncoming = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), PaymentTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Amount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), AccountId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), JournalEntryId = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false), ReferenceDocumentId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), ReferenceDocumentType = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Payments\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Payments_AccountCharts_AccountId\u0022, column: x =\u003E x.AccountId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Payments_AccountingJournalEntries_JournalEntryId\u0022, column: x =\u003E x.JournalEntryId, principalTable: \u0022AccountingJournalEntries\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Payments_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Payments_PaymentTypes_PaymentTypeId\u0022, column: x =\u003E x.PaymentTypeId, principalTable: \u0022PaymentTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Banks\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), AccountHolderName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Iban = table.Column\u003Cstring\u003E(type: \u0022nvarchar(34)\u0022, maxLength: 34, nullable: false), SwiftCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(11)\u0022, maxLength: 11, nullable: true), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), AccountChartId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Banks\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Banks_AccountCharts_AccountChartId\u0022, column: x =\u003E x.AccountChartId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Banks_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Branches\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsSalesPoint = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), OwnCompanyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), AddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), DefaultCashLocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), DefaultMetalLocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Branches\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Branches_Locations_DefaultCashLocationId\u0022, column: x =\u003E x.DefaultCashLocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Branches_Locations_DefaultMetalLocationId\u0022, column: x =\u003E x.DefaultMetalLocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022BranchLocations\u0022, columns: table =\u003E new { BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), LocationId1 = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_BranchLocations\u0022, x =\u003E new { x.BranchId, x.LocationId }); table.ForeignKey( name: \u0022FK_BranchLocations_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BranchLocations_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_BranchLocations_Locations_LocationId1\u0022, column: x =\u003E x.LocationId1, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022CashRegisters\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), AccountChartId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), CurrentBalance = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,2)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_CashRegisters\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_CashRegisters_AccountCharts_AccountChartId\u0022, column: x =\u003E x.AccountChartId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_CashRegisters_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_CashRegisters_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Employees\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), FirstName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), LastName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), EmployeeCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: true), PrimaryBranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Department = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: true), JobTitle = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), HireDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), Email = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Employees\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Employees_Branches_PrimaryBranchId\u0022, column: x =\u003E x.PrimaryBranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionOrders\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), StatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BomId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), RoutingId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ScheduledStartDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), ScheduledEndDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), ActualStartDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), ActualEndDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionOrders\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductionOrders_BillOfMaterials_BomId\u0022, column: x =\u003E x.BomId, principalTable: \u0022BillOfMaterials\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionOrders_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionOrders_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionOrders_ProductionOrderStatuses_StatusId\u0022, column: x =\u003E x.StatusId, principalTable: \u0022ProductionOrderStatuses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionOrders_ProductionRoutings_RoutingId\u0022, column: x =\u003E x.RoutingId, principalTable: \u0022ProductionRoutings\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionWorkCenters\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CapacityPerShift = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionWorkCenters\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductionWorkCenters_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022RefiningProcesses\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), ProcessDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), MetalCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), InputWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), InputKaratId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OutputWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), OutputKaratId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), LossWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_RefiningProcesses\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_RefiningProcesses_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_RefiningProcesses_Currencies_MetalCurrencyId\u0022, column: x =\u003E x.MetalCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_RefiningProcesses_Karats_InputKaratId\u0022, column: x =\u003E x.InputKaratId, principalTable: \u0022Karats\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_RefiningProcesses_Karats_OutputKaratId\u0022, column: x =\u003E x.OutputKaratId, principalTable: \u0022Karats\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Users\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Username = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Email = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), FirstName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), LastName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), PasswordHash = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), DefaultCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), PrimaryBranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), UserRoleId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), LastLogin = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Users\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Users_Branches_PrimaryBranchId\u0022, column: x =\u003E x.PrimaryBranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Users_Currencies_DefaultCurrencyId\u0022, column: x =\u003E x.DefaultCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Users_UserRoles_UserRoleId\u0022, column: x =\u003E x.UserRoleId, principalTable: \u0022UserRoles\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022WorkCenters\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsMachine = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), HourlyCostRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkCenters\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_WorkCenters_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ScrapTransactions\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), TransactionDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), MetalCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ScrapTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), KaratId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), WeightGrams = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), RelatedOrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ScrapTransactions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ScrapTransactions_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ScrapTransactions_Currencies_MetalCurrencyId\u0022, column: x =\u003E x.MetalCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ScrapTransactions_Karats_KaratId\u0022, column: x =\u003E x.KaratId, principalTable: \u0022Karats\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ScrapTransactions_ProductionOrders_RelatedOrderId\u0022, column: x =\u003E x.RelatedOrderId, principalTable: \u0022ProductionOrders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ScrapTransactions_ScrapTypes_ScrapTypeId\u0022, column: x =\u003E x.ScrapTypeId, principalTable: \u0022ScrapTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionRoutingSteps\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), RoutingId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Sequence = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), WorkCenterId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TimeRequiredHours = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,2)\u0022, nullable: false), CostPerHour = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), IsInspectionStep = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Instructions = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionRoutingSteps\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductionRoutingSteps_ProductionRoutings_RoutingId\u0022, column: x =\u003E x.RoutingId, principalTable: \u0022ProductionRoutings\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionRoutingSteps_ProductionWorkCenters_WorkCenterId\u0022, column: x =\u003E x.WorkCenterId, principalTable: \u0022ProductionWorkCenters\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022UserBranchAccesses\u0022, columns: table =\u003E new { UserId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CanWrite = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_UserBranchAccesses\u0022, x =\u003E new { x.UserId, x.BranchId }); table.ForeignKey( name: \u0022FK_UserBranchAccesses_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_UserBranchAccesses_Users_UserId\u0022, column: x =\u003E x.UserId, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022WorkCenterOperations\u0022, columns: table =\u003E new { WorkCenterId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OperationDefinitionId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OverrideCostRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), OperationDefinitionId1 = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkCenterOperations\u0022, x =\u003E new { x.WorkCenterId, x.OperationDefinitionId }); table.ForeignKey( name: \u0022FK_WorkCenterOperations_OperationDefinitions_OperationDefinitionId\u0022, column: x =\u003E x.OperationDefinitionId, principalTable: \u0022OperationDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkCenterOperations_OperationDefinitions_OperationDefinitionId1\u0022, column: x =\u003E x.OperationDefinitionId1, principalTable: \u0022OperationDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkCenterOperations_WorkCenters_WorkCenterId\u0022, column: x =\u003E x.WorkCenterId, principalTable: \u0022WorkCenters\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022ProductionTransactions\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), RoutingStepId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), TransactionTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TransactionDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), ProductionOrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), UnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_ProductionTransactions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_ProductionTransactions_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionTransactions_ProductionOrders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022ProductionOrders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionTransactions_ProductionOrders_ProductionOrderId\u0022, column: x =\u003E x.ProductionOrderId, principalTable: \u0022ProductionOrders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionTransactions_ProductionRoutingSteps_RoutingStepId\u0022, column: x =\u003E x.RoutingStepId, principalTable: \u0022ProductionRoutingSteps\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionTransactions_ProductionTransactionTypes_TransactionTypeId\u0022, column: x =\u003E x.TransactionTypeId, principalTable: \u0022ProductionTransactionTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_ProductionTransactions_UnitOfMeasures_UnitId\u0022, column: x =\u003E x.UnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022CustomerMetalAccounts\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), MetalCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BalanceInGrams = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), LastUpdated = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_CustomerMetalAccounts\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_CustomerMetalAccounts_Currencies_MetalCurrencyId\u0022, column: x =\u003E x.MetalCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022CustomerMetalAccountTransactions\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), TransactionDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), MetalCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TransactionTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), WeightGrams = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), RelatedDocumentId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_CustomerMetalAccountTransactions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_CustomerMetalAccountTransactions_Currencies_MetalCurrencyId\u0022, column: x =\u003E x.MetalCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_CustomerMetalAccountTransactions_CustomerMetalAccountTransactionTypes_TransactionTypeId\u0022, column: x =\u003E x.TransactionTypeId, principalTable: \u0022CustomerMetalAccountTransactionTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Customers\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), PartnerCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsSupplier = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsB2BPartner = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), IsCustomer = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), TaxNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: true), DefaultCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), PaymentTermId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), ShippingAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), BillingAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Customers\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Customers_Currencies_DefaultCurrencyId\u0022, column: x =\u003E x.DefaultCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Customers_PaymentTerms_PaymentTermId\u0022, column: x =\u003E x.PaymentTermId, principalTable: \u0022PaymentTerms\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Invoices\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), RootTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), InvoiceNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), InvoiceDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), RelatedOrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), JournalEntryId = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), InvoiceStatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ExchangeRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,8)\u0022, nullable: false), TotalAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Invoices\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Invoices_AccountingJournalEntries_JournalEntryId\u0022, column: x =\u003E x.JournalEntryId, principalTable: \u0022AccountingJournalEntries\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Invoices_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Invoices_Customers_CustomerId\u0022, column: x =\u003E x.CustomerId, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Invoices_InvoiceStatuses_InvoiceStatusId\u0022, column: x =\u003E x.InvoiceStatusId, principalTable: \u0022InvoiceStatuses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Invoices_RootTypes_RootTypeId\u0022, column: x =\u003E x.RootTypeId, principalTable: \u0022RootTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022MailingAddresses\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), Address1 = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Address2 = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), ZipCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: true), CityId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), CountryId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), FirstName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), LastName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), CompanyName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), Phone = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true), IsPrimary = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_MailingAddresses\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_MailingAddresses_Cities_CityId\u0022, column: x =\u003E x.CityId, principalTable: \u0022Cities\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_MailingAddresses_Countries_CountryId\u0022, column: x =\u003E x.CountryId, principalTable: \u0022Countries\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_MailingAddresses_Customers_CustomerId\u0022, column: x =\u003E x.CustomerId, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022Orders\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), OrderDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), RequiredDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), ExpectedDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), DeliveryDateTarget = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OrderPaymentStatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), InvoiceId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CreatedById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), UpdatedById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), UpdatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), ClosedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), TaxesIncluded = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Note = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), ShippingAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), BillingAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), RootTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Tags = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_Orders\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_Orders_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_Customers_CustomerId\u0022, column: x =\u003E x.CustomerId, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_Invoices_InvoiceId\u0022, column: x =\u003E x.InvoiceId, principalTable: \u0022Invoices\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_MailingAddresses_BillingAddressId\u0022, column: x =\u003E x.BillingAddressId, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_MailingAddresses_ShippingAddressId\u0022, column: x =\u003E x.ShippingAddressId, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_OrderPaymentStatuses_OrderPaymentStatusId\u0022, column: x =\u003E x.OrderPaymentStatusId, principalTable: \u0022OrderPaymentStatuses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_OrderStatusDefinitions_StatusId\u0022, column: x =\u003E x.StatusId, principalTable: \u0022OrderStatusDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_RootTypes_RootTypeId\u0022, column: x =\u003E x.RootTypeId, principalTable: \u0022RootTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_Users_CreatedById\u0022, column: x =\u003E x.CreatedById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_Orders_Users_UpdatedById\u0022, column: x =\u003E x.UpdatedById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OwnCompanies\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), LegalName = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), TaxOffice = table.Column\u003Cstring\u003E(type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: false), TaxNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), BaseCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), LegalAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OwnCompanies\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OwnCompanies_Currencies_BaseCurrencyId\u0022, column: x =\u003E x.BaseCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OwnCompanies_MailingAddresses_LegalAddressId\u0022, column: x =\u003E x.LegalAddressId, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022InventoryTransactions\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), MovementDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), StockItemId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TransactionTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), MetalWeightGross = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), MetalWeightNet = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), CaratWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(10,4)\u0022, nullable: false), UnitCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), SourceOrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InventoryTransactions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_InventoryTransactions_InventoryTransactionTypes_TransactionTypeId\u0022, column: x =\u003E x.TransactionTypeId, principalTable: \u0022InventoryTransactionTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryTransactions_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryTransactions_Orders_SourceOrderId\u0022, column: x =\u003E x.SourceOrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryTransactions_StockItems_StockItemId\u0022, column: x =\u003E x.StockItemId, principalTable: \u0022StockItems\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderAdditionalFees\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), AdditionalFeeDefinitionId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: false), Amount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), AmountTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TaxRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(5,4)\u0022, nullable: false), IsTaxIncluded = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), AccountingAccountId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderAdditionalFees\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderAdditionalFees_AccountCharts_AccountingAccountId\u0022, column: x =\u003E x.AccountingAccountId, principalTable: \u0022AccountCharts\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderAdditionalFees_OrderAdditionalFeeDefinitions_AdditionalFeeDefinitionId\u0022, column: x =\u003E x.AdditionalFeeDefinitionId, principalTable: \u0022OrderAdditionalFeeDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderAdditionalFees_OrderFeeAmountTypes_AmountTypeId\u0022, column: x =\u003E x.AmountTypeId, principalTable: \u0022OrderFeeAmountTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderAdditionalFees_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderFulfillments\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(20)\u0022, maxLength: 20, nullable: false), CreatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), StatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Quantity = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ShippingAddressId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CargoId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), TrackingNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), CashOnDeliveryPrice = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), PackageControlledAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), PackageControlledById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderFulfillments\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderFulfillments_Cargos_CargoId\u0022, column: x =\u003E x.CargoId, principalTable: \u0022Cargos\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderFulfillments_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderFulfillments_MailingAddresses_ShippingAddressId\u0022, column: x =\u003E x.ShippingAddressId, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderFulfillments_OrderStatusDefinitions_StatusId\u0022, column: x =\u003E x.StatusId, principalTable: \u0022OrderStatusDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderFulfillments_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderFulfillments_Users_PackageControlledById\u0022, column: x =\u003E x.PackageControlledById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderLines\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LineTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), RootTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), LineStatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), StockQuantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), CustomerCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StockCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), FixedExchangeRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,8)\u0022, nullable: false), UnitPrice = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), Amount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), CustomerAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), LineNote = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderLines\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderLines_Currencies_CustomerCurrencyId\u0022, column: x =\u003E x.CustomerCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_Currencies_StockCurrencyId\u0022, column: x =\u003E x.StockCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_OrderLineType_LineTypeId\u0022, column: x =\u003E x.LineTypeId, principalTable: \u0022OrderLineType\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_OrderStatusDefinitions_LineStatusId\u0022, column: x =\u003E x.LineStatusId, principalTable: \u0022OrderStatusDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLines_RootTypes_RootTypeId\u0022, column: x =\u003E x.RootTypeId, principalTable: \u0022RootTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderMetalSummaries\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), CustomerCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TotalWeightOrAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), TotalCaratWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(10,4)\u0022, nullable: false), OrderId1 = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderMetalSummaries\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderMetalSummaries_Currencies_CustomerCurrencyId\u0022, column: x =\u003E x.CustomerCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderMetalSummaries_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderMetalSummaries_Orders_OrderId1\u0022, column: x =\u003E x.OrderId1, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderPaymentLines\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), Amount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), BankId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CashId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CustomerId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), Date = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), CreatedById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TransactionNr = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), Note = table.Column\u003Cstring\u003E(type: \u0022nvarchar(255)\u0022, maxLength: 255, nullable: true), OrderId1 = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderPaymentLines\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Banks_BankId\u0022, column: x =\u003E x.BankId, principalTable: \u0022Banks\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_CashRegisters_CashId\u0022, column: x =\u003E x.CashId, principalTable: \u0022CashRegisters\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Customers_CustomerId\u0022, column: x =\u003E x.CustomerId, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Orders_OrderId1\u0022, column: x =\u003E x.OrderId1, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderPaymentLines_Users_CreatedById\u0022, column: x =\u003E x.CreatedById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderTaxLines\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), ShopTaxBaseAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), PresentmentTaxBaseAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), ShopTaxAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), PresentmentTaxAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), Rate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(9,3)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderTaxLines\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderTaxLines_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022WorkOrders\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), WorkOrderNumber = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), CreatedDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), DueDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), OrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), StatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CreatedById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,2)\u0022, nullable: false), TargetMetalWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), IssuedMetalWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), CalculatedScrapWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkOrders\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_WorkOrders_Orders_OrderId\u0022, column: x =\u003E x.OrderId, principalTable: \u0022Orders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrders_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrders_Users_CreatedById\u0022, column: x =\u003E x.CreatedById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrders_WorkOrderStatuses_StatusId\u0022, column: x =\u003E x.StatusId, principalTable: \u0022WorkOrderStatuses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022InventoryCosts\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), StockItemId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), OrderLineId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), MetalCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), WorkmanshipCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), OtherCosts = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), TotalUnitCost = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), CalculatedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InventoryCosts\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_InventoryCosts_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryCosts_OrderLines_OrderLineId\u0022, column: x =\u003E x.OrderLineId, principalTable: \u0022OrderLines\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InventoryCosts_StockItems_StockItemId\u0022, column: x =\u003E x.StockItemId, principalTable: \u0022StockItems\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022InvoiceLines\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), InvoiceId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), LineNumber = table.Column\u003Cshort\u003E(type: \u0022smallint\u0022, nullable: false), ProductVariantId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), UnitId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Quantity = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), UnitPrice = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), DiscountAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), LineAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(18,4)\u0022, nullable: false), TaxRateId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OrderLineId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_InvoiceLines\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_InvoiceLines_Invoices_InvoiceId\u0022, column: x =\u003E x.InvoiceId, principalTable: \u0022Invoices\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InvoiceLines_OrderLines_OrderLineId\u0022, column: x =\u003E x.OrderLineId, principalTable: \u0022OrderLines\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InvoiceLines_ProductVariants_ProductVariantId\u0022, column: x =\u003E x.ProductVariantId, principalTable: \u0022ProductVariants\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InvoiceLines_TaxRates_TaxRateId\u0022, column: x =\u003E x.TaxRateId, principalTable: \u0022TaxRates\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_InvoiceLines_UnitOfMeasures_UnitId\u0022, column: x =\u003E x.UnitId, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022OrderLineCost\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OrderLineId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), OrderLineCostTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Fineness = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), Amount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), CustomerRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,8)\u0022, nullable: true), CustomerAmount = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: true), CurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), OrderLineId1 = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_OrderLineCost\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_OrderLineCost_Currencies_CurrencyId\u0022, column: x =\u003E x.CurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLineCost_OrderLineCostType_OrderLineCostTypeId\u0022, column: x =\u003E x.OrderLineCostTypeId, principalTable: \u0022OrderLineCostType\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLineCost_OrderLines_OrderLineId\u0022, column: x =\u003E x.OrderLineId, principalTable: \u0022OrderLines\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_OrderLineCost_OrderLines_OrderLineId1\u0022, column: x =\u003E x.OrderLineId1, principalTable: \u0022OrderLines\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022StockTransactions\u0022, columns: table =\u003E new { Id = table.Column\u003Clong\u003E(type: \u0022bigint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), MovementTypeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), TransactionDate = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), SourceOrderLineId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true), ReferenceDocType = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: true), BranchId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), LocationId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), MetalCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), MetalPurityId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: true), Fineness = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), WeightInGrams = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), BaseExchangeCurrencyId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), CostPerGramEUR = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), FixedExchangeRate = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,8)\u0022, nullable: false), CreatedById = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockTransactions\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_StockTransactions_Branches_BranchId\u0022, column: x =\u003E x.BranchId, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_Currencies_BaseExchangeCurrencyId\u0022, column: x =\u003E x.BaseExchangeCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_Currencies_MetalCurrencyId\u0022, column: x =\u003E x.MetalCurrencyId, principalTable: \u0022Currencies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_Locations_LocationId\u0022, column: x =\u003E x.LocationId, principalTable: \u0022Locations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_MetalPurities_MetalPurityId\u0022, column: x =\u003E x.MetalPurityId, principalTable: \u0022MetalPurities\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_OrderLines_SourceOrderLineId\u0022, column: x =\u003E x.SourceOrderLineId, principalTable: \u0022OrderLines\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_StockMovementTypes_MovementTypeId\u0022, column: x =\u003E x.MovementTypeId, principalTable: \u0022StockMovementTypes\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_StockTransactions_Users_CreatedById\u0022, column: x =\u003E x.CreatedById, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022WorkOrderOperations\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), WorkOrderId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), OperationDefinitionId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), WorkCenterId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StatusId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), SequenceNumber = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), AssignedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), StartedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), CompletedAt = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), MetalInputWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), MetalOutputWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), ScrapWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkOrderOperations\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_WorkOrderOperations_OperationDefinitions_OperationDefinitionId\u0022, column: x =\u003E x.OperationDefinitionId, principalTable: \u0022OperationDefinitions\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrderOperations_OperationStatuses_StatusId\u0022, column: x =\u003E x.StatusId, principalTable: \u0022OperationStatuses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrderOperations_WorkCenters_WorkCenterId\u0022, column: x =\u003E x.WorkCenterId, principalTable: \u0022WorkCenters\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrderOperations_WorkOrders_WorkOrderId\u0022, column: x =\u003E x.WorkOrderId, principalTable: \u0022WorkOrders\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.CreateTable( name: \u0022WorkOrderOperationLogs\u0022, columns: table =\u003E new { Id = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), OperationId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), EmployeeId = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), StartTime = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: false), EndTime = table.Column\u003CDateTimeOffset\u003E(type: \u0022datetimeoffset\u0022, nullable: true), DurationMinutes = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: false), MetalAdjustmentWeight = table.Column\u003Cdecimal\u003E(type: \u0022decimal(19,4)\u0022, nullable: false), AdjustmentType = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: true), Notes = table.Column\u003Cstring\u003E(type: \u0022nvarchar(500)\u0022, maxLength: 500, nullable: true), WorkOrderOperationId = table.Column\u003Cint\u003E(type: \u0022int\u0022, nullable: true) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_WorkOrderOperationLogs\u0022, x =\u003E x.Id); table.ForeignKey( name: \u0022FK_WorkOrderOperationLogs_Users_EmployeeId\u0022, column: x =\u003E x.EmployeeId, principalTable: \u0022Users\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrderOperationLogs_WorkOrderOperations_OperationId\u0022, column: x =\u003E x.OperationId, principalTable: \u0022WorkOrderOperations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); table.ForeignKey( name: \u0022FK_WorkOrderOperationLogs_WorkOrderOperations_WorkOrderOperationId\u0022, column: x =\u003E x.WorkOrderOperationId, principalTable: \u0022WorkOrderOperations\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); }); migrationBuilder.InsertData( table: \u0022UomTypes\u0022, columns: new[] { \u0022Id\u0022, \u0022Code\u0022, \u0022IsActive\u0022, \u0022Name\u0022 }, values: new object[,] { { (byte)1, \u0022WEIGHT\u0022, true, \u0022A\u011F\u0131rl\u0131k\u0022 }, { (byte)2, \u0022COUNT\u0022, true, \u0022Adet\u0022 }, { (byte)3, \u0022LENGTH\u0022, true, \u0022Uzunluk\u0022 }, { (byte)4, \u0022VOLUME\u0022, true, \u0022Hacim\u0022 } }); migrationBuilder.CreateIndex( name: \u0022IX_AccountCharts_AccountTypeId\u0022, table: \u0022AccountCharts\u0022, column: \u0022AccountTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_AccountCharts_ParentAccountId\u0022, table: \u0022AccountCharts\u0022, column: \u0022ParentAccountId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_AccountingJournalEntries_BranchId\u0022, table: \u0022AccountingJournalEntries\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_AccountingJournalEntryLines_AccountId\u0022, table: \u0022AccountingJournalEntryLines\u0022, column: \u0022AccountId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_AccountingJournalEntryLines_CurrencyId\u0022, table: \u0022AccountingJournalEntryLines\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_AccountingJournalEntryLines_EntryId\u0022, table: \u0022AccountingJournalEntryLines\u0022, column: \u0022EntryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Banks_AccountChartId\u0022, table: \u0022Banks\u0022, column: \u0022AccountChartId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Banks_BranchId\u0022, table: \u0022Banks\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Banks_CurrencyId\u0022, table: \u0022Banks\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Banks_CustomerId\u0022, table: \u0022Banks\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BillOfMaterials_BOMTypeId\u0022, table: \u0022BillOfMaterials\u0022, column: \u0022BOMTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BillOfMaterials_ProductVariantId\u0022, table: \u0022BillOfMaterials\u0022, column: \u0022ProductVariantId\u0022, unique: true); migrationBuilder.CreateIndex( name: \u0022IX_BOMLabors_BillOfMaterialsId\u0022, table: \u0022BOMLabors\u0022, column: \u0022BillOfMaterialsId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BOMLabors_BomId\u0022, table: \u0022BOMLabors\u0022, column: \u0022BomId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BOMLabors_LaborCostTypeId\u0022, table: \u0022BOMLabors\u0022, column: \u0022LaborCostTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BOMStones_BomId\u0022, table: \u0022BOMStones\u0022, column: \u0022BomId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BOMStones_StoneTypeId\u0022, table: \u0022BOMStones\u0022, column: \u0022StoneTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BOMStoneTypes_BaseUnitId\u0022, table: \u0022BOMStoneTypes\u0022, column: \u0022BaseUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Branches_AddressId\u0022, table: \u0022Branches\u0022, column: \u0022AddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Branches_DefaultCashLocationId\u0022, table: \u0022Branches\u0022, column: \u0022DefaultCashLocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Branches_DefaultMetalLocationId\u0022, table: \u0022Branches\u0022, column: \u0022DefaultMetalLocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Branches_OwnCompanyId\u0022, table: \u0022Branches\u0022, column: \u0022OwnCompanyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BranchLocations_LocationId\u0022, table: \u0022BranchLocations\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_BranchLocations_LocationId1\u0022, table: \u0022BranchLocations\u0022, column: \u0022LocationId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CashRegisters_AccountChartId\u0022, table: \u0022CashRegisters\u0022, column: \u0022AccountChartId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CashRegisters_BranchId\u0022, table: \u0022CashRegisters\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CashRegisters_CurrencyId\u0022, table: \u0022CashRegisters\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Cities_CountryId\u0022, table: \u0022Cities\u0022, column: \u0022CountryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Countries_DefaultCurrencyId\u0022, table: \u0022Countries\u0022, column: \u0022DefaultCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CustomerMetalAccounts_CustomerId\u0022, table: \u0022CustomerMetalAccounts\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CustomerMetalAccounts_MetalCurrencyId\u0022, table: \u0022CustomerMetalAccounts\u0022, column: \u0022MetalCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CustomerMetalAccountTransactions_CustomerId\u0022, table: \u0022CustomerMetalAccountTransactions\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CustomerMetalAccountTransactions_MetalCurrencyId\u0022, table: \u0022CustomerMetalAccountTransactions\u0022, column: \u0022MetalCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_CustomerMetalAccountTransactions_TransactionTypeId\u0022, table: \u0022CustomerMetalAccountTransactions\u0022, column: \u0022TransactionTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Customers_BillingAddressId\u0022, table: \u0022Customers\u0022, column: \u0022BillingAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Customers_DefaultCurrencyId\u0022, table: \u0022Customers\u0022, column: \u0022DefaultCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Customers_PaymentTermId\u0022, table: \u0022Customers\u0022, column: \u0022PaymentTermId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Customers_ShippingAddressId\u0022, table: \u0022Customers\u0022, column: \u0022ShippingAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Employees_PrimaryBranchId\u0022, table: \u0022Employees\u0022, column: \u0022PrimaryBranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryCosts_CurrencyId\u0022, table: \u0022InventoryCosts\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryCosts_OrderLineId\u0022, table: \u0022InventoryCosts\u0022, column: \u0022OrderLineId\u0022, unique: true, filter: \u0022[OrderLineId] IS NOT NULL\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryCosts_StockItemId\u0022, table: \u0022InventoryCosts\u0022, column: \u0022StockItemId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryLevels_LocationId\u0022, table: \u0022InventoryLevels\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryLevels_MetalPurityId\u0022, table: \u0022InventoryLevels\u0022, column: \u0022MetalPurityId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryLevels_StockItemId\u0022, table: \u0022InventoryLevels\u0022, column: \u0022StockItemId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryTransactions_LocationId\u0022, table: \u0022InventoryTransactions\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryTransactions_SourceOrderId\u0022, table: \u0022InventoryTransactions\u0022, column: \u0022SourceOrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryTransactions_StockItemId\u0022, table: \u0022InventoryTransactions\u0022, column: \u0022StockItemId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InventoryTransactions_TransactionTypeId\u0022, table: \u0022InventoryTransactions\u0022, column: \u0022TransactionTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InvoiceLines_InvoiceId\u0022, table: \u0022InvoiceLines\u0022, column: \u0022InvoiceId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InvoiceLines_OrderLineId\u0022, table: \u0022InvoiceLines\u0022, column: \u0022OrderLineId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InvoiceLines_ProductVariantId\u0022, table: \u0022InvoiceLines\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InvoiceLines_TaxRateId\u0022, table: \u0022InvoiceLines\u0022, column: \u0022TaxRateId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_InvoiceLines_UnitId\u0022, table: \u0022InvoiceLines\u0022, column: \u0022UnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Invoices_CurrencyId\u0022, table: \u0022Invoices\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Invoices_CustomerId\u0022, table: \u0022Invoices\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Invoices_InvoiceStatusId\u0022, table: \u0022Invoices\u0022, column: \u0022InvoiceStatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Invoices_JournalEntryId\u0022, table: \u0022Invoices\u0022, column: \u0022JournalEntryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Invoices_RootTypeId\u0022, table: \u0022Invoices\u0022, column: \u0022RootTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_MailingAddresses_CityId\u0022, table: \u0022MailingAddresses\u0022, column: \u0022CityId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_MailingAddresses_CountryId\u0022, table: \u0022MailingAddresses\u0022, column: \u0022CountryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_MailingAddresses_CustomerId\u0022, table: \u0022MailingAddresses\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_MetalPurities_BaseMetalId\u0022, table: \u0022MetalPurities\u0022, column: \u0022BaseMetalId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_MetalTypes_BaseUnitId\u0022, table: \u0022MetalTypes\u0022, column: \u0022BaseUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderAdditionalFeeDefinitions_DefaultAccountingAccountId\u0022, table: \u0022OrderAdditionalFeeDefinitions\u0022, column: \u0022DefaultAccountingAccountId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderAdditionalFees_AccountingAccountId\u0022, table: \u0022OrderAdditionalFees\u0022, column: \u0022AccountingAccountId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderAdditionalFees_AdditionalFeeDefinitionId\u0022, table: \u0022OrderAdditionalFees\u0022, column: \u0022AdditionalFeeDefinitionId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderAdditionalFees_AmountTypeId\u0022, table: \u0022OrderAdditionalFees\u0022, column: \u0022AmountTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderAdditionalFees_OrderId\u0022, table: \u0022OrderAdditionalFees\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_CargoId\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022CargoId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_LocationId\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_OrderId\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_PackageControlledById\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022PackageControlledById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_ShippingAddressId\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022ShippingAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderFulfillments_StatusId\u0022, table: \u0022OrderFulfillments\u0022, column: \u0022StatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLineCost_CurrencyId\u0022, table: \u0022OrderLineCost\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLineCost_OrderLineCostTypeId\u0022, table: \u0022OrderLineCost\u0022, column: \u0022OrderLineCostTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLineCost_OrderLineId\u0022, table: \u0022OrderLineCost\u0022, column: \u0022OrderLineId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLineCost_OrderLineId1\u0022, table: \u0022OrderLineCost\u0022, column: \u0022OrderLineId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_CustomerCurrencyId\u0022, table: \u0022OrderLines\u0022, column: \u0022CustomerCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_LineStatusId\u0022, table: \u0022OrderLines\u0022, column: \u0022LineStatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_LineTypeId\u0022, table: \u0022OrderLines\u0022, column: \u0022LineTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_LocationId\u0022, table: \u0022OrderLines\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_OrderId\u0022, table: \u0022OrderLines\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_ProductVariantId\u0022, table: \u0022OrderLines\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_RootTypeId\u0022, table: \u0022OrderLines\u0022, column: \u0022RootTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderLines_StockCurrencyId\u0022, table: \u0022OrderLines\u0022, column: \u0022StockCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderMetalSummaries_CustomerCurrencyId\u0022, table: \u0022OrderMetalSummaries\u0022, column: \u0022CustomerCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderMetalSummaries_OrderId\u0022, table: \u0022OrderMetalSummaries\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderMetalSummaries_OrderId1\u0022, table: \u0022OrderMetalSummaries\u0022, column: \u0022OrderId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_BankId\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022BankId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_CashId\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022CashId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_CreatedById\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022CreatedById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_CurrencyId\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_CustomerId\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_OrderId\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderPaymentLines_OrderId1\u0022, table: \u0022OrderPaymentLines\u0022, column: \u0022OrderId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_BillingAddressId\u0022, table: \u0022Orders\u0022, column: \u0022BillingAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_BranchId\u0022, table: \u0022Orders\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_CreatedById\u0022, table: \u0022Orders\u0022, column: \u0022CreatedById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_CurrencyId\u0022, table: \u0022Orders\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_CustomerId\u0022, table: \u0022Orders\u0022, column: \u0022CustomerId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_InvoiceId\u0022, table: \u0022Orders\u0022, column: \u0022InvoiceId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_OrderPaymentStatusId\u0022, table: \u0022Orders\u0022, column: \u0022OrderPaymentStatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_RootTypeId\u0022, table: \u0022Orders\u0022, column: \u0022RootTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_ShippingAddressId\u0022, table: \u0022Orders\u0022, column: \u0022ShippingAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_StatusId\u0022, table: \u0022Orders\u0022, column: \u0022StatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Orders_UpdatedById\u0022, table: \u0022Orders\u0022, column: \u0022UpdatedById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OrderTaxLines_OrderId\u0022, table: \u0022OrderTaxLines\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OwnCompanies_BaseCurrencyId\u0022, table: \u0022OwnCompanies\u0022, column: \u0022BaseCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_OwnCompanies_LegalAddressId\u0022, table: \u0022OwnCompanies\u0022, column: \u0022LegalAddressId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Payments_AccountId\u0022, table: \u0022Payments\u0022, column: \u0022AccountId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Payments_CurrencyId\u0022, table: \u0022Payments\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Payments_JournalEntryId\u0022, table: \u0022Payments\u0022, column: \u0022JournalEntryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Payments_PaymentTypeId\u0022, table: \u0022Payments\u0022, column: \u0022PaymentTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_PriceLists_CurrencyId\u0022, table: \u0022PriceLists\u0022, column: \u0022CurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductCategories_ParentId\u0022, table: \u0022ProductCategories\u0022, column: \u0022ParentId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductImages_ImageTypeId\u0022, table: \u0022ProductImages\u0022, column: \u0022ImageTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductImages_ProductVariantId\u0022, table: \u0022ProductImages\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionOrders_BomId\u0022, table: \u0022ProductionOrders\u0022, column: \u0022BomId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionOrders_BranchId\u0022, table: \u0022ProductionOrders\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionOrders_ProductVariantId\u0022, table: \u0022ProductionOrders\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionOrders_RoutingId\u0022, table: \u0022ProductionOrders\u0022, column: \u0022RoutingId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionOrders_StatusId\u0022, table: \u0022ProductionOrders\u0022, column: \u0022StatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionRoutingItems_ProductionRoutingId\u0022, table: \u0022ProductionRoutingItems\u0022, column: \u0022ProductionRoutingId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionRoutingItems_RoutingPurposeId\u0022, table: \u0022ProductionRoutingItems\u0022, column: \u0022RoutingPurposeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionRoutingSteps_RoutingId\u0022, table: \u0022ProductionRoutingSteps\u0022, column: \u0022RoutingId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionRoutingSteps_WorkCenterId\u0022, table: \u0022ProductionRoutingSteps\u0022, column: \u0022WorkCenterId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_OrderId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_ProductionOrderId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022ProductionOrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_ProductVariantId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_RoutingStepId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022RoutingStepId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_TransactionTypeId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022TransactionTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionTransactions_UnitId\u0022, table: \u0022ProductionTransactions\u0022, column: \u0022UnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductionWorkCenters_BranchId\u0022, table: \u0022ProductionWorkCenters\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Products_BrandId\u0022, table: \u0022Products\u0022, column: \u0022BrandId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Products_ProductCategoryId\u0022, table: \u0022Products\u0022, column: \u0022ProductCategoryId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Products_StockUnitId\u0022, table: \u0022Products\u0022, column: \u0022StockUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductVariants_BaseUnitId\u0022, table: \u0022ProductVariants\u0022, column: \u0022BaseUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductVariants_MetalPurityId\u0022, table: \u0022ProductVariants\u0022, column: \u0022MetalPurityId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ProductVariants_ProductId\u0022, table: \u0022ProductVariants\u0022, column: \u0022ProductId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RawMaterials_MaterialTypeId\u0022, table: \u0022RawMaterials\u0022, column: \u0022MaterialTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RawMaterials_UnitId\u0022, table: \u0022RawMaterials\u0022, column: \u0022UnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RefiningProcesses_BranchId\u0022, table: \u0022RefiningProcesses\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RefiningProcesses_InputKaratId\u0022, table: \u0022RefiningProcesses\u0022, column: \u0022InputKaratId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RefiningProcesses_MetalCurrencyId\u0022, table: \u0022RefiningProcesses\u0022, column: \u0022MetalCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_RefiningProcesses_OutputKaratId\u0022, table: \u0022RefiningProcesses\u0022, column: \u0022OutputKaratId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_SalePricingRules_PriceListId\u0022, table: \u0022SalePricingRules\u0022, column: \u0022PriceListId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_SalePricingRules_ProductVariantId\u0022, table: \u0022SalePricingRules\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ScrapTransactions_BranchId\u0022, table: \u0022ScrapTransactions\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ScrapTransactions_KaratId\u0022, table: \u0022ScrapTransactions\u0022, column: \u0022KaratId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ScrapTransactions_MetalCurrencyId\u0022, table: \u0022ScrapTransactions\u0022, column: \u0022MetalCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ScrapTransactions_RelatedOrderId\u0022, table: \u0022ScrapTransactions\u0022, column: \u0022RelatedOrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_ScrapTransactions_ScrapTypeId\u0022, table: \u0022ScrapTransactions\u0022, column: \u0022ScrapTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockItems_BaseUnitId\u0022, table: \u0022StockItems\u0022, column: \u0022BaseUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockItems_MetalPurityId\u0022, table: \u0022StockItems\u0022, column: \u0022MetalPurityId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockItems_MetalTypeId\u0022, table: \u0022StockItems\u0022, column: \u0022MetalTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockItems_StockItemTypeId\u0022, table: \u0022StockItems\u0022, column: \u0022StockItemTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_BaseExchangeCurrencyId\u0022, table: \u0022StockTransactions\u0022, column: \u0022BaseExchangeCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_BranchId\u0022, table: \u0022StockTransactions\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_CreatedById\u0022, table: \u0022StockTransactions\u0022, column: \u0022CreatedById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_LocationId\u0022, table: \u0022StockTransactions\u0022, column: \u0022LocationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_MetalCurrencyId\u0022, table: \u0022StockTransactions\u0022, column: \u0022MetalCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_MetalPurityId\u0022, table: \u0022StockTransactions\u0022, column: \u0022MetalPurityId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_MovementTypeId\u0022, table: \u0022StockTransactions\u0022, column: \u0022MovementTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_StockTransactions_SourceOrderLineId\u0022, table: \u0022StockTransactions\u0022, column: \u0022SourceOrderLineId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasureConversions_FromUnitId\u0022, table: \u0022UnitOfMeasureConversions\u0022, column: \u0022FromUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasureConversions_ProductVariantId\u0022, table: \u0022UnitOfMeasureConversions\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasureConversions_ToUnitId\u0022, table: \u0022UnitOfMeasureConversions\u0022, column: \u0022ToUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasures_BaseUnitId\u0022, table: \u0022UnitOfMeasures\u0022, column: \u0022BaseUnitId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasures_UomTypeId\u0022, table: \u0022UnitOfMeasures\u0022, column: \u0022UomTypeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UnitOfMeasures_UomTypeId1\u0022, table: \u0022UnitOfMeasures\u0022, column: \u0022UomTypeId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UserBranchAccesses_BranchId\u0022, table: \u0022UserBranchAccesses\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_UserRolePermissions_PermissionId\u0022, table: \u0022UserRolePermissions\u0022, column: \u0022PermissionId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Users_DefaultCurrencyId\u0022, table: \u0022Users\u0022, column: \u0022DefaultCurrencyId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Users_PrimaryBranchId\u0022, table: \u0022Users\u0022, column: \u0022PrimaryBranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_Users_UserRoleId\u0022, table: \u0022Users\u0022, column: \u0022UserRoleId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkCenterOperations_OperationDefinitionId\u0022, table: \u0022WorkCenterOperations\u0022, column: \u0022OperationDefinitionId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkCenterOperations_OperationDefinitionId1\u0022, table: \u0022WorkCenterOperations\u0022, column: \u0022OperationDefinitionId1\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkCenters_BranchId\u0022, table: \u0022WorkCenters\u0022, column: \u0022BranchId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperationLogs_EmployeeId\u0022, table: \u0022WorkOrderOperationLogs\u0022, column: \u0022EmployeeId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperationLogs_OperationId\u0022, table: \u0022WorkOrderOperationLogs\u0022, column: \u0022OperationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperationLogs_WorkOrderOperationId\u0022, table: \u0022WorkOrderOperationLogs\u0022, column: \u0022WorkOrderOperationId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperations_OperationDefinitionId\u0022, table: \u0022WorkOrderOperations\u0022, column: \u0022OperationDefinitionId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperations_StatusId\u0022, table: \u0022WorkOrderOperations\u0022, column: \u0022StatusId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperations_WorkCenterId\u0022, table: \u0022WorkOrderOperations\u0022, column: \u0022WorkCenterId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrderOperations_WorkOrderId\u0022, table: \u0022WorkOrderOperations\u0022, column: \u0022WorkOrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrders_CreatedById\u0022, table: \u0022WorkOrders\u0022, column: \u0022CreatedById\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrders_OrderId\u0022, table: \u0022WorkOrders\u0022, column: \u0022OrderId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrders_ProductVariantId\u0022, table: \u0022WorkOrders\u0022, column: \u0022ProductVariantId\u0022); migrationBuilder.CreateIndex( name: \u0022IX_WorkOrders_StatusId\u0022, table: \u0022WorkOrders\u0022, column: \u0022StatusId\u0022); migrationBuilder.AddForeignKey( name: \u0022FK_AccountingJournalEntries_Branches_BranchId\u0022, table: \u0022AccountingJournalEntries\u0022, column: \u0022BranchId\u0022, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Banks_Branches_BranchId\u0022, table: \u0022Banks\u0022, column: \u0022BranchId\u0022, principalTable: \u0022Branches\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Banks_Customers_CustomerId\u0022, table: \u0022Banks\u0022, column: \u0022CustomerId\u0022, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Branches_MailingAddresses_AddressId\u0022, table: \u0022Branches\u0022, column: \u0022AddressId\u0022, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Branches_OwnCompanies_OwnCompanyId\u0022, table: \u0022Branches\u0022, column: \u0022OwnCompanyId\u0022, principalTable: \u0022OwnCompanies\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_CustomerMetalAccounts_Customers_CustomerId\u0022, table: \u0022CustomerMetalAccounts\u0022, column: \u0022CustomerId\u0022, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_CustomerMetalAccountTransactions_Customers_CustomerId\u0022, table: \u0022CustomerMetalAccountTransactions\u0022, column: \u0022CustomerId\u0022, principalTable: \u0022Customers\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Customers_MailingAddresses_BillingAddressId\u0022, table: \u0022Customers\u0022, column: \u0022BillingAddressId\u0022, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_Customers_MailingAddresses_ShippingAddressId\u0022, table: \u0022Customers\u0022, column: \u0022ShippingAddressId\u0022, principalTable: \u0022MailingAddresses\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); } protected override void Down(MigrationBuilder migrationBuilder) { migrationBuilder.DropForeignKey( name: \u0022FK_Countries_Currencies_DefaultCurrencyId\u0022, table: \u0022Countries\u0022); migrationBuilder.DropForeignKey( name: \u0022FK_Customers_Currencies_DefaultCurrencyId\u0022, table: \u0022Customers\u0022); migrationBuilder.DropForeignKey( name: \u0022FK_MailingAddresses_Customers_CustomerId\u0022, table: \u0022MailingAddresses\u0022); migrationBuilder.DropTable( name: \u0022AccountingJournalEntryLines\u0022); migrationBuilder.DropTable( name: \u0022BOMLabors\u0022); migrationBuilder.DropTable( name: \u0022BOMStones\u0022); migrationBuilder.DropTable( name: \u0022BranchLocations\u0022); migrationBuilder.DropTable( name: \u0022CustomerMetalAccounts\u0022); migrationBuilder.DropTable( name: \u0022CustomerMetalAccountTransactions\u0022); migrationBuilder.DropTable( name: \u0022DailyMetalRates\u0022); migrationBuilder.DropTable( name: \u0022Employees\u0022); migrationBuilder.DropTable( name: \u0022InventoryCosts\u0022); migrationBuilder.DropTable( name: \u0022InventoryLevels\u0022); migrationBuilder.DropTable( name: \u0022InventoryTransactions\u0022); migrationBuilder.DropTable( name: \u0022InvoiceLines\u0022); migrationBuilder.DropTable( name: \u0022OrderAdditionalFees\u0022); migrationBuilder.DropTable( name: \u0022OrderFulfillments\u0022); migrationBuilder.DropTable( name: \u0022OrderLineCost\u0022); migrationBuilder.DropTable( name: \u0022OrderMetalSummaries\u0022); migrationBuilder.DropTable( name: \u0022OrderPaymentLines\u0022); migrationBuilder.DropTable( name: \u0022OrderTaxLines\u0022); migrationBuilder.DropTable( name: \u0022Payments\u0022); migrationBuilder.DropTable( name: \u0022ProductImages\u0022); migrationBuilder.DropTable( name: \u0022ProductionRoutingItems\u0022); migrationBuilder.DropTable( name: \u0022ProductionTransactions\u0022); migrationBuilder.DropTable( name: \u0022RawMaterials\u0022); migrationBuilder.DropTable( name: \u0022RefiningProcesses\u0022); migrationBuilder.DropTable( name: \u0022SalePricingRules\u0022); migrationBuilder.DropTable( name: \u0022ScrapTransactions\u0022); migrationBuilder.DropTable( name: \u0022StockTransactions\u0022); migrationBuilder.DropTable( name: \u0022UnitOfMeasureConversions\u0022); migrationBuilder.DropTable( name: \u0022UserBranchAccesses\u0022); migrationBuilder.DropTable( name: \u0022UserRolePermissions\u0022); migrationBuilder.DropTable( name: \u0022WorkCenterOperations\u0022); migrationBuilder.DropTable( name: \u0022WorkOrderOperationLogs\u0022); migrationBuilder.DropTable( name: \u0022BOMCostTypes\u0022); migrationBuilder.DropTable( name: \u0022BOMStoneTypes\u0022); migrationBuilder.DropTable( name: \u0022CustomerMetalAccountTransactionTypes\u0022); migrationBuilder.DropTable( name: \u0022InventoryTransactionTypes\u0022); migrationBuilder.DropTable( name: \u0022StockItems\u0022); migrationBuilder.DropTable( name: \u0022TaxRates\u0022); migrationBuilder.DropTable( name: \u0022OrderAdditionalFeeDefinitions\u0022); migrationBuilder.DropTable( name: \u0022OrderFeeAmountTypes\u0022); migrationBuilder.DropTable( name: \u0022Cargos\u0022); migrationBuilder.DropTable( name: \u0022OrderLineCostType\u0022); migrationBuilder.DropTable( name: \u0022Banks\u0022); migrationBuilder.DropTable( name: \u0022CashRegisters\u0022); migrationBuilder.DropTable( name: \u0022PaymentTypes\u0022); migrationBuilder.DropTable( name: \u0022ImageTypes\u0022); migrationBuilder.DropTable( name: \u0022RoutingPurposes\u0022); migrationBuilder.DropTable( name: \u0022ProductionRoutingSteps\u0022); migrationBuilder.DropTable( name: \u0022ProductionTransactionTypes\u0022); migrationBuilder.DropTable( name: \u0022RawMaterialTypes\u0022); migrationBuilder.DropTable( name: \u0022PriceLists\u0022); migrationBuilder.DropTable( name: \u0022Karats\u0022); migrationBuilder.DropTable( name: \u0022ProductionOrders\u0022); migrationBuilder.DropTable( name: \u0022ScrapTypes\u0022); migrationBuilder.DropTable( name: \u0022OrderLines\u0022); migrationBuilder.DropTable( name: \u0022StockMovementTypes\u0022); migrationBuilder.DropTable( name: \u0022Permissions\u0022); migrationBuilder.DropTable( name: \u0022WorkOrderOperations\u0022); migrationBuilder.DropTable( name: \u0022StockItemTypes\u0022); migrationBuilder.DropTable( name: \u0022AccountCharts\u0022); migrationBuilder.DropTable( name: \u0022ProductionWorkCenters\u0022); migrationBuilder.DropTable( name: \u0022BillOfMaterials\u0022); migrationBuilder.DropTable( name: \u0022ProductionOrderStatuses\u0022); migrationBuilder.DropTable( name: \u0022ProductionRoutings\u0022); migrationBuilder.DropTable( name: \u0022OrderLineType\u0022); migrationBuilder.DropTable( name: \u0022OperationDefinitions\u0022); migrationBuilder.DropTable( name: \u0022OperationStatuses\u0022); migrationBuilder.DropTable( name: \u0022WorkCenters\u0022); migrationBuilder.DropTable( name: \u0022WorkOrders\u0022); migrationBuilder.DropTable( name: \u0022AccountTypes\u0022); migrationBuilder.DropTable( name: \u0022BOMTypes\u0022); migrationBuilder.DropTable( name: \u0022Orders\u0022); migrationBuilder.DropTable( name: \u0022ProductVariants\u0022); migrationBuilder.DropTable( name: \u0022WorkOrderStatuses\u0022); migrationBuilder.DropTable( name: \u0022Invoices\u0022); migrationBuilder.DropTable( name: \u0022OrderPaymentStatuses\u0022); migrationBuilder.DropTable( name: \u0022OrderStatusDefinitions\u0022); migrationBuilder.DropTable( name: \u0022Users\u0022); migrationBuilder.DropTable( name: \u0022MetalPurities\u0022); migrationBuilder.DropTable( name: \u0022Products\u0022); migrationBuilder.DropTable( name: \u0022AccountingJournalEntries\u0022); migrationBuilder.DropTable( name: \u0022InvoiceStatuses\u0022); migrationBuilder.DropTable( name: \u0022RootTypes\u0022); migrationBuilder.DropTable( name: \u0022UserRoles\u0022); migrationBuilder.DropTable( name: \u0022MetalTypes\u0022); migrationBuilder.DropTable( name: \u0022Brands\u0022); migrationBuilder.DropTable( name: \u0022ProductCategories\u0022); migrationBuilder.DropTable( name: \u0022StockUnitOfMeasures\u0022); migrationBuilder.DropTable( name: \u0022Branches\u0022); migrationBuilder.DropTable( name: \u0022UnitOfMeasures\u0022); migrationBuilder.DropTable( name: \u0022Locations\u0022); migrationBuilder.DropTable( name: \u0022OwnCompanies\u0022); migrationBuilder.DropTable( name: \u0022UomTypes\u0022); migrationBuilder.DropTable( name: \u0022Currencies\u0022); migrationBuilder.DropTable( name: \u0022Customers\u0022); migrationBuilder.DropTable( name: \u0022MailingAddresses\u0022); migrationBuilder.DropTable( name: \u0022PaymentTerms\u0022); migrationBuilder.DropTable( name: \u0022Cities\u0022); migrationBuilder.DropTable( name: \u0022Countries\u0022); } } }"
    },
    {
      "Class": "GenericRepository",
      "Path": "FiloGH.Infrastructure/Repositories/GenericRepository.cs",
      "Kind": "Entity",
      "BaseName": "IGenericRepository",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using FiloGH.Infrastructure.Data.Contexts; using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Query; using System.Linq.Expressions; namespace FiloGH.Infrastructure.Repositories { public class GenericRepository\u003CTEntity, TId\u003E : IGenericRepository\u003CTEntity, TId\u003E where TEntity : class, IEntity\u003CTId\u003E where TId : struct, IComparable, IConvertible, IComparable\u003CTId\u003E, IEquatable\u003CTId\u003E { protected readonly AppDbContext _context; protected readonly DbSet\u003CTEntity\u003E _dbSet; public GenericRepository(AppDbContext context) { _context = context; _dbSet = context.Set\u003CTEntity\u003E(); } public async Task\u003CTEntity?\u003E GetByIdAsync(TId id, bool disableTracking = true, string? includeProperties = null) { IQueryable\u003CTEntity\u003E query = _dbSet; if (disableTracking) { query = query.AsNoTracking(); } if (!string.IsNullOrWhiteSpace(includeProperties)) { foreach (var includeProperty in includeProperties.Split(new char[] { \u0027,\u0027 }, StringSplitOptions.RemoveEmptyEntries)) { query = query.Include(includeProperty.Trim()); } } var parameter = Expression.Parameter(typeof(TEntity), \u0022e\u0022); var property = Expression.Property(parameter, \u0022Id\u0022); var constant = Expression.Constant(id); var body = Expression.Equal(property, constant); var lambda = Expression.Lambda\u003CFunc\u003CTEntity, bool\u003E\u003E(body, parameter); return await query.FirstOrDefaultAsync(lambda); } public async Task\u003CIEnumerable\u003CTEntity\u003E\u003E GetAllAsync( Expression\u003CFunc\u003CTEntity, bool\u003E\u003E? filter = null, Func\u003CIQueryable\u003CTEntity\u003E, IOrderedQueryable\u003CTEntity\u003E\u003E? orderBy = null, Func\u003CIQueryable\u003CTEntity\u003E, IIncludableQueryable\u003CTEntity, object\u003E\u003E? include = null, bool disableTracking = true) { IQueryable\u003CTEntity\u003E query = _dbSet; if (disableTracking) { query = query.AsNoTracking(); } if (include != null) { query = include(query); } if (filter != null) { query = query.Where(filter); } if (orderBy != null) { return await orderBy(query).ToListAsync(); } return await query.ToListAsync(); } public async Task\u003CIEnumerable\u003CTEntity\u003E\u003E GetAllAsync() { return await GetAllAsync(filter: null, orderBy: null, include: null, disableTracking: true); } public async Task AddAsync(TEntity entity) { await _dbSet.AddAsync(entity); } public void Update(TEntity entity) { _dbSet.Update(entity); } public Task UpdateAsync(TEntity entity) { Update(entity); return Task.CompletedTask; } public void Delete(TEntity entity) { _dbSet.Remove(entity); } public Task DeleteAsync(TEntity entity) { Delete(entity); return Task.CompletedTask; } public async Task DeleteAsync(TId id) { var entityToDelete = await _dbSet.FindAsync(id); if (entityToDelete != null) { _dbSet.Remove(entityToDelete); } } } }"
    },
    {
      "Class": "ImageType",
      "Path": "FiloGH.Core/Entities/ImageType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "SortOrder",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ImageType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short SortOrder { get; set; } = 1; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "InventoryCost",
      "Path": "FiloGH.Core/Entities/InventoryCost.cs",
      "Kind": "Entity",
      "PropertyCount": 12,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "StockItemId",
          "Attributes": []
        },
        {
          "Type": "StockItem?",
          "Name": "StockItem",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "OrderLineId",
          "Attributes": []
        },
        {
          "Type": "OrderLine?",
          "Name": "OrderLine",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MetalCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "WorkmanshipCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "OtherCosts",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalUnitCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CalculatedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InventoryCost { public int Id { get; set; } public int? StockItemId { get; set; } public StockItem? StockItem { get; set; } public int? OrderLineId { get; set; } public OrderLine? OrderLine { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalCost { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal WorkmanshipCost { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal OtherCosts { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal TotalUnitCost { get; set; } = 0.0M; public DateTimeOffset CalculatedAt { get; set; } = DateTimeOffset.Now; } }"
    },
    {
      "Class": "InventoryLevel",
      "Path": "FiloGH.Core/Entities/InventoryLevel.cs",
      "Kind": "Entity",
      "PropertyCount": 12,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "StockItemId",
          "Attributes": []
        },
        {
          "Type": "StockItem",
          "Name": "StockItem",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "MetalPurity?",
          "Name": "MetalPurity",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalMetalWeightGross",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalMetalWeightNet",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalCaratWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "ValuationCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InventoryLevel { public int Id { get; set; } public int StockItemId { get; set; } public required StockItem StockItem { get; set; } = null!; public byte LocationId { get; set; } public required Location Location { get; set; } = null!; public byte? MetalPurityId { get; set; } public MetalPurity? MetalPurity { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Quantity { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal TotalMetalWeightGross { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal TotalMetalWeightNet { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(10,4)\u0022)] public decimal TotalCaratWeight { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal ValuationCost { get; set; } = 0.0M; } }"
    },
    {
      "Class": "InventoryLevelActivity",
      "Path": "FiloGH.Models/Entities/InventoryLevelActivity.cs",
      "Kind": "Entity",
      "PropertyCount": 2,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class InventoryLevelActivity { public int Id { get; set; } [MaxLength(255)] public required string Name { get; set; } } }"
    },
    {
      "Class": "InventoryLevelHistory",
      "Path": "FiloGH.Models/Entities/InventoryLevelHistory.cs",
      "Kind": "Entity",
      "PropertyCount": 19,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "InventoryLevelActivityId",
          "Attributes": []
        },
        {
          "Type": "InventoryLevelActivity",
          "Name": "InventoryLevelActivity",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order?",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "Date",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Incoming",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Available",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Committed",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Reserved",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Damaged",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "SafetyStock",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "QualityControl",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Models.Entities { public class InventoryLevelHistory { public int Id { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } public int LocationId { get; set; } public required Location Location { get; set; } public int InventoryLevelActivityId { get; set; } public required InventoryLevelActivity InventoryLevelActivity { get; set; } public int? OrderId { get; set; } public Order? Order { get; set; } public DateTimeOffset Date { get; set; } public int CreatedById { get; set; } public required User CreatedBy { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Incoming { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Available { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Committed { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Reserved { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Damaged { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal SafetyStock { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal QualityControl { get; set; } } }"
    },
    {
      "Class": "InventoryService",
      "Path": "FiloGH.Application/Services/InventoryService.cs",
      "Kind": "Entity",
      "BaseName": "IInventoryService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using FiloGH.Core.Entities; using FiloGH.Application.Interfaces; using System.Threading.Tasks; using System; using Microsoft.EntityFrameworkCore; using System.Linq; using System.Collections.Generic; namespace FiloGH.Application.Services { public class InventoryService : IInventoryService { private readonly IUnitOfWork _unitOfWork; private const byte GoldCurrencyId = 1; private const byte BaseCurrencyEURId = 2; public InventoryService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; } public async Task\u003CStockTransaction\u003E RecordTransactionAsync( byte movementTypeId, byte branchId, byte locationId, byte? metalPurityId, decimal weightInGrams, string sourceDocType, int? sourceDocId, byte createdById ) { var tempUser = new User { Id = createdById, Username = \u0022INV_USER\u0022, PasswordHash = \u0022TEMP\u0022, FirstName = \u0022TEMP_F\u0022, LastName = \u0022TEMP_L\u0022, PrimaryBranch = null!, UserRole = null! }; var tempMovementType = new StockMovementType { Id = movementTypeId, Name = \u0022TEMP_MOVE\u0022, Code = \u0022TEMP\u0022, Sign = (short)(weightInGrams \u003E 0 ? 1 : (weightInGrams \u003C 0 ? -1 : 0)) }; var tempBranch = new Branch { Id = branchId, Name = \u0022TEMP Branch\u0022, Code = \u0022TMPBR\u0022, OwnCompanyId = 1, OwnCompany = null!, DefaultCashLocation = null!, DefaultMetalLocation = null! }; var tempLocation = new Location { Id = locationId, Name = \u0022TEMP Location\u0022 }; var tempMetalCurrency = new Currency { Id = GoldCurrencyId, Code = \u0022GOLD\u0022, Name = \u0022Gold Gram\u0022 }; var tempBaseCurrency = new Currency { Id = BaseCurrencyEURId, Code = \u0022EUR\u0022, Name = \u0022Euro\u0022 }; MetalPurity? tempPurity = null; decimal transactionFineness = 1.0M; if (metalPurityId.HasValue) { var purityRepository = _unitOfWork.GetRepository\u003CMetalPurity, byte\u003E(); tempPurity = await purityRepository.GetByIdAsync(metalPurityId.Value, disableTracking: true); if (tempPurity != null) { transactionFineness = tempPurity.PurityRatio; } else { tempPurity = new MetalPurity { Id = metalPurityId.Value, PurityRatio = 0.585M, BaseMetal = null!, Name = string.Empty }; transactionFineness = 0.585M; } } var newTransaction = new StockTransaction { MovementTypeId = movementTypeId, MovementType = tempMovementType, BranchId = branchId, Branch = tempBranch, LocationId = locationId, Location = tempLocation, MetalCurrencyId = GoldCurrencyId, MetalCurrency = tempMetalCurrency, BaseExchangeCurrencyId = BaseCurrencyEURId, BaseExchangeCurrency = tempBaseCurrency, CreatedById = createdById, CreatedBy = tempUser, TransactionDate = DateTimeOffset.UtcNow, ReferenceDocType = sourceDocType, MetalPurityId = metalPurityId, MetalPurity = tempPurity, Fineness = transactionFineness, WeightInGrams = weightInGrams, CostPerGramEUR = await GetAverageCostPerGramAsync(metalPurityId ?? 1, locationId), FixedExchangeRate = 1.0M, Notes = $\u0022Hareket kayna\u011F\u0131: {sourceDocType} ID: {sourceDocId}\u0022 }; var transactionRepository = _unitOfWork.GetRepository\u003CStockTransaction, long\u003E(); await transactionRepository.AddAsync(newTransaction); await _unitOfWork.SaveAsync(); return newTransaction; } public async Task\u003Cbool\u003E TransferStockAsync(byte transferMovementTypeId, byte branchId, byte fromLocationId, byte toLocationId, decimal weightInGrams, int createdById) { if (weightInGrams \u003C= 0) { throw new ArgumentException(\u0022Transfer a\u011F\u0131rl\u0131\u011F\u0131 pozitif olmal\u0131d\u0131r.\u0022, nameof(weightInGrams)); } byte? metalPurityId = null; await RecordTransactionAsync( movementTypeId: transferMovementTypeId, branchId: branchId, locationId: fromLocationId, metalPurityId: metalPurityId, weightInGrams: -weightInGrams, sourceDocType: \u0022TRANSFER_OUT\u0022, sourceDocId: null, createdById: (byte)createdById ); await RecordTransactionAsync( movementTypeId: transferMovementTypeId, branchId: branchId, locationId: toLocationId, metalPurityId: metalPurityId, weightInGrams: weightInGrams, sourceDocType: \u0022TRANSFER_IN\u0022, sourceDocId: null, createdById: (byte)createdById ); return true; } public async Task\u003Cdecimal\u003E GetAverageCostPerGramAsync(byte metalPurityId, int locationId) { var repository = _unitOfWork.GetRepository\u003CStockTransaction, long\u003E(); var allTransactions = await repository.GetAllAsync( filter: t =\u003E t.MetalPurityId == metalPurityId \u0026\u0026 t.LocationId == locationId, disableTracking: true ); if (!allTransactions.Any()) return 0; var totalCost = allTransactions.Sum(t =\u003E t.WeightInGrams * t.CostPerGramEUR); var currentStockWeight = allTransactions.Sum(t =\u003E t.WeightInGrams); return currentStockWeight \u003E 0 ? totalCost / currentStockWeight : 0; } public async Task\u003Cdecimal\u003E GetStockBalanceByPurityAsync(int locationId, byte metalPurityId) { var repository = _unitOfWork.GetRepository\u003CStockTransaction, long\u003E(); var allTransactions = await repository.GetAllAsync( filter: t =\u003E t.MetalPurityId == metalPurityId \u0026\u0026 t.LocationId == locationId, disableTracking: true ); var totalBalance = allTransactions.Sum(t =\u003E t.WeightInGrams); return totalBalance; } } }"
    },
    {
      "Class": "InventoryTransaction",
      "Path": "FiloGH.Core/Entities/InventoryTransaction.cs",
      "Kind": "Entity",
      "PropertyCount": 15,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "MovementDate",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "StockItemId",
          "Attributes": []
        },
        {
          "Type": "StockItem",
          "Name": "StockItem",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "TransactionTypeId",
          "Attributes": []
        },
        {
          "Type": "InventoryTransactionType",
          "Name": "TransactionType",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MetalWeightGross",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MetalWeightNet",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CaratWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "UnitCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "SourceOrderId",
          "Attributes": []
        },
        {
          "Type": "Order?",
          "Name": "SourceOrder",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InventoryTransaction { public int Id { get; set; } public DateTimeOffset MovementDate { get; set; } = DateTimeOffset.Now; public int StockItemId { get; set; } public required StockItem StockItem { get; set; } = null!; public byte LocationId { get; set; } public required Location Location { get; set; } = null!; public byte TransactionTypeId { get; set; } public required InventoryTransactionType TransactionType { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Quantity { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalWeightGross { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalWeightNet { get; set; } [Column(TypeName = \u0022decimal(10,4)\u0022)] public decimal CaratWeight { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal UnitCost { get; set; } public int? SourceOrderId { get; set; } public Order? SourceOrder { get; set; } } }"
    },
    {
      "Class": "InventoryTransactionType",
      "Path": "FiloGH.Core/Entities/InventoryTransactionType.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "MovementSign",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "AffectsCost",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InventoryTransactionType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short MovementSign { get; set; } = 1; public bool AffectsCost { get; set; } = true; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Invoice",
      "Path": "FiloGH.Core/Entities/Invoice.cs",
      "Kind": "Entity",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "RootTypeId",
          "Attributes": []
        },
        {
          "Type": "RootType",
          "Name": "RootType",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "InvoiceNumber",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "InvoiceDate",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer?",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "RelatedOrderId",
          "Attributes": []
        },
        {
          "Type": "long",
          "Name": "JournalEntryId",
          "Attributes": []
        },
        {
          "Type": "AccountingJournalEntry",
          "Name": "JournalEntry",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "InvoiceStatusId",
          "Attributes": []
        },
        {
          "Type": "InvoiceStatus",
          "Name": "InvoiceStatus",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "ExchangeRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,8)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CInvoiceLine\u003E",
          "Name": "InvoiceLines",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Invoice { public int Id { get; set; } public byte RootTypeId { get; set; } public required RootType RootType { get; set; } = null!; [MaxLength(50)] public required string InvoiceNumber { get; set; } public DateTimeOffset InvoiceDate { get; set; } public int? CustomerId { get; set; } public Customer? Customer { get; set; } public int? RelatedOrderId { get; set; } public long JournalEntryId { get; set; } public required AccountingJournalEntry JournalEntry { get; set; } = null!; public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; public byte InvoiceStatusId { get; set; } public required InvoiceStatus InvoiceStatus { get; set; } = null!; [Column(TypeName = \u0022decimal(19,8)\u0022)] public decimal ExchangeRate { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal TotalAmount { get; set; } public ICollection\u003CInvoiceLine\u003E InvoiceLines { get; set; } = new List\u003CInvoiceLine\u003E(); } }"
    },
    {
      "Class": "InvoiceLine",
      "Path": "FiloGH.Core/Entities/InvoiceLine.cs",
      "Kind": "Entity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "InvoiceId",
          "Attributes": []
        },
        {
          "Type": "Invoice",
          "Name": "Invoice",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "LineNumber",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "UnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "Unit",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "UnitPrice",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "DiscountAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "LineAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "TaxRateId",
          "Attributes": []
        },
        {
          "Type": "TaxRate",
          "Name": "TaxRate",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "OrderLineId",
          "Attributes": []
        },
        {
          "Type": "OrderLine?",
          "Name": "OrderLine",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InvoiceLine { public long Id { get; set; } public int InvoiceId { get; set; } public required Invoice Invoice { get; set; } = null!; public short LineNumber { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; public byte UnitId { get; set; } public required UnitOfMeasure Unit { get; set; } = null!; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal Quantity { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal UnitPrice { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal DiscountAmount { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal LineAmount { get; set; } public byte TaxRateId { get; set; } public required TaxRate TaxRate { get; set; } = null!; public int? OrderLineId { get; set; } public OrderLine? OrderLine { get; set; } } }"
    },
    {
      "Class": "InvoiceMetaField",
      "Path": "FiloGH.Models/Entities/InvoiceMetaField.cs",
      "Kind": "Entity",
      "PropertyCount": 2,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Models.Entities { public class InvoiceMetaField { public int Id { get; set; } public required string Name { get; set; } } }"
    },
    {
      "Class": "InvoiceStatus",
      "Path": "FiloGH.Core/Entities/InvoiceStatus.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsFinal",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsLegalSubmission",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class InvoiceStatus { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool IsFinal { get; set; } = false; public bool IsLegalSubmission { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Karat",
      "Path": "FiloGH.Core/Entities/Karat.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Fineness",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Karat { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(50)] public required string Name { get; set; } [Column(TypeName = \u0022decimal(5,4)\u0022)] public decimal Fineness { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Location",
      "Path": "FiloGH.Core/Entities/Location.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "LocationType",
          "Name": "Type",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CBranchLocation\u003E",
          "Name": "BranchLocations",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Enums; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Location { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } public byte Position { get; set; } public bool IsActive { get; set; } [MaxLength(255)] public required string Name { get; set; } public LocationType Type { get; set; } public ICollection\u003CBranchLocation\u003E BranchLocations { get; set; } = new List\u003CBranchLocation\u003E(); } }"
    },
    {
      "Class": "MailingAddress",
      "Path": "FiloGH.Core/Entities/MailingAddress.cs",
      "Kind": "Entity",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer?",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Address1",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Address2",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "ZipCode",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "CityId",
          "Attributes": []
        },
        {
          "Type": "City?",
          "Name": "City",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CountryId",
          "Attributes": []
        },
        {
          "Type": "Country",
          "Name": "Country",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "FirstName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string",
          "Name": "LastName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "CompanyName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Phone",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsPrimary",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrder\u003E?",
          "Name": "ShippingForOrders",
          "Attributes": [
            "[InverseProperty(\u0022ShippingAddress\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003COrderFulfillment\u003E?",
          "Name": "ShippingForFulfillments",
          "Attributes": [
            "[InverseProperty(\u0022ShippingAddress\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class MailingAddress { public int Id { get; set; } public int? CustomerId { get; set; } public Customer? Customer { get; set; } [MaxLength(255)] public required string Address1 { get; set; } [MaxLength(255)] public string? Address2 { get; set; } [MaxLength(10)] public string? ZipCode { get; set; } public byte? CityId { get; set; } public City? City { get; set; } public byte CountryId { get; set; } public required Country Country { get; set; } [MaxLength(255)] public required string FirstName { get; set; } [MaxLength(255)] public required string LastName { get; set; } [MaxLength(255)] public string? CompanyName { get; set; } [MaxLength(50)] public string? Phone { get; set; } public bool IsPrimary { get; set; } = false; [InverseProperty(\u0022ShippingAddress\u0022)] public ICollection\u003COrder\u003E? ShippingForOrders { get; set; } [InverseProperty(\u0022ShippingAddress\u0022)] public ICollection\u003COrderFulfillment\u003E? ShippingForFulfillments { get; set; } } }"
    },
    {
      "Class": "MainMenuItems",
      "Path": "FiloGH/Components/Services/Menu.cs",
      "Kind": "Entity",
      "PropertyCount": 12,
      "Properties": [
        {
          "Type": "string",
          "Name": "MenuTitle",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Title",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Path",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Icon",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Type",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "RandomNumber",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "BadgeClass",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "BadgeValue",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Active",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Selected",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "DirChange",
          "Attributes": []
        },
        {
          "Type": "MainMenuItems[]?",
          "Name": "Children",
          "Attributes": []
        }
      ],
      "Code": "public class MainMenuItems { public string MenuTitle { get; set; } public string Title { get; set; } public string Path { get; set; } public string Icon { get; set; } public string Type { get; set; } public int RandomNumber { get; set; } public string BadgeClass { get; set; } public string BadgeValue { get; set; } public bool Active { get; set; } public bool Selected { get; set; } public bool DirChange { get; set; } public MainMenuItems[]? Children { get; set; } public MainMenuItems(string title = \u0022\u0022, string path = \u0022\u0022, int randomNumber = 0,string icon = \u0022\u0022, string type = \u0022\u0022, string menuTitle = \u0022\u0022, string badgeClass = \u0022\u0022, string badgeValue = \u0022\u0022, bool active = false, bool selected = false, bool dirChange = false, MainMenuItems[]? children = null) { MenuTitle = menuTitle; Title = title; Path = path; RandomNumber = randomNumber; Icon = icon; Type = type; BadgeClass = badgeClass; BadgeValue = badgeValue; Active = active; Selected = selected; DirChange = dirChange; Children = children; } }"
    },
    {
      "Class": "MenuDataService",
      "Path": "FiloGH/Components/Services/MenuData.Service.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "public class MenuDataService { private List\u003CMainMenuItems\u003E MenuData = new List\u003CMainMenuItems\u003E() { new MainMenuItems( menuTitle: \u0022MAIN\u0022 ), new MainMenuItems( type: \u0022sub\u0022, title: \u0022Dashboards\u0022, icon: \u0022bx bx-home\u0022, badgeValue: \u002212\u0022, badgeClass: \u0022bg-warning-transparent\u0022, selected: false, active: false, dirChange: false, children: new MainMenuItems[] { new MainMenuItems ( path: \u0022/index\u0022, type: \u0022link\u0022, title: \u0022CRM\u0022, selected: false, active: false, dirChange: false ), } ), new MainMenuItems ( type: \u0022sub\u0022, title: \u0022Error\u0022, icon: \u0022bx bx-error\u0022, selected: false, active: false, dirChange: false, children: new MainMenuItems[] { new MainMenuItems ( path: \u0022/error401\u0022, type: \u0022link\u0022, title: \u0022Error 401\u0022, selected: false, active: false, dirChange: false ), } ), new MainMenuItems ( type: \u0022sub\u0022, title: \u0022Nested Menu\u0022, icon: \u0022bx bx-layer\u0022, selected: false, active: false, dirChange: false, children: new MainMenuItems[] { new MainMenuItems ( path: \u0022\u0022, type: \u0022empty\u0022, title: \u0022Nested-1\u0022, selected: false, active: false, dirChange: false ), new MainMenuItems ( type: \u0022sub\u0022, title: \u0022Nested-2\u0022, selected: false, active: false, dirChange: false, children: new MainMenuItems[] { new MainMenuItems ( path: \u0022\u0022, type: \u0022empty\u0022, title: \u0022Nested-2-1\u0022, selected: false, active: false, dirChange: false ), new MainMenuItems ( type: \u0022sub\u0022, title: \u0022Nested-2-2\u0022, selected: false, active: false, dirChange: false, children: new MainMenuItems[] { new MainMenuItems ( path: \u0022\u0022, type: \u0022empty\u0022, title: \u0022Nested-2-2-1\u0022, selected: false, active: false, dirChange: false ), new MainMenuItems ( path: \u0022\u0022, type: \u0022empty\u0022, title: \u0022Nested-2-2-2\u0022, selected: false, active: false, dirChange: false ) } ) } ) } ), new MainMenuItems ( path: \u0022/\u0022, type: \u0022link\u0022, title: \u0022Ana Men\uFFFD\u0022, selected: false, active: true, dirChange: false ), new MainMenuItems ( path: \u0022/order/1\u0022, type: \u0022link\u0022, title: \u0022Order\u0022, selected: false, active: true, dirChange: false ) }; public List\u003CMainMenuItems\u003E GetMenuData() { return MenuData; } }"
    },
    {
      "Class": "MetalColor",
      "Path": "FiloGH.Core/Entities/MetalColor.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "HexCode",
          "Attributes": [
            "[MaxLength(7)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class MetalColor { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(7)] public string? HexCode { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "MetalPurity",
      "Path": "FiloGH.Core/Entities/MetalPurity.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "KaratValue",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "PurityRatio",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BaseMetalId",
          "Attributes": []
        },
        {
          "Type": "MetalType",
          "Name": "BaseMetal",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class MetalPurity : IEntity\u003Cbyte\u003E { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } public byte KaratValue { get; set; } [Column(TypeName = \u0022decimal(5,4)\u0022)] public decimal PurityRatio { get; set; } public bool IsActive { get; set; } = true; public byte BaseMetalId { get; set; } public required MetalType BaseMetal { get; set; } = null!; } }"
    },
    {
      "Class": "MetalType",
      "Path": "FiloGH.Core/Entities/MetalType.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BaseUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "BaseUnit",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsPrecious",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CMetalPurity\u003E",
          "Name": "Purities",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class MetalType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } public byte BaseUnitId { get; set; } public required UnitOfMeasure BaseUnit { get; set; } = null!; public bool IsPrecious { get; set; } = true; public bool IsActive { get; set; } = true; public required ICollection\u003CMetalPurity\u003E Purities { get; set; } = new List\u003CMetalPurity\u003E(); } }"
    },
    {
      "Class": "MetalTypeCreateDto",
      "Path": "FiloGH.Application/DTOs/MetalType/MetalTypeCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PriceMultiplier",
          "Attributes": [
            "[Range(0.0001, 100.0, ErrorMessage = \u0022\u00C7arpan, s\u0131f\u0131rdan b\u00FCy\u00FCk ve 100\u0027den k\u00FC\u00E7\u00FCk olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.MetalType { public record MetalTypeCreateDto { [Required(ErrorMessage = \u0022Metal Tipi Kodu zorunludur.\u0022)] [MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)] public required string Code { get; init; } [Required(ErrorMessage = \u0022Metal Tipi Ad\u0131 zorunludur.\u0022)] [MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)] public required string Name { get; init; } [Required(ErrorMessage = \u0022Fiyat \u00C7arpan\u0131 zorunludur.\u0022)] [Range(0.0001, 100.0, ErrorMessage = \u0022\u00C7arpan, s\u0131f\u0131rdan b\u00FCy\u00FCk ve 100\u0027den k\u00FC\u00E7\u00FCk olmal\u0131d\u0131r.\u0022)] public required decimal PriceMultiplier { get; init; } [MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)] public string? Description { get; init; } public bool IsActive { get; init; } = true; } }"
    },
    {
      "Class": "MetalTypeGetDto",
      "Path": "FiloGH.Application/DTOs/MetalType/MetalTypeGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "PriceMultiplier",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CreatedByName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System; namespace FiloGH.Application.DTOs.MetalType { public record MetalTypeGetDto { public required byte Id { get; init; } public required string Code { get; init; } public required string Name { get; init; } public required decimal PriceMultiplier { get; init; } public string? Description { get; init; } public required bool IsActive { get; init; } public required DateTimeOffset CreatedAt { get; init; } public required int CreatedById { get; init; } public string? CreatedByName { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "MetalTypeUpdateDto",
      "Path": "FiloGH.Application/DTOs/MetalType/MetalTypeUpdateDto.cs",
      "Kind": "Dto",
      "BaseName": "MetalTypeCreateDto",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Metal Tipi Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PriceMultiplier",
          "Attributes": [
            "[Range(0.0001, 100.0, ErrorMessage = \u0022\u00C7arpan, s\u0131f\u0131rdan b\u00FCy\u00FCk ve 100\u0027den k\u00FC\u00E7\u00FCk olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.MetalType { public record MetalTypeUpdateDto : MetalTypeCreateDto { [Required(ErrorMessage = \u0022Metal Tipi Kimli\u011Fi zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Metal Tipi Kimli\u011Fi belirtilmelidir.\u0022)] public required byte Id { get; init; } } }"
    },
    {
      "Class": "NavScrollService",
      "Path": "FiloGH/Components/Services/NavScroll.Service.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "public class NavScrollService { public event Action\u003Cstring\u003E? ScrollModeChanged; private string? isMenuType = \u0022\u0022; public string? IsMenuType { get =\u003E isMenuType; set { if (isMenuType != value) { isMenuType = value; ScrollModeChanged?.Invoke(isMenuType ?? throw new ArgumentNullException(nameof(isMenuType))); } } } public event Action\u003Cbool\u003E? VerticalModeChanged; private bool isVertical = true; public bool IsVertical { get =\u003E isVertical; set { if (isVertical != value) { isVertical = value; VerticalModeChanged?.Invoke(isVertical); } } } }"
    },
    {
      "Class": "OperationDefinition",
      "Path": "FiloGH.Core/Entities/OperationDefinition.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "RequiresWorkCenter",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsMetalPurityChanging",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StandardDurationHours",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CWorkCenterOperation\u003E?",
          "Name": "AllowedWorkCenters",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OperationDefinition { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool RequiresWorkCenter { get; set; } = true; public bool IsMetalPurityChanging { get; set; } = false; [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal StandardDurationHours { get; set; } = 0; public ICollection\u003CWorkCenterOperation\u003E? AllowedWorkCenters { get; set; } } }"
    },
    {
      "Class": "OperationStatus",
      "Path": "FiloGH.Core/Entities/OperationStatus.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "AllowTimeEntry",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OperationStatus { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(50)] public required string Name { get; set; } public bool IsActive { get; set; } = false; public bool AllowTimeEntry { get; set; } = false; } }"
    },
    {
      "Class": "Order",
      "Path": "FiloGH.Core/Entities/Order.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 40,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "OrderNumber",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "OrderDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "RequiredDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ExpectedDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "DeliveryDateTarget",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer?",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "OrderStatusDefinition",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "OrderPaymentStatusId",
          "Attributes": []
        },
        {
          "Type": "OrderPaymentStatus",
          "Name": "OrderPaymentStatus",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "InvoiceId",
          "Attributes": []
        },
        {
          "Type": "Invoice?",
          "Name": "Invoice",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderLine\u003E?",
          "Name": "OrderLines",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderMetalSummary\u003E?",
          "Name": "MetalSummaries",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderAdditionalFee\u003E?",
          "Name": "AdditionalFees",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderTaxLine\u003E?",
          "Name": "TaxLines",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderPaymentLine\u003E?",
          "Name": "PaymentLines",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderFulfillment\u003E?",
          "Name": "Fulfillments",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "UpdatedById",
          "Attributes": []
        },
        {
          "Type": "User?",
          "Name": "UpdatedBy",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "UpdatedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ClosedAt",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "TaxesIncluded",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Note",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "ShippingAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "ShippingAddress",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "BillingAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "BillingAddress",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "RootTypeId",
          "Attributes": []
        },
        {
          "Type": "RootType",
          "Name": "RootType",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Tags",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Order : IEntity\u003Cint\u003E { public int Id { get; set; } [MaxLength(50)] public required string OrderNumber { get; set; } public DateTimeOffset OrderDate { get; set; } public DateTimeOffset? RequiredDate { get; set; } public DateTimeOffset? ExpectedDate { get; set; } public DateTimeOffset? DeliveryDateTarget { get; set; } public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public int? CustomerId { get; set; } public Customer? Customer { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; public byte StatusId { get; set; } public required OrderStatusDefinition Status { get; set; } = null!; public byte OrderPaymentStatusId { get; set; } public required OrderPaymentStatus OrderPaymentStatus { get; set; } = null!; public int? InvoiceId { get; set; } public Invoice? Invoice { get; set; } public ICollection\u003COrderLine\u003E? OrderLines { get; set; } public ICollection\u003COrderMetalSummary\u003E? MetalSummaries { get; set; } public ICollection\u003COrderAdditionalFee\u003E? AdditionalFees { get; set; } public ICollection\u003COrderTaxLine\u003E? TaxLines { get; set; } public ICollection\u003COrderPaymentLine\u003E? PaymentLines { get; set; } public ICollection\u003COrderFulfillment\u003E? Fulfillments { get; set; } public byte CreatedById { get; set; } public required User CreatedBy { get; set; } public byte? UpdatedById { get; set; } public User? UpdatedBy { get; set; } public DateTimeOffset CreatedAt { get; set; } public DateTimeOffset? UpdatedAt { get; set; } public DateTimeOffset? ClosedAt { get; set; } public bool TaxesIncluded { get; set; } [MaxLength(255)] public string? Note { get; set; } public int? ShippingAddressId { get; set; } public MailingAddress? ShippingAddress { get; set; } public int? BillingAddressId { get; set; } public MailingAddress? BillingAddress { get; set; } public byte RootTypeId { get; set; } public required RootType RootType { get; set; } = null!; [MaxLength(255)] public string? Tags { get; set; } } }"
    },
    {
      "Class": "OrderAdditionalFee",
      "Path": "FiloGH.Core/Entities/OrderAdditionalFee.cs",
      "Kind": "Entity",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "AdditionalFeeDefinitionId",
          "Attributes": []
        },
        {
          "Type": "OrderAdditionalFeeDefinition",
          "Name": "AdditionalFeeDefinition",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Amount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "AmountTypeId",
          "Attributes": []
        },
        {
          "Type": "OrderFeeAmountType",
          "Name": "AmountType",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "TaxRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsTaxIncluded",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "AccountingAccountId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "AccountingAccount",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderAdditionalFee { public int Id { get; set; } public int OrderId { get; set; } public required Order Order { get; set; } = null!; public byte AdditionalFeeDefinitionId { get; set; } public required OrderAdditionalFeeDefinition AdditionalFeeDefinition { get; set; } = null!; [MaxLength(255)] public required string Name { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Amount { get; set; } public byte AmountTypeId { get; set; } public required OrderFeeAmountType AmountType { get; set; } = null!; [Column(TypeName = \u0022decimal(5,4)\u0022)] public decimal TaxRate { get; set; } public bool IsTaxIncluded { get; set; } = false; public int AccountingAccountId { get; set; } public required AccountChart AccountingAccount { get; set; } = null!; } }"
    },
    {
      "Class": "OrderAdditionalFeeDefinition",
      "Path": "FiloGH.Core/Entities/OrderAdditionalFeeDefinition.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "int",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "DefaultAccountingAccountId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "DefaultAccountingAccount",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderAdditionalFeeDefinition { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public int Position { get; set; } public bool IsActive { get; set; } = true; public int DefaultAccountingAccountId { get; set; } public required AccountChart DefaultAccountingAccount { get; set; } = null!; } }"
    },
    {
      "Class": "OrderCostCodes",
      "Path": "FiloGH.Core/Constants/OrderCostCodes.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFF namespace FiloGH.Core.Constants { public static class OrderCostCodes { public const string Metal = \u0022METAL\u0022; public const string Loss = \u0022LOSS\u0022; public const string WorkmanshipFee = \u0022WORKMANSHIPFEE\u0022; public const string Profit = \u0022PROFIT\u0022; public const string Discount = \u0022DISCOUNT\u0022; public const string Vat = \u0022VAT\u0022; } }"
    },
    {
      "Class": "OrderCreateDto",
      "Path": "FiloGH.Application/DTOs/Order/OrderCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022\u015Eube kimli\u011Fi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Para birimi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "OrderDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "RequiredDate",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "TaxesIncluded",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Note",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "ShippingAddressId",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "BillingAddressId",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderLineCreateDto\u003E",
          "Name": "Lines",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Order { public record OrderCreateDto { [Required(ErrorMessage = \u0022\u015Eube kimli\u011Fi zorunludur.\u0022)] public required byte BranchId { get; init; } [Required(ErrorMessage = \u0022Para birimi zorunludur.\u0022)] public required byte CurrencyId { get; init; } public required DateTimeOffset OrderDate { get; init; } public DateTimeOffset? RequiredDate { get; init; } public int? CustomerId { get; init; } public required bool TaxesIncluded { get; init; } [MaxLength(255)] public string? Note { get; init; } public int? ShippingAddressId { get; init; } public int? BillingAddressId { get; init; } public required ICollection\u003COrderLineCreateDto\u003E Lines { get; init; } = new List\u003COrderLineCreateDto\u003E(); } }"
    },
    {
      "Class": "OrderFeeAmountType",
      "Path": "FiloGH.Core/Entities/OrderFeeAmountType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderFeeAmountType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "OrderFulfillment",
      "Path": "FiloGH.Core/Entities/OrderFulfillment.cs",
      "Kind": "Entity",
      "PropertyCount": 19,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": [
            "[ForeignKey(\u0022OrderId\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "OrderStatusDefinition",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "Quantity",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ShippingAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "ShippingAddress",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "CargoId",
          "Attributes": []
        },
        {
          "Type": "Cargo?",
          "Name": "Cargo",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "TrackingNumber",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CashOnDeliveryPrice",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "PackageControlledAt",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "PackageControlledById",
          "Attributes": []
        },
        {
          "Type": "User?",
          "Name": "PackageControlledBy",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderFulfillment { public int Id { get; set; } public int OrderId { get; set; } [ForeignKey(\u0022OrderId\u0022)] public required Order Order { get; set; } [MaxLength(20)] public required string Name { get; set; } public DateTimeOffset CreatedAt { get; set; } public byte StatusId { get; set; } public required OrderStatusDefinition Status { get; set; } public int Quantity { get; set; } public byte LocationId { get; set; } public required Location Location { get; set; } public int? ShippingAddressId { get; set; } public MailingAddress? ShippingAddress { get; set; } public byte? CargoId { get; set; } public Cargo? Cargo { get; set; } [MaxLength(255)] public string? TrackingNumber { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal CashOnDeliveryPrice { get; set; } public DateTimeOffset PackageControlledAt { get; set; } public byte? PackageControlledById { get; set; } public User? PackageControlledBy { get; set; } } }"
    },
    {
      "Class": "OrderLine",
      "Path": "FiloGH.Core/Entities/OrderLine.cs",
      "Kind": "Entity",
      "PropertyCount": 25,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LineTypeId",
          "Attributes": []
        },
        {
          "Type": "OrderLineType",
          "Name": "LineType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "RootTypeId",
          "Attributes": []
        },
        {
          "Type": "RootType",
          "Name": "RootType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LineStatusId",
          "Attributes": []
        },
        {
          "Type": "OrderStatusDefinition",
          "Name": "LineStatus",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant?",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location?",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StockQuantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CustomerCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "CustomerCurrency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StockCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "StockCurrency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "FixedExchangeRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,8)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "UnitPrice",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Amount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "CustomerAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "LineNote",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "ICollection\u003COrderLineCost\u003E",
          "Name": "OrderLineCosts",
          "Attributes": []
        },
        {
          "Type": "InventoryCost?",
          "Name": "InventoryCost",
          "Attributes": []
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderLine { public int Id { get; set; } public int OrderId { get; set; } public required Order Order { get; set; } = null!; public byte LineTypeId { get; set; } public required OrderLineType LineType { get; set; } = null!; public byte RootTypeId { get; set; } public required RootType RootType { get; set; } = null!; public byte LineStatusId { get; set; } public required OrderStatusDefinition LineStatus { get; set; } = null!; public int? ProductVariantId { get; set; } public ProductVariant? ProductVariant { get; set; } public byte? LocationId { get; set; } public Location? Location { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal StockQuantity { get; set; } public byte CustomerCurrencyId { get; set; } public required Currency CustomerCurrency { get; set; } = null!; public byte StockCurrencyId { get; set; } public required Currency StockCurrency { get; set; } = null!; [Column(TypeName = \u0022decimal(19,8)\u0022)] public decimal FixedExchangeRate { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal UnitPrice { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Amount { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? CustomerAmount { get; set; } [MaxLength(255)] public string? LineNote { get; set; } public ICollection\u003COrderLineCost\u003E OrderLineCosts { get; set; } = new List\u003COrderLineCost\u003E(); public InventoryCost? InventoryCost { get; set; } } }"
    },
    {
      "Class": "OrderLineCost",
      "Path": "FiloGH.Core/Entities/OrderLineCost.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderLineId",
          "Attributes": []
        },
        {
          "Type": "OrderLine",
          "Name": "OrderLine",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "OrderLineCostTypeId",
          "Attributes": []
        },
        {
          "Type": "OrderLineCostType",
          "Name": "OrderLineCostType",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "Fineness",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "Amount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "CustomerRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,8)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "CustomerAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderLineCost { public int Id { get; set; } public int OrderLineId { get; set; } public required OrderLine OrderLine { get; set; } = null!; public byte OrderLineCostTypeId { get; set; } public required OrderLineCostType OrderLineCostType { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? Fineness { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? Amount { get; set; } [Column(TypeName = \u0022decimal(19,8)\u0022)] public decimal? CustomerRate { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? CustomerAmount { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; } }"
    },
    {
      "Class": "OrderLineCostType",
      "Path": "FiloGH.Core/Entities/OrderLineCostType.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "AffectsMetalInventory",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsCost",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003COrderLineCost\u003E",
          "Name": "OrderLineCosts",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderLineCostType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } public bool IsActive { get; set; } [MaxLength(20)] public required string Code { get; set; } = null!; public required string Name { get; set; } = null!; public bool AffectsMetalInventory { get; set; } public bool IsCost { get; set; } public ICollection\u003COrderLineCost\u003E OrderLineCosts { get; set; } = new List\u003COrderLineCost\u003E(); } }"
    },
    {
      "Class": "OrderLineCreateDto",
      "Path": "FiloGH.Application/DTOs/Order/OrderLineCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "UnitPrice",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "LineNote",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Order { public record OrderLineCreateDto { public required int ProductVariantId { get; init; } public required decimal Quantity { get; init; } public required decimal UnitPrice { get; init; } [MaxLength(255)] public string? LineNote { get; init; } } }"
    },
    {
      "Class": "OrderLineType",
      "Path": "FiloGH.Core/Entities/OrderLineType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "MovementSign",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderLineType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short MovementSign { get; set; } = 1; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "OrderMetalSummary",
      "Path": "FiloGH.Core/Entities/OrderMetalSummary.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CustomerCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "CustomerCurrency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "TotalWeightOrAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TotalCaratWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,4)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderMetalSummary { public int Id { get; set; } public int OrderId { get; set; } public required Order Order { get; set; } = null!; public byte CustomerCurrencyId { get; set; } public required Currency CustomerCurrency { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal TotalWeightOrAmount { get; set; } [Column(TypeName = \u0022decimal(10,4)\u0022)] public decimal TotalCaratWeight { get; set; } = 0.0M; } }"
    },
    {
      "Class": "OrderPaymentLine",
      "Path": "FiloGH.Core/Entities/OrderPaymentLine.cs",
      "Kind": "Entity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Amount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "BankId",
          "Attributes": []
        },
        {
          "Type": "Bank?",
          "Name": "Bank",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CashId",
          "Attributes": []
        },
        {
          "Type": "Cash?",
          "Name": "Cash",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "CustomerId",
          "Attributes": []
        },
        {
          "Type": "Customer?",
          "Name": "Customer",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "Date",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "TransactionNr",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Note",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderPaymentLine { public int Id { get; set; } public int OrderId { get; set; } public required Order Order { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Amount { get; set; } public required Currency Currency { get; set; } public int? BankId { get; set; } public Bank? Bank { get; set; } public int? CashId { get; set; } public Cash? Cash { get; set; } public int? CustomerId { get; set; } public Customer? Customer { get; set; } public DateTimeOffset Date { get; set; } public byte CreatedById { get; set; } public required User CreatedBy { get; set; } [MaxLength(255)] public string? TransactionNr { get; set; } [MaxLength(255)] public string? Note { get; set; } } }"
    },
    {
      "Class": "OrderPaymentStatus",
      "Path": "FiloGH.Core/Entities/OrderPaymentStatus.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsFinal",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderPaymentStatus { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public byte Position { get; set; } = 1; public bool IsFinal { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "OrderService",
      "Path": "FiloGH.Application/Services/OrderService.cs",
      "Kind": "Entity",
      "BaseName": "IOrderService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.DTOs; using FiloGH.Application.Interfaces; using FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; using System.Threading.Tasks; using System; using System.Linq; using System.Collections.Generic; using FiloGH.Application.DTOs.Order; namespace FiloGH.Application.Services { public class OrderService : IOrderService { private readonly IUnitOfWork _unitOfWork; private const byte StatusPendingId = 1; private const byte StatusConfirmedId = 2; public OrderService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; } public async Task\u003COrder\u003E CreateNewOrderAsync(OrderCreateDto orderDto) { var tempUser = new User { Id = 1, Username = \u0022TEMP_USER\u0022, PasswordHash = \u0022TEMP_HASH\u0022, FirstName = \u0022TEMP_FIRSTNAME\u0022, LastName = \u0022TEMP_LASTNAME\u0022, PrimaryBranch = null!, UserRole = null! }; var tempOwnCompany = new OwnCompany { Id = 1, Name = \u0022TEMP Company Name\u0022, TaxOffice = null!, TaxNumber = null!, BaseCurrency = null!, }; var tempCashLocation = new Location { Id = 1, Name = \u0022TEMP Cash Loc\u0022 }; var tempMetalLocation = new Location { Id = 2, Name = \u0022TEMP Metal Loc\u0022 }; var tempBranch = new Branch { Id = orderDto.BranchId, Name = \u0022TEMP Branch Name\u0022, Code = \u0022TEMP01\u0022, OwnCompanyId = tempOwnCompany.Id, OwnCompany = tempOwnCompany, DefaultCashLocationId = tempCashLocation.Id, DefaultCashLocation = tempCashLocation, DefaultMetalLocationId = tempMetalLocation.Id, DefaultMetalLocation = tempMetalLocation, }; var tempCurrency = new Currency { Id = orderDto.CurrencyId, Code = \u0022TMP\u0022, Name = \u0022TEMP Currency Name\u0022 }; var tempStatus = new OrderStatusDefinition { Id = StatusPendingId, Name = \u0022TEMP Status Name\u0022, Code = \u0022PEND\u0022 }; var tempPaymentStatus = new OrderPaymentStatus { Id = 1, Name = \u0022TEMP Payment Status\u0022, Code = \u0022UNPD\u0022 }; var tempRootType = new RootType { Id = 1, Name = \u0022TEMP Root Type\u0022, Code = \u0022SALE\u0022 }; var newOrder = new Order { Branch = tempBranch, Currency = tempCurrency, Status = tempStatus, OrderPaymentStatus = tempPaymentStatus, CreatedBy = tempUser, RootType = tempRootType, OrderNumber = Guid.NewGuid().ToString().Substring(0, 10), OrderDate = orderDto.OrderDate, CustomerId = orderDto.CustomerId, CurrencyId = orderDto.CurrencyId, StatusId = StatusPendingId, OrderPaymentStatusId = tempPaymentStatus.Id, RootTypeId = tempRootType.Id, BranchId = orderDto.BranchId, TaxesIncluded = orderDto.TaxesIncluded, Note = orderDto.Note, CreatedById = tempUser.Id, CreatedAt = DateTimeOffset.UtcNow, OrderLines = new List\u003COrderLine\u003E(), }; foreach (var lineDto in orderDto.Lines) { var tempProductVariant = new ProductVariant { Id = lineDto.ProductVariantId, Name = \u0022TEMP Product Variant Name\u0022, StockUnit = null!, MetalColor = null!, MetalPurity = null!, Product = null!, SKU = null! }; var newOrderLine = new OrderLine { ProductVariantId = lineDto.ProductVariantId, StockQuantity = lineDto.Quantity, UnitPrice = lineDto.UnitPrice, Order = newOrder, ProductVariant = tempProductVariant, LineType = null!, CustomerCurrency = null!, LineStatus = null!, RootType = null!, StockCurrency = null! }; newOrder.OrderLines.Add(newOrderLine); } var orderRepository = _unitOfWork.GetRepository\u003COrder, int\u003E(); await orderRepository.AddAsync(newOrder); await _unitOfWork.SaveAsync(); return newOrder; } public async Task\u003Cbool\u003E ConfirmOrderAsync(int orderId, int employeeId) { var orderRepository = _unitOfWork.GetRepository\u003COrder, int\u003E(); var orders = await orderRepository.GetAllAsync( filter: o =\u003E o.Id == orderId, include: i =\u003E i.Include(o =\u003E o.OrderLines!) ); var order = orders.FirstOrDefault(); if (order == null || order.StatusId != StatusPendingId) return false; order.StatusId = StatusConfirmedId; order.UpdatedById = (byte)employeeId; order.UpdatedAt = DateTimeOffset.UtcNow; orderRepository.Update(order); return await _unitOfWork.SaveAsync() \u003E 0; } public async Task\u003COrder?\u003E GetOrderDetailsAsync(int orderId) { var orderRepository = _unitOfWork.GetRepository\u003COrder, int\u003E(); var orders = await orderRepository.GetAllAsync( filter: o =\u003E o.Id == orderId, include: i =\u003E i.Include(o =\u003E o.Customer) .Include(o =\u003E o.OrderLines!) .ThenInclude(ol =\u003E ol.ProductVariant) .Include(o =\u003E o.Currency) .Include(o =\u003E o.Status), disableTracking: true ); return orders.FirstOrDefault(); } public Task\u003CInvoice\u003E CreateInvoiceFromOrderAsync(int orderId, int employeeId) { throw new NotImplementedException(); } public Task\u003Cdecimal\u003E GetCustomerMetalBalanceAsync(int customerId, byte metalTypeId) { throw new NotImplementedException(); } public Task UpdateOrderAsync(OrderCreateDto orderDto) { throw new NotImplementedException(); } public Task\u003Cbool\u003E CancelOrderAsync(int orderId, int employeeId, string reason) { throw new NotImplementedException(); } } }"
    },
    {
      "Class": "OrderStatusDefinition",
      "Path": "FiloGH.Core/Entities/OrderStatusDefinition.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "AllowsChanges",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsFinal",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderStatusDefinition { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public byte Position { get; set; } = 1; public bool AllowsChanges { get; set; } = true; public bool IsFinal { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "OrderTaxLine",
      "Path": "FiloGH.Core/Entities/OrderTaxLine.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "ShopTaxBaseAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PresentmentTaxBaseAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "ShopTaxAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "PresentmentTaxAmount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Rate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,3)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OrderTaxLine { public int Id { get; set; } public int? OrderId { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal ShopTaxBaseAmount { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal PresentmentTaxBaseAmount { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal ShopTaxAmount { get; set; } [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal PresentmentTaxAmount { get; set; } [Column(TypeName = \u0022decimal(9,3)\u0022)] public decimal Rate { get; set; } } }"
    },
    {
      "Class": "OwnCompany",
      "Path": "FiloGH.Core/Entities/OwnCompany.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "LegalName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "TaxOffice",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "TaxNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BaseCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "BaseCurrency",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "LegalAddressId",
          "Attributes": []
        },
        {
          "Type": "MailingAddress?",
          "Name": "LegalAddress",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CBranch\u003E",
          "Name": "Branches",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class OwnCompany { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(255)] public required string Name { get; set; } [MaxLength(255)] public string? LegalName { get; set; } public bool IsActive { get; set; } [MaxLength(100)] public required string TaxOffice { get; set; } [MaxLength(20)] public required string TaxNumber { get; set; } public byte BaseCurrencyId { get; set; } public required Currency BaseCurrency { get; set; } = null!; public int? LegalAddressId { get; set; } public MailingAddress? LegalAddress { get; set; } public ICollection\u003CBranch\u003E Branches { get; set; } = new List\u003CBranch\u003E(); } }"
    },
    {
      "Class": "Payment",
      "Path": "FiloGH.Core/Entities/Payment.cs",
      "Kind": "Entity",
      "PropertyCount": 15,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "PaymentNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "PaymentDate",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsIncoming",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "PaymentTypeId",
          "Attributes": []
        },
        {
          "Type": "PaymentType",
          "Name": "PaymentType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Amount",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "AccountId",
          "Attributes": []
        },
        {
          "Type": "AccountChart",
          "Name": "Account",
          "Attributes": []
        },
        {
          "Type": "long",
          "Name": "JournalEntryId",
          "Attributes": []
        },
        {
          "Type": "AccountingJournalEntry",
          "Name": "JournalEntry",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ReferenceDocumentId",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceDocumentType",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class Payment { public long Id { get; set; } [MaxLength(20)] public required string PaymentNumber { get; set; } public DateTimeOffset PaymentDate { get; set; } = DateTimeOffset.Now; public bool IsIncoming { get; set; } public byte PaymentTypeId { get; set; } public required PaymentType PaymentType { get; set; } = null!; public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal Amount { get; set; } public int AccountId { get; set; } public required AccountChart Account { get; set; } = null!; public long JournalEntryId { get; set; } public required AccountingJournalEntry JournalEntry { get; set; } = null!; public int? ReferenceDocumentId { get; set; } [MaxLength(50)] public string? ReferenceDocumentType { get; set; } } }"
    },
    {
      "Class": "PaymentTerm",
      "Path": "FiloGH.Core/Entities/PaymentTerm.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "DueDateDays",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class PaymentTerm { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; public short DueDateDays { get; set; } [MaxLength(500)] public string? Description { get; set; } } }"
    },
    {
      "Class": "PaymentType",
      "Path": "FiloGH.Core/Entities/PaymentType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class PaymentType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "Permission",
      "Path": "FiloGH.Core/Entities/Permission.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "UserModuleDefinition",
          "Name": "Module",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Enums; using System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Permission { public int Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(50)] public required string Code { get; set; } public UserModuleDefinition Module { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "PriceList",
      "Path": "FiloGH.Core/Entities/PriceList.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "Currency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "UnitPrice",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18, 4)\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ValidFrom",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ValidTo",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsBasePriceList",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class PriceList : IEntity\u003Cint\u003E { public int Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public byte CurrencyId { get; set; } public required Currency Currency { get; set; } = null!; [Column(TypeName = \u0022decimal(18, 4)\u0022)] public decimal UnitPrice { get; set; } [MaxLength(500)] public string? Description { get; set; } public bool IsActive { get; set; } = true; public DateTimeOffset ValidFrom { get; set; } = DateTimeOffset.Now; public DateTimeOffset? ValidTo { get; set; } public bool IsBasePriceList { get; set; } = false; } }"
    },
    {
      "Class": "PriceListService",
      "Path": "FiloGH.Application/Services/Concrete/PriceListService.cs",
      "Kind": "Entity",
      "BaseName": "IPriceListService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.Services.Abstract; using FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Query; using System; using System.Collections.Generic; using System.Linq; using System.Linq.Expressions; using System.Threading.Tasks; namespace FiloGH.Application.Services.Concrete { public class PriceListService : IPriceListService { private readonly IUnitOfWork _unitOfWork; private readonly IGenericRepository\u003CPriceList, int\u003E _priceListRepository; public PriceListService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; _priceListRepository = _unitOfWork.GetRepository\u003CPriceList, int\u003E(); } public async Task\u003CList\u003CPriceList\u003E\u003E GetAllAsync( Expression\u003CFunc\u003CPriceList, bool\u003E\u003E? filter = null, Func\u003CIQueryable\u003CPriceList\u003E, IOrderedQueryable\u003CPriceList\u003E\u003E? orderBy = null, Func\u003CIQueryable\u003CPriceList\u003E, IIncludableQueryable\u003CPriceList, object\u003E\u003E? include = null, bool disableTracking = true) { Func\u003CIQueryable\u003CPriceList\u003E, IIncludableQueryable\u003CPriceList, object\u003E\u003E defaultInclude = source =\u003E source.Include(pl =\u003E pl.Currency!); var entities = await _priceListRepository.GetAllAsync( filter: filter, orderBy: orderBy, include: include ?? defaultInclude, disableTracking: disableTracking ); if (orderBy == null) { return entities.OrderBy(pl =\u003E pl.Name).ToList(); } return entities.ToList(); } async Task\u003CIEnumerable\u003CPriceList\u003E\u003E IBaseService\u003CPriceList, int\u003E.GetAllAsync( Expression\u003CFunc\u003CPriceList, bool\u003E\u003E? filter, Func\u003CIQueryable\u003CPriceList\u003E, IOrderedQueryable\u003CPriceList\u003E\u003E? orderBy, Func\u003CIQueryable\u003CPriceList\u003E, IIncludableQueryable\u003CPriceList, object\u003E\u003E? include, bool disableTracking) { return await GetAllAsync(filter, orderBy, include, disableTracking); } public async Task\u003CPriceList?\u003E GetByIdAsync(int id, string? includeProperties = null) { return await _priceListRepository.GetByIdAsync( id, disableTracking: false, includeProperties: includeProperties ?? \u0022Currency\u0022 ); } public async Task AddAsync(PriceList priceList) { if (priceList.Currency != null \u0026\u0026 priceList.CurrencyId != 0) { priceList.Currency = null!; } await _priceListRepository.AddAsync(priceList); await _unitOfWork.SaveAsync(); } public async Task UpdateAsync(PriceList priceList) { var existingPriceList = await _priceListRepository.GetByIdAsync(priceList.Id, disableTracking: false); if (existingPriceList == null) { throw new KeyNotFoundException($\u0022PriceList with ID {priceList.Id} not found.\u0022); } existingPriceList.Name = priceList.Name; existingPriceList.Code = priceList.Code; existingPriceList.IsActive = priceList.IsActive; existingPriceList.ValidFrom = priceList.ValidFrom; existingPriceList.ValidTo = priceList.ValidTo; existingPriceList.IsBasePriceList = priceList.IsBasePriceList; existingPriceList.CurrencyId = priceList.CurrencyId; await _unitOfWork.SaveAsync(); } public async Task DeleteAsync(int id) { await _priceListRepository.DeleteAsync(id); await _unitOfWork.SaveAsync(); } } }"
    },
    {
      "Class": "Product",
      "Path": "FiloGH.Core/Entities/Product.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ProductCode",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(1000)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductCategoryId",
          "Attributes": []
        },
        {
          "Type": "ProductCategory",
          "Name": "Category",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "DesignCode",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "BrandId",
          "Attributes": []
        },
        {
          "Type": "Brand?",
          "Name": "Brand",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CProductVariant\u003E",
          "Name": "Variants",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class Product : IEntity\u003Cint\u003E { public int Id { get; set; } [MaxLength(50)] public required string ProductCode { get; set; } [MaxLength(255)] public required string Name { get; set; } [MaxLength(1000)] public string? Description { get; set; } public bool IsActive { get; set; } = true; public int ProductCategoryId { get; set; } public required ProductCategory Category { get; set; } = null!; [MaxLength(50)] public string? DesignCode { get; set; } public byte? BrandId { get; set; } public Brand? Brand { get; set; } public ICollection\u003CProductVariant\u003E Variants { get; set; } = new List\u003CProductVariant\u003E(); } }"
    },
    {
      "Class": "ProductCategory",
      "Path": "FiloGH.Core/Entities/ProductCategory.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ParentId",
          "Attributes": []
        },
        {
          "Type": "ProductCategory?",
          "Name": "Parent",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CProductCategory\u003E",
          "Name": "Children",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class ProductCategory { public int Id { get; set; } [MaxLength(255)] public required string Name { get; set; } [MaxLength(50)] public string? Code { get; set; } public bool IsActive { get; set; } = true; public int? ParentId { get; set; } public ProductCategory? Parent { get; set; } public ICollection\u003CProductCategory\u003E Children { get; set; } = new List\u003CProductCategory\u003E(); } }"
    },
    {
      "Class": "ProductCategoryCreateDto",
      "Path": "FiloGH.Application/DTOs/ProductCategory/ProductCategoryCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.ProductCategory { public record ProductCategoryCreateDto { [Required(ErrorMessage = \u0022Kategori Kodu zorunludur.\u0022)] [MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)] public required string Code { get; init; } [Required(ErrorMessage = \u0022Kategori Ad\u0131 zorunludur.\u0022)] [MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)] public required string Name { get; init; } [MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)] public string? Description { get; init; } public bool IsActive { get; init; } = true; } }"
    },
    {
      "Class": "ProductCategoryGetDto",
      "Path": "FiloGH.Application/DTOs/ProductCategory/ProductCategoryGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CreatedByName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System; using System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.ProductCategory { public record ProductCategoryGetDto { public required byte Id { get; init; } public required string Code { get; init; } public required string Name { get; init; } public string? Description { get; init; } public required bool IsActive { get; init; } public required DateTimeOffset CreatedAt { get; init; } public required int CreatedById { get; init; } public string? CreatedByName { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "ProductCategoryUpdateDto",
      "Path": "FiloGH.Application/DTOs/ProductCategory/ProductCategoryUpdateDto.cs",
      "Kind": "Dto",
      "BaseName": "ProductCategoryCreateDto",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Kategori Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.ProductCategory { public record ProductCategoryUpdateDto : ProductCategoryCreateDto { [Required(ErrorMessage = \u0022Kategori Kimli\u011Fi zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Kategori Kimli\u011Fi belirtilmelidir.\u0022)] public required byte Id { get; init; } } }"
    },
    {
      "Class": "ProductCreateDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "string",
          "Name": "ProductCode",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022\u00DCr\u00FCn Kodu en fazla 50 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255, ErrorMessage = \u0022\u00DCr\u00FCn Ad\u0131 en fazla 255 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "ProductCategoryId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Kategori ID\u0027si zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(1000, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 1000 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "DesignCode",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Tasar\u0131m Kodu en fazla 50 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "BrandId",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Metal Tipi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "AverageWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Ortalama A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MinimumWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Minimum A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MaximumWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Maksimum A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CostPrice",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Maliyet Fiyat\u0131 zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "SellingPrice",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Sat\u0131\u015F Fiyat\u0131 zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "CanBeSold",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Sat\u0131\u015F Durumu zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "CanBeProduced",
          "Attributes": [
            "[Required(ErrorMessage = \u0022\u00DCretim Durumu zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CProductVariantCreateDto\u003E",
          "Name": "Variants",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Product { public record ProductCreateDto { [Required(ErrorMessage = \u0022\u00DCr\u00FCn Kodu zorunludur.\u0022)] [MaxLength(50, ErrorMessage = \u0022\u00DCr\u00FCn Kodu en fazla 50 karakter olabilir.\u0022)] public required string ProductCode { get; init; } [Required(ErrorMessage = \u0022\u00DCr\u00FCn Ad\u0131 zorunludur.\u0022)] [MaxLength(255, ErrorMessage = \u0022\u00DCr\u00FCn Ad\u0131 en fazla 255 karakter olabilir.\u0022)] public required string Name { get; init; } [Required(ErrorMessage = \u0022Kategori ID\u0027si zorunludur.\u0022)] public required int ProductCategoryId { get; init; } [MaxLength(1000, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 1000 karakter olabilir.\u0022)] public string? Description { get; init; } [MaxLength(50, ErrorMessage = \u0022Tasar\u0131m Kodu en fazla 50 karakter olabilir.\u0022)] public string? DesignCode { get; init; } public byte? BrandId { get; init; } public bool IsActive { get; init; } = true; [Required(ErrorMessage = \u0022Metal Tipi zorunludur.\u0022)] public required byte MetalTypeId { get; init; } [Required(ErrorMessage = \u0022Ortalama A\u011F\u0131rl\u0131k zorunludur.\u0022)] public required decimal AverageWeight { get; init; } [Required(ErrorMessage = \u0022Minimum A\u011F\u0131rl\u0131k zorunludur.\u0022)] public required decimal MinimumWeight { get; init; } [Required(ErrorMessage = \u0022Maksimum A\u011F\u0131rl\u0131k zorunludur.\u0022)] public required decimal MaximumWeight { get; init; } [Required(ErrorMessage = \u0022Maliyet Fiyat\u0131 zorunludur.\u0022)] public required decimal CostPrice { get; init; } [Required(ErrorMessage = \u0022Sat\u0131\u015F Fiyat\u0131 zorunludur.\u0022)] public required decimal SellingPrice { get; init; } [Required(ErrorMessage = \u0022Sat\u0131\u015F Durumu zorunludur.\u0022)] public required bool CanBeSold { get; init; } [Required(ErrorMessage = \u0022\u00DCretim Durumu zorunludur.\u0022)] public required bool CanBeProduced { get; init; } public ICollection\u003CProductVariantCreateDto\u003E Variants { get; init; } = new List\u003CProductVariantCreateDto\u003E(); } }"
    },
    {
      "Class": "ProductGetDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 19,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductCategoryId",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ProductCategoryName",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "MetalTypeName",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "AverageWeight",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MinimumWeight",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MaximumWeight",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "CostPrice",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "SellingPrice",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "CanBeSold",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "CanBeProduced",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CreatedByName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Product { public record ProductGetDto { public required int Id { get; init; } public required string Code { get; init; } public required string Name { get; init; } public required int ProductCategoryId { get; init; } public required string ProductCategoryName { get; init; } public required byte MetalTypeId { get; init; } public required string MetalTypeName { get; init; } public required decimal AverageWeight { get; init; } public required decimal MinimumWeight { get; init; } public required decimal MaximumWeight { get; init; } public required decimal CostPrice { get; init; } public required decimal SellingPrice { get; init; } public required bool IsActive { get; init; } public required bool CanBeSold { get; init; } public required bool CanBeProduced { get; init; } public required DateTimeOffset CreatedAt { get; init; } public required int CreatedById { get; init; } public string? CreatedByName { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "ProductImage",
      "Path": "FiloGH.Core/Entities/ProductImage.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ImageUrl",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        },
        {
          "Type": "short",
          "Name": "SortOrder",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "AltText",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "ImageTypeId",
          "Attributes": []
        },
        {
          "Type": "ImageType?",
          "Name": "ImageType",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class ProductImage { public int Id { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; [MaxLength(500)] public required string ImageUrl { get; set; } public short SortOrder { get; set; } = 1; [MaxLength(255)] public string? AltText { get; set; } public byte? ImageTypeId { get; set; } public ImageType? ImageType { get; set; } } }"
    },
    {
      "Class": "ProductionOrder",
      "Path": "FiloGH.Core/Entities/ProductionOrder.cs",
      "Kind": "Entity",
      "PropertyCount": 18,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "OrderNumber",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "ProductionOrderStatus",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "BomId",
          "Attributes": []
        },
        {
          "Type": "BillOfMaterials",
          "Name": "Bom",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "RoutingId",
          "Attributes": []
        },
        {
          "Type": "ProductionRouting",
          "Name": "Routing",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ScheduledStartDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ScheduledEndDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ActualStartDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ActualEndDate",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CProductionTransaction\u003E",
          "Name": "Transactions",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionOrder { public int Id { get; set; } [MaxLength(20)] public required string OrderNumber { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal Quantity { get; set; } public byte StatusId { get; set; } public required ProductionOrderStatus Status { get; set; } = null!; public int BomId { get; set; } public required BillOfMaterials Bom { get; set; } = null!; public int RoutingId { get; set; } public required ProductionRouting Routing { get; set; } = null!; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public DateTimeOffset ScheduledStartDate { get; set; } public DateTimeOffset ScheduledEndDate { get; set; } public DateTimeOffset? ActualStartDate { get; set; } public DateTimeOffset? ActualEndDate { get; set; } public ICollection\u003CProductionTransaction\u003E Transactions { get; set; } = new List\u003CProductionTransaction\u003E(); } }"
    },
    {
      "Class": "ProductionOrderStatus",
      "Path": "FiloGH.Core/Entities/ProductionOrderStatus.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionOrderStatus { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "ProductionRouting",
      "Path": "FiloGH.Core/Entities/ProductionRouting.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(150)]"
          ]
        },
        {
          "Type": "short",
          "Name": "TotalTimeHours",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CProductionRoutingStep\u003E",
          "Name": "Steps",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Core.Entities { public class ProductionRouting { public int Id { get; set; } [MaxLength(50)] public required string Code { get; set; } [MaxLength(150)] public required string Name { get; set; } public short TotalTimeHours { get; set; } = 0; public bool IsActive { get; set; } = true; public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.Now; public ICollection\u003CProductionRoutingStep\u003E Steps { get; set; } = new List\u003CProductionRoutingStep\u003E(); } }"
    },
    {
      "Class": "ProductionRoutingItem",
      "Path": "FiloGH.Core/Entities/ProductionRoutingItem.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductionRoutingId",
          "Attributes": []
        },
        {
          "Type": "ProductionRouting",
          "Name": "ProductionRouting",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "RoutingPurposeId",
          "Attributes": []
        },
        {
          "Type": "RoutingPurpose",
          "Name": "RoutingPurpose",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsDefault",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Core.Entities { public class ProductionRoutingItem { public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; public int ProductionRoutingId { get; set; } public required ProductionRouting ProductionRouting { get; set; } = null!; public byte RoutingPurposeId { get; set; } public required RoutingPurpose RoutingPurpose { get; set; } = null!; public bool IsDefault { get; set; } = true; } }"
    },
    {
      "Class": "ProductionRoutingStep",
      "Path": "FiloGH.Core/Entities/ProductionRoutingStep.cs",
      "Kind": "Entity",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "RoutingId",
          "Attributes": []
        },
        {
          "Type": "ProductionRouting",
          "Name": "Routing",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "Sequence",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "WorkCenterId",
          "Attributes": []
        },
        {
          "Type": "ProductionWorkCenter",
          "Name": "WorkCenter",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "TimeRequiredHours",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CostPerHour",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsInspectionStep",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Instructions",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionRoutingStep { public int Id { get; set; } public int RoutingId { get; set; } public required ProductionRouting Routing { get; set; } = null!; public short Sequence { get; set; } public byte WorkCenterId { get; set; } public required ProductionWorkCenter WorkCenter { get; set; } = null!; [Column(TypeName = \u0022decimal(5,2)\u0022)] public decimal TimeRequiredHours { get; set; } [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal CostPerHour { get; set; } = 0.0M; public bool IsInspectionStep { get; set; } = false; [MaxLength(500)] public string? Instructions { get; set; } } }"
    },
    {
      "Class": "ProductionService",
      "Path": "FiloGH.Application/Services/ProductionService.cs",
      "Kind": "Entity",
      "BaseName": "IProductionService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using FiloGH.Core.Entities; using FiloGH.Application.Interfaces; using System.Threading.Tasks; using System; using Microsoft.EntityFrameworkCore; using System.Linq; using System.Collections.Generic; using Microsoft.EntityFrameworkCore.Query; namespace FiloGH.Application.Services { public class ProductionService : IProductionService { private readonly IUnitOfWork _unitOfWork; private const byte StatusNewId = 1; private const byte OperationStatusStartedId = 2; private const byte OperationStatusCompletedId = 3; public ProductionService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; } public async Task\u003CWorkOrder\u003E CreateWorkOrderFromSourceAsync(int sourceId, string sourceType, byte employeeId) { if (sourceType != \u0022ORDER\u0022) { throw new NotImplementedException(\u0022\u015Eu anda sadece sipari\u015Ften i\u015F emri olu\u015Fturma desteklenmektedir.\u0022); } var orderRepository = _unitOfWork.GetRepository\u003COrder, int\u003E(); var orders = await orderRepository.GetAllAsync( filter: o =\u003E o.Id == sourceId, include: i =\u003E (IIncludableQueryable\u003COrder, object\u003E)i .Include(o =\u003E o.OrderLines!) .ThenInclude(ol =\u003E ol.ProductVariant) ); var order = orders.FirstOrDefault(); if (order == null || order.OrderLines == null || !order.OrderLines.Any()) { throw new InvalidOperationException($\u0022Kaynak sipari\u015F (ID: {sourceId}) bulunamad\u0131 veya sat\u0131r i\u00E7ermiyor.\u0022); } var firstLine = order.OrderLines.First(); var tempUser = new User { Id = employeeId, Username = \u0022TEMP\u0022, PasswordHash = \u0022TEMP\u0022, FirstName = \u0022T\u0022, LastName = \u0022T\u0022, PrimaryBranch = null!, UserRole = null! }; var tempStatus = new WorkOrderStatus { Id = StatusNewId, Code = \u0022NEW\u0022, Name = \u0022Yeni Olu\u015Fturuldu\u0022 }; var tempProductVariant = new ProductVariant { Id = firstLine.ProductVariantId!.Value, Name = \u0022TEMP\u0022, StockUnit = null!, MetalColor = null!, MetalPurity = null!, Product = null!, SKU = null! }; var woRepository = _unitOfWork.GetRepository\u003CWorkOrder, int\u003E(); var newWorkOrder = new WorkOrder { OrderId = order.Id, ProductVariantId = firstLine.ProductVariantId!.Value, ProductVariant = tempProductVariant, StatusId = StatusNewId, Status = tempStatus, CreatedById = employeeId, CreatedBy = tempUser, WorkOrderNumber = $\u0022WO-{DateTime.Now.Year}-{sourceId}\u0022, CreatedDate = DateTimeOffset.UtcNow, DueDate = order.RequiredDate ?? DateTimeOffset.UtcNow.AddDays(7), Quantity = firstLine.StockQuantity, TargetMetalWeight = firstLine.StockQuantity * 5, IssuedMetalWeight = 0, CalculatedScrapWeight = 0, Operations = new List\u003CWorkOrderOperation\u003E(), }; await woRepository.AddAsync(newWorkOrder); return newWorkOrder; } public async Task\u003Cbool\u003E StartOperationAsync(int operationId, byte employeeId) { var operationRepository = _unitOfWork.GetRepository\u003CWorkOrderOperation, int\u003E(); var operation = await operationRepository.GetByIdAsync(operationId); if (operation == null || operation.StatusId != StatusNewId) { return false; } operation.StatusId = OperationStatusStartedId; operation.StartedAt = DateTimeOffset.UtcNow; operationRepository.Update(operation); return true; } public async Task\u003Cbool\u003E CompleteOperationAsync(int operationId, byte employeeId, decimal metalOutputWeight) { var operationRepository = _unitOfWork.GetRepository\u003CWorkOrderOperation, int\u003E(); var operation = await operationRepository.GetByIdAsync(operationId); if (operation == null || operation.StatusId != OperationStatusStartedId) { return false; } operation.StatusId = OperationStatusCompletedId; operation.CompletedAt = DateTimeOffset.UtcNow; operation.MetalOutputWeight = metalOutputWeight; operationRepository.Update(operation); return true; } public Task\u003CWorkOrderOperationLog\u003E LogTimeAndMetalAdjustmentAsync(int operationId, byte employeeId, DateTimeOffset startTime, DateTimeOffset endTime, decimal metalAdjustmentWeight, string adjustmentType, string? notes) { throw new NotImplementedException(); } public Task\u003CWorkOrder?\u003E GetWorkOrderDetailsAsync(int workOrderId) { throw new NotImplementedException(); } public Task\u003Cdecimal\u003E GetTotalMetalIssuedToWorkOrderAsync(int workOrderId) { throw new NotImplementedException(); } } }"
    },
    {
      "Class": "ProductionTransaction",
      "Path": "FiloGH.Core/Entities/ProductionTransaction.cs",
      "Kind": "Entity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "ProductionOrder",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "RoutingStepId",
          "Attributes": []
        },
        {
          "Type": "ProductionRoutingStep?",
          "Name": "RoutingStep",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "TransactionTypeId",
          "Attributes": []
        },
        {
          "Type": "ProductionTransactionType",
          "Name": "TransactionType",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "TransactionDate",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductionOrderId",
          "Attributes": []
        },
        {
          "Type": "ProductionOrder",
          "Name": "ProductionOrder",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant?",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "UnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "Unit",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionTransaction { public long Id { get; set; } public int OrderId { get; set; } public required ProductionOrder Order { get; set; } = null!; public int? RoutingStepId { get; set; } public ProductionRoutingStep? RoutingStep { get; set; } public byte TransactionTypeId { get; set; } public required ProductionTransactionType TransactionType { get; set; } = null!; public DateTimeOffset TransactionDate { get; set; } = DateTimeOffset.Now; public int ProductionOrderId { get; set; } public required ProductionOrder ProductionOrder { get; set; } = null!; public int? ProductVariantId { get; set; } public ProductVariant? ProductVariant { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Quantity { get; set; } public byte UnitId { get; set; } public required UnitOfMeasure Unit { get; set; } = null!; [MaxLength(500)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "ProductionTransactionType",
      "Path": "FiloGH.Core/Entities/ProductionTransactionType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsInventoryInflow",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionTransactionType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsInventoryInflow { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "ProductionWorkCenter",
      "Path": "FiloGH.Core/Entities/ProductionWorkCenter.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "short",
          "Name": "CapacityPerShift",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductionWorkCenter { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public short CapacityPerShift { get; set; } = 8; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "ProductListDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductListDto.cs",
      "Kind": "Dto",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ProductCategoryName",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "TotalStockQuantity",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "SKU",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Application.DTOs.Product { public record ProductListDto { public required int Id { get; init; } public required string Name { get; init; } public required string ProductCategoryName { get; init; } public required decimal TotalStockQuantity { get; init; } public required string SKU { get; init; } } }"
    },
    {
      "Class": "ProductMedia",
      "Path": "FiloGH.Models/Entities/ProductMedia.cs",
      "Kind": "Entity",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "Product",
          "Name": "Product",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "Height",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "Width",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Alt",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "Version",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class ProductMedia { public int Id { get; set; } public byte Position { get; set; } public int ProductId { get; set; } public required Product Product { get; set; } public int? Height { get; set; } public int? Width { get; set; } [MaxLength(255)] public string? Alt { get; set; } public byte Version { get; set; } } }"
    },
    {
      "Class": "ProductOption",
      "Path": "FiloGH.Models/Entities/ProductOption.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "Product",
          "Name": "Product",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductOptionDefinitionId",
          "Attributes": []
        },
        {
          "Type": "ProductOptionDefinition",
          "Name": "ProductOptionDefinition",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Models.Entities { public class ProductOption { public int Id { get; set; } public int ProductId { get; set; } public required Product Product { get; set; } public byte Position { get; set; } public int ProductOptionDefinitionId { get; set; } public required ProductOptionDefinition ProductOptionDefinition { get; set; } } }"
    },
    {
      "Class": "ProductOptionDefinition",
      "Path": "FiloGH.Models/Entities/ProductOptionDefinition.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Enabled",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class ProductOptionDefinition { public int Id { get; set; } public bool Enabled { get; set; } public int Position { get; set; } [MaxLength(255)] public required string Name { get; set; } } }"
    },
    {
      "Class": "ProductService",
      "Path": "FiloGH.Application/Services/Concrete/ProductService.cs",
      "Kind": "Entity",
      "BaseName": "IProductService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.DTOs; using FiloGH.Application.DTOs.Product; using FiloGH.Application.Interfaces; using FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; namespace FiloGH.Application.Services.Concrete { namespace FiloGH.Application.Services.Concrete { public class ProductService : IProductService { private readonly IUnitOfWork _unitOfWork; public ProductService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; } public async Task\u003CIEnumerable\u003CProductListDto\u003E\u003E GetProductListAsync() { var productRepository = _unitOfWork.GetRepository\u003CProduct, int\u003E(); var products = await productRepository.GetAllAsync( filter: p =\u003E p.IsActive, include: source =\u003E source.Include(p =\u003E p.Category) .Include(p =\u003E p.Variants!) ); return products.Select(p =\u003E new ProductListDto { Id = p.Id, Name = p.Name, ProductCategoryName = p.Category.Name, TotalStockQuantity = p.Variants.Where(v =\u003E v.IsActive).Sum(v =\u003E v.StandardWeight), SKU = p.Variants.FirstOrDefault(v =\u003E v.IsActive)?.SKU ?? \u0022N/A\u0022 }).ToList(); } public async Task\u003CProductGetDto?\u003E GetProductDetailAsync(int productId) { var productRepository = _unitOfWork.GetRepository\u003CProduct, int\u003E(); var productEntity = await productRepository.GetByIdAsync( productId, disableTracking: true, includeProperties: \u0022Category,Brand,CreatedBy,Variants.MetalPurity.BaseMetal\u0022 ); if (productEntity == null) return null; var primaryVariant = productEntity.Variants.FirstOrDefault(); var metalTypeId = primaryVariant?.MetalPurity?.BaseMetal?.Id; var metalTypeName = primaryVariant?.MetalPurity?.BaseMetal?.Name; return new ProductGetDto { Id = productEntity.Id, Code = productEntity.ProductCode, Name = productEntity.Name, ProductCategoryId = productEntity.ProductCategoryId, ProductCategoryName = productEntity.Category.Name, MetalTypeId = metalTypeId ?? 0, MetalTypeName = metalTypeName ?? \u0022N/A\u0022, AverageWeight = 0, MinimumWeight = 0, MaximumWeight = 0, CostPrice = 0, SellingPrice = 0, IsActive = productEntity.IsActive, CanBeSold = true, CanBeProduced = true, CreatedAt = DateTimeOffset.Now, CreatedById = 1, CreatedByName = \u0022System/Unknown\u0022, ModifiedAt = null, }; } public async Task\u003CProductGetDto\u003E CreateProductAsync(ProductCreateDto productDto) { var productRepository = _unitOfWork.GetRepository\u003CProduct, int\u003E(); var productEntity = new Product { ProductCode = productDto.ProductCode, Name = productDto.Name, ProductCategoryId = productDto.ProductCategoryId, IsActive = productDto.IsActive, DesignCode = productDto.DesignCode, BrandId = productDto.BrandId, Category = null!, Variants = productDto.Variants.Select(v =\u003E new ProductVariant { SKU = v.SKU, Name = v.Name, StockUnitId = v.StockUnitId, MetalPurityId = v.MetalPurityId, MetalColorId = v.MetalColorId, StandardWeight = v.StandardWeight, StandardCost = v.StandardCost, IsWeightBasedPricing = v.IsWeightBasedPricing, Product = null!, StockUnit = null!, }).ToList() }; await productRepository.AddAsync(productEntity); await _unitOfWork.SaveAsync(); var createdProduct = await productRepository.GetByIdAsync( productEntity.Id, disableTracking: true, includeProperties: \u0022Category,Brand,CreatedBy,Variants.MetalPurity.BaseMetal\u0022 ); if (createdProduct == null) { throw new InvalidOperationException(\u0022Yeni olu\u015Fturulan \u00FCr\u00FCn veritaban\u0131ndan al\u0131namad\u0131.\u0022); } var primaryVariant = createdProduct.Variants.FirstOrDefault(); return new ProductGetDto { Id = createdProduct.Id, Code = createdProduct.ProductCode, Name = createdProduct.Name, ProductCategoryId = createdProduct.ProductCategoryId, ProductCategoryName = createdProduct.Category.Name, MetalTypeId = primaryVariant?.MetalPurity?.BaseMetal?.Id ?? 0, MetalTypeName = primaryVariant?.MetalPurity?.BaseMetal?.Name ?? \u0022N/A\u0022, AverageWeight = productDto.AverageWeight, MinimumWeight = productDto.MinimumWeight, MaximumWeight = productDto.MaximumWeight, CostPrice = productDto.CostPrice, SellingPrice = productDto.SellingPrice, IsActive = createdProduct.IsActive, CanBeSold = productDto.CanBeSold, CanBeProduced = productDto.CanBeProduced, CreatedAt = DateTimeOffset.Now, CreatedById = 1, CreatedByName = \u0022System/Unknown\u0022, ModifiedAt = null, }; } public async Task UpdateProductAsync(ProductUpdateDto productDto) { var productRepository = _unitOfWork.GetRepository\u003CProduct, int\u003E(); var existingProduct = await productRepository.GetByIdAsync(productDto.Id, disableTracking: false); if (existingProduct == null) { throw new KeyNotFoundException($\u0022\u00DCr\u00FCn ID {productDto.Id} ile bulunamad\u0131.\u0022); } existingProduct.Name = productDto.Name; existingProduct.ProductCategoryId = productDto.ProductCategoryId; existingProduct.IsActive = productDto.IsActive; productRepository.Update(existingProduct); await _unitOfWork.SaveAsync(); } public async Task\u003Cbool\u003E DeactivateProductAsync(int productId) { var productRepository = _unitOfWork.GetRepository\u003CProduct, int\u003E(); var existingProduct = await productRepository.GetByIdAsync(productId, disableTracking: false, includeProperties: \u0022Variants\u0022); if (existingProduct == null) return false; existingProduct.IsActive = false; foreach (var variant in existingProduct.Variants) { variant.IsActive = false; } productRepository.Update(existingProduct); return await _unitOfWork.SaveAsync() \u003E 0; } public async Task\u003Cbool\u003E DeactivateVariantAsync(int variantId) { var variantRepository = _unitOfWork.GetRepository\u003CProductVariant, int\u003E(); var existingVariant = await variantRepository.GetByIdAsync(variantId, disableTracking: false); if (existingVariant == null) return false; existingVariant.IsActive = false; variantRepository.Update(existingVariant); return await _unitOfWork.SaveAsync() \u003E 0; } public Task\u003CProductVariantGetDto\u003E SaveVariantAsync(ProductVariantCreateDto variantDto) { throw new NotImplementedException(\u0022SaveVariantAsync metodu hen\u00FCz tam olarak uygulanmam\u0131\u015Ft\u0131r.\u0022); } } } }"
    },
    {
      "Class": "ProductType",
      "Path": "FiloGH.Models/Entities/ProductType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Enabled",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class ProductType { public int Id { get; set; } public bool Enabled { get; set; } public int Position { get; set; } [MaxLength(255)] public required string Name { get; set; } } }"
    },
    {
      "Class": "ProductUpdateDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductUpdateDto.cs",
      "Kind": "Dto",
      "BaseName": "ProductCreateDto",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": [
            "[Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u00DCr\u00FCn Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "ProductCode",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022\u00DCr\u00FCn Kodu en fazla 50 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255, ErrorMessage = \u0022\u00DCr\u00FCn Ad\u0131 en fazla 255 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "ProductCategoryId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Kategori ID\u0027si zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(1000, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 1000 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "DesignCode",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Tasar\u0131m Kodu en fazla 50 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "BrandId",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Metal Tipi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "AverageWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Ortalama A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MinimumWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Minimum A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MaximumWeight",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Maksimum A\u011F\u0131rl\u0131k zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CostPrice",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Maliyet Fiyat\u0131 zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "SellingPrice",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Sat\u0131\u015F Fiyat\u0131 zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "CanBeSold",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Sat\u0131\u015F Durumu zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "CanBeProduced",
          "Attributes": [
            "[Required(ErrorMessage = \u0022\u00DCretim Durumu zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CProductVariantCreateDto\u003E",
          "Name": "Variants",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Product { public record ProductUpdateDto : ProductCreateDto { [Required(ErrorMessage = \u0022\u00DCr\u00FCn Kimli\u011Fi zorunludur.\u0022)] [Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u00DCr\u00FCn Kimli\u011Fi belirtilmelidir.\u0022)] public required int Id { get; init; } } }"
    },
    {
      "Class": "ProductVariant",
      "Path": "FiloGH.Core/Entities/ProductVariant.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 20,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "Product",
          "Name": "Product",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Barcode",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "SKU",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "SupplierCode",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "MetalPurity?",
          "Name": "MetalPurity",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalColorId",
          "Attributes": []
        },
        {
          "Type": "MetalColor?",
          "Name": "MetalColor",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "Size",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(6,1)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "Length",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(6,1)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "StandardWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "StandardCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsWeightBasedPricing",
          "Attributes": []
        },
        {
          "Type": "BillOfMaterials?",
          "Name": "BillOfMaterials",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StockUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "StockUnit",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ProductVariant : IEntity\u003Cint\u003E { public int Id { get; set; } public int ProductId { get; set; } public required Product Product { get; set; } = null!; [MaxLength(100)] public string? Barcode { get; set; } [MaxLength(100)] public required string SKU { get; set; } [MaxLength(100)] public string? SupplierCode { get; set; } [MaxLength(255)] public required string Name { get; set; } public bool IsActive { get; set; } = true; public byte? MetalPurityId { get; set; } public MetalPurity? MetalPurity { get; set; } = null!; public byte? MetalColorId { get; set; } public MetalColor? MetalColor { get; set; } [Column(TypeName = \u0022decimal(6,1)\u0022)] public decimal? Size { get; set; } [Column(TypeName = \u0022decimal(6,1)\u0022)] public decimal? Length { get; set; } [Column(TypeName = \u0022decimal(10,4)\u0022)] public decimal StandardWeight { get; set; } = 0.0M; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal StandardCost { get; set; } = 0.0M; public bool IsWeightBasedPricing { get; set; } = false; public BillOfMaterials? BillOfMaterials { get; set; } public byte StockUnitId { get; set; } public required UnitOfMeasure StockUnit { get; set; } = null!; } }"
    },
    {
      "Class": "ProductVariant_Finalized",
      "Path": "FiloGH.Infrastructure/Migrations/20251011191059_ProductVariant_Finalized.cs",
      "Kind": "Entity",
      "BaseName": "Migration",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing Microsoft.EntityFrameworkCore.Migrations; #nullable disable namespace FiloGH.Infrastructure.Migrations { public partial class ProductVariant_Finalized : Migration { protected override void Up(MigrationBuilder migrationBuilder) { migrationBuilder.DropForeignKey( name: \u0022FK_Products_StockUnitOfMeasures_StockUnitId\u0022, table: \u0022Products\u0022); migrationBuilder.DropForeignKey( name: \u0022FK_ProductVariants_UnitOfMeasures_BaseUnitId\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropTable( name: \u0022StockUnitOfMeasures\u0022); migrationBuilder.DropIndex( name: \u0022IX_Products_StockUnitId\u0022, table: \u0022Products\u0022); migrationBuilder.DropColumn( name: \u0022MetalColor\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022StockUnitId\u0022, table: \u0022Products\u0022); migrationBuilder.RenameColumn( name: \u0022BaseUnitId\u0022, table: \u0022ProductVariants\u0022, newName: \u0022StockUnitId\u0022); migrationBuilder.RenameIndex( name: \u0022IX_ProductVariants_BaseUnitId\u0022, table: \u0022ProductVariants\u0022, newName: \u0022IX_ProductVariants_StockUnitId\u0022); migrationBuilder.AddColumn\u003Cbyte\u003E( name: \u0022DecimalPlaces\u0022, table: \u0022UnitOfMeasures\u0022, type: \u0022tinyint\u0022, nullable: false, defaultValue: (byte)0); migrationBuilder.AlterColumn\u003Cdecimal\u003E( name: \u0022Size\u0022, table: \u0022ProductVariants\u0022, type: \u0022decimal(6,1)\u0022, nullable: true, oldClrType: typeof(decimal), oldType: \u0022decimal(4,1)\u0022, oldNullable: true); migrationBuilder.AlterColumn\u003Cbyte\u003E( name: \u0022MetalPurityId\u0022, table: \u0022ProductVariants\u0022, type: \u0022tinyint\u0022, nullable: true, oldClrType: typeof(byte), oldType: \u0022tinyint\u0022); migrationBuilder.AddColumn\u003Cstring\u003E( name: \u0022Barcode\u0022, table: \u0022ProductVariants\u0022, type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: true); migrationBuilder.AddColumn\u003Cbool\u003E( name: \u0022IsWeightBasedPricing\u0022, table: \u0022ProductVariants\u0022, type: \u0022bit\u0022, nullable: false, defaultValue: false); migrationBuilder.AddColumn\u003Cdecimal\u003E( name: \u0022Length\u0022, table: \u0022ProductVariants\u0022, type: \u0022decimal(6,1)\u0022, nullable: true); migrationBuilder.AddColumn\u003Cbyte\u003E( name: \u0022MetalColorId\u0022, table: \u0022ProductVariants\u0022, type: \u0022tinyint\u0022, nullable: true); migrationBuilder.AddColumn\u003Cdecimal\u003E( name: \u0022StandardCost\u0022, table: \u0022ProductVariants\u0022, type: \u0022decimal(18,4)\u0022, nullable: false, defaultValue: 0m); migrationBuilder.AddColumn\u003Cdecimal\u003E( name: \u0022StandardWeight\u0022, table: \u0022ProductVariants\u0022, type: \u0022decimal(10,4)\u0022, nullable: false, defaultValue: 0m); migrationBuilder.AddColumn\u003Cstring\u003E( name: \u0022SupplierCode\u0022, table: \u0022ProductVariants\u0022, type: \u0022nvarchar(100)\u0022, maxLength: 100, nullable: true); migrationBuilder.CreateTable( name: \u0022MetalColor\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), HexCode = table.Column\u003Cstring\u003E(type: \u0022nvarchar(7)\u0022, maxLength: 7, nullable: true), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_MetalColor\u0022, x =\u003E x.Id); }); migrationBuilder.CreateIndex( name: \u0022IX_ProductVariants_MetalColorId\u0022, table: \u0022ProductVariants\u0022, column: \u0022MetalColorId\u0022); migrationBuilder.AddForeignKey( name: \u0022FK_ProductVariants_MetalColor_MetalColorId\u0022, table: \u0022ProductVariants\u0022, column: \u0022MetalColorId\u0022, principalTable: \u0022MetalColor\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_ProductVariants_UnitOfMeasures_StockUnitId\u0022, table: \u0022ProductVariants\u0022, column: \u0022StockUnitId\u0022, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); } protected override void Down(MigrationBuilder migrationBuilder) { migrationBuilder.DropForeignKey( name: \u0022FK_ProductVariants_MetalColor_MetalColorId\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropForeignKey( name: \u0022FK_ProductVariants_UnitOfMeasures_StockUnitId\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropTable( name: \u0022MetalColor\u0022); migrationBuilder.DropIndex( name: \u0022IX_ProductVariants_MetalColorId\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022DecimalPlaces\u0022, table: \u0022UnitOfMeasures\u0022); migrationBuilder.DropColumn( name: \u0022Barcode\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022IsWeightBasedPricing\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022Length\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022MetalColorId\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022StandardCost\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022StandardWeight\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.DropColumn( name: \u0022SupplierCode\u0022, table: \u0022ProductVariants\u0022); migrationBuilder.RenameColumn( name: \u0022StockUnitId\u0022, table: \u0022ProductVariants\u0022, newName: \u0022BaseUnitId\u0022); migrationBuilder.RenameIndex( name: \u0022IX_ProductVariants_StockUnitId\u0022, table: \u0022ProductVariants\u0022, newName: \u0022IX_ProductVariants_BaseUnitId\u0022); migrationBuilder.AlterColumn\u003Cdecimal\u003E( name: \u0022Size\u0022, table: \u0022ProductVariants\u0022, type: \u0022decimal(4,1)\u0022, nullable: true, oldClrType: typeof(decimal), oldType: \u0022decimal(6,1)\u0022, oldNullable: true); migrationBuilder.AlterColumn\u003Cbyte\u003E( name: \u0022MetalPurityId\u0022, table: \u0022ProductVariants\u0022, type: \u0022tinyint\u0022, nullable: false, defaultValue: (byte)0, oldClrType: typeof(byte), oldType: \u0022tinyint\u0022, oldNullable: true); migrationBuilder.AddColumn\u003Cstring\u003E( name: \u0022MetalColor\u0022, table: \u0022ProductVariants\u0022, type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false, defaultValue: \u0022\u0022); migrationBuilder.AddColumn\u003Cbyte\u003E( name: \u0022StockUnitId\u0022, table: \u0022Products\u0022, type: \u0022tinyint\u0022, nullable: false, defaultValue: (byte)0); migrationBuilder.CreateTable( name: \u0022StockUnitOfMeasures\u0022, columns: table =\u003E new { Id = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false) .Annotation(\u0022SqlServer:Identity\u0022, \u00221, 1\u0022), Code = table.Column\u003Cstring\u003E(type: \u0022nvarchar(10)\u0022, maxLength: 10, nullable: false), DecimalPlaces = table.Column\u003Cbyte\u003E(type: \u0022tinyint\u0022, nullable: false), IsActive = table.Column\u003Cbool\u003E(type: \u0022bit\u0022, nullable: false), Name = table.Column\u003Cstring\u003E(type: \u0022nvarchar(50)\u0022, maxLength: 50, nullable: false) }, constraints: table =\u003E { table.PrimaryKey(\u0022PK_StockUnitOfMeasures\u0022, x =\u003E x.Id); }); migrationBuilder.CreateIndex( name: \u0022IX_Products_StockUnitId\u0022, table: \u0022Products\u0022, column: \u0022StockUnitId\u0022); migrationBuilder.AddForeignKey( name: \u0022FK_Products_StockUnitOfMeasures_StockUnitId\u0022, table: \u0022Products\u0022, column: \u0022StockUnitId\u0022, principalTable: \u0022StockUnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); migrationBuilder.AddForeignKey( name: \u0022FK_ProductVariants_UnitOfMeasures_BaseUnitId\u0022, table: \u0022ProductVariants\u0022, column: \u0022BaseUnitId\u0022, principalTable: \u0022UnitOfMeasures\u0022, principalColumn: \u0022Id\u0022, onDelete: ReferentialAction.Restrict); } } }"
    },
    {
      "Class": "ProductVariantCreateDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductVariantCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "string?",
          "Name": "Barcode",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Barkod en fazla 100 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "SKU",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022SKU en fazla 100 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "SupplierCode",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Tedarik\u00E7i kodu en fazla 100 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255, ErrorMessage = \u0022Varyant ad\u0131 en fazla 255 karakter olabilir.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalColorId",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "Size",
          "Attributes": [
            "[Range(typeof(decimal), \u00220\u0022, \u002299999.9\u0022, ErrorMessage = \u0022Beden 0 ile 99.999,9 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "Length",
          "Attributes": [
            "[Range(typeof(decimal), \u00220\u0022, \u002299999.9\u0022, ErrorMessage = \u0022Uzunluk 0 ile 99.999,9 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "StandardWeight",
          "Attributes": [
            "[Range(typeof(decimal), \u00220\u0022, \u0022999999.9999\u0022, ErrorMessage = \u0022Standart a\u011F\u0131rl\u0131k 0 ile 999.999,9999 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "StandardCost",
          "Attributes": [
            "[Range(typeof(decimal), \u00220\u0022, \u0022999999999.9999\u0022, ErrorMessage = \u0022Standart maliyet 0 ile 999.999.999,9999 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsWeightBasedPricing",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StockUnitId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir stok birimi se\u00E7iniz.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Product { public class ProductVariantCreateDto { [MaxLength(100, ErrorMessage = \u0022Barkod en fazla 100 karakter olabilir.\u0022)] public string? Barcode { get; set; } [Required(ErrorMessage = \u0022SKU (Varyant kodu) zorunludur.\u0022)] [MaxLength(100, ErrorMessage = \u0022SKU en fazla 100 karakter olabilir.\u0022)] public string SKU { get; set; } = string.Empty; [MaxLength(100, ErrorMessage = \u0022Tedarik\u00E7i kodu en fazla 100 karakter olabilir.\u0022)] public string? SupplierCode { get; set; } [Required(ErrorMessage = \u0022Varyant ad\u0131 zorunludur.\u0022)] [MaxLength(255, ErrorMessage = \u0022Varyant ad\u0131 en fazla 255 karakter olabilir.\u0022)] public string Name { get; set; } = string.Empty; public bool IsActive { get; set; } = true; public byte? MetalPurityId { get; set; } public byte? MetalColorId { get; set; } [Range(typeof(decimal), \u00220\u0022, \u002299999.9\u0022, ErrorMessage = \u0022Beden 0 ile 99.999,9 aras\u0131nda olmal\u0131d\u0131r.\u0022)] public decimal? Size { get; set; } [Range(typeof(decimal), \u00220\u0022, \u002299999.9\u0022, ErrorMessage = \u0022Uzunluk 0 ile 99.999,9 aras\u0131nda olmal\u0131d\u0131r.\u0022)] public decimal? Length { get; set; } [Range(typeof(decimal), \u00220\u0022, \u0022999999.9999\u0022, ErrorMessage = \u0022Standart a\u011F\u0131rl\u0131k 0 ile 999.999,9999 aras\u0131nda olmal\u0131d\u0131r.\u0022)] public decimal StandardWeight { get; set; } [Range(typeof(decimal), \u00220\u0022, \u0022999999999.9999\u0022, ErrorMessage = \u0022Standart maliyet 0 ile 999.999.999,9999 aras\u0131nda olmal\u0131d\u0131r.\u0022)] public decimal StandardCost { get; set; } public bool IsWeightBasedPricing { get; set; } [Required(ErrorMessage = \u0022Stok birimi zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir stok birimi se\u00E7iniz.\u0022)] public byte StockUnitId { get; set; } } }"
    },
    {
      "Class": "ProductVariantGetDto",
      "Path": "FiloGH.Application/DTOs/Product/ProductVariantGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 22,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "SKU",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Barcode",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "SupplierCode",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StockUnitId",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "StockUnitName",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StandardWeight",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StandardCost",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsWeightBasedPricing",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "Size",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "Length",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "MetalPurityName",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalColorId",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "MetalColorName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CreatedByName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.Product { public record ProductVariantGetDto { public required int Id { get; init; } public required int ProductId { get; init; } [MaxLength(100)] public required string SKU { get; init; } [MaxLength(255)] public required string Name { get; init; } [MaxLength(100)] public string? Barcode { get; init; } [MaxLength(100)] public string? SupplierCode { get; init; } public required bool IsActive { get; init; } public required byte StockUnitId { get; init; } public required string StockUnitName { get; init; } public required decimal StandardWeight { get; init; } public required decimal StandardCost { get; init; } public required bool IsWeightBasedPricing { get; init; } public decimal? Size { get; init; } public decimal? Length { get; init; } public byte? MetalPurityId { get; init; } public string? MetalPurityName { get; init; } public byte? MetalColorId { get; init; } public string? MetalColorName { get; init; } public required DateTimeOffset CreatedAt { get; init; } public required int CreatedById { get; init; } public string? CreatedByName { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "RawMaterial",
      "Path": "FiloGH.Core/Entities/RawMaterial.cs",
      "Kind": "Entity",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(150)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "MaterialTypeId",
          "Attributes": []
        },
        {
          "Type": "RawMaterialType",
          "Name": "MaterialType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "UnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "Unit",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "StandardCost",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(18,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsConsumable",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class RawMaterial { public int Id { get; set; } [MaxLength(50)] public required string Code { get; set; } [MaxLength(150)] public required string Name { get; set; } public byte MaterialTypeId { get; set; } public required RawMaterialType MaterialType { get; set; } = null!; public byte UnitId { get; set; } public required UnitOfMeasure Unit { get; set; } = null!; [Column(TypeName = \u0022decimal(18,4)\u0022)] public decimal StandardCost { get; set; } = 0.0M; public bool IsConsumable { get; set; } = true; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "RawMaterialType",
      "Path": "FiloGH.Core/Entities/RawMaterialType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class RawMaterialType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "RefiningProcess",
      "Path": "FiloGH.Core/Entities/RefiningProcess.cs",
      "Kind": "Entity",
      "PropertyCount": 14,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ProcessDate",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "MetalCurrency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "InputWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "InputKaratId",
          "Attributes": []
        },
        {
          "Type": "Karat",
          "Name": "InputKarat",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "OutputWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "OutputKaratId",
          "Attributes": []
        },
        {
          "Type": "Karat",
          "Name": "OutputKarat",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "LossWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class RefiningProcess { public long Id { get; set; } public DateTimeOffset ProcessDate { get; set; } = DateTimeOffset.Now; public byte MetalCurrencyId { get; set; } public required Currency MetalCurrency { get; set; } = null!; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal InputWeight { get; set; } public byte InputKaratId { get; set; } public required Karat InputKarat { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal OutputWeight { get; set; } public byte OutputKaratId { get; set; } public required Karat OutputKarat { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal LossWeight { get; set; } [MaxLength(500)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "RootType",
      "Path": "FiloGH.Core/Entities/RootType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "StockMovementSign",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class RootType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short StockMovementSign { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "RoutingPurpose",
      "Path": "FiloGH.Core/Entities/RoutingPurpose.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class RoutingPurpose { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "SalePricingRule",
      "Path": "FiloGH.Core/Entities/SalePricingRule.cs",
      "Kind": "Entity",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "PriceListId",
          "Attributes": []
        },
        {
          "Type": "PriceList",
          "Name": "PriceList",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "short",
          "Name": "Priority",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant?",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "RuleType",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "FixedPrice",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal?",
          "Name": "CalculationValue",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,5)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ValidFrom",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ValidTo",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class SalePricingRule { public int Id { get; set; } public int PriceListId { get; set; } public required PriceList PriceList { get; set; } = null!; [MaxLength(100)] public required string Name { get; set; } public short Priority { get; set; } = 100; public int? ProductVariantId { get; set; } public ProductVariant? ProductVariant { get; set; } [MaxLength(20)] public required string RuleType { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? FixedPrice { get; set; } [Column(TypeName = \u0022decimal(10,5)\u0022)] public decimal? CalculationValue { get; set; } public bool IsActive { get; set; } = true; public DateTimeOffset ValidFrom { get; set; } = DateTimeOffset.Now; public DateTimeOffset? ValidTo { get; set; } } }"
    },
    {
      "Class": "ScrapTransaction",
      "Path": "FiloGH.Core/Entities/ScrapTransaction.cs",
      "Kind": "Entity",
      "PropertyCount": 14,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "TransactionDate",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "MetalCurrency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "ScrapTypeId",
          "Attributes": []
        },
        {
          "Type": "ScrapType",
          "Name": "ScrapType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "KaratId",
          "Attributes": []
        },
        {
          "Type": "Karat",
          "Name": "Karat",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "WeightGrams",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "RelatedOrderId",
          "Attributes": []
        },
        {
          "Type": "ProductionOrder?",
          "Name": "RelatedOrder",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ScrapTransaction { public long Id { get; set; } public DateTimeOffset TransactionDate { get; set; } = DateTimeOffset.Now; public byte MetalCurrencyId { get; set; } public required Currency MetalCurrency { get; set; } = null!; public byte ScrapTypeId { get; set; } public required ScrapType ScrapType { get; set; } = null!; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public byte KaratId { get; set; } public required Karat Karat { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal WeightGrams { get; set; } public int? RelatedOrderId { get; set; } public ProductionOrder? RelatedOrder { get; set; } [MaxLength(500)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "ScrapType",
      "Path": "FiloGH.Core/Entities/ScrapType.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class ScrapType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "SessionService",
      "Path": "FiloGH/Components/Services/SessionService.Service.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "using Microsoft.AspNetCore.Http; using System.Threading.Tasks; using System.Text.Json; public class SessionService { private readonly IHttpContextAccessor _httpContextAccessor; public SessionService(IHttpContextAccessor httpContextAccessor) { _httpContextAccessor = httpContextAccessor; } public async Task SetAppStateToSession(AppState state) { var httpContext = _httpContextAccessor.HttpContext; if (httpContext != null) { var session = httpContext.Session; if (session != null) { var jsonState = JsonSerializer.Serialize(state); session.SetString(\u0022AppState\u0022, jsonState); } } await Task.CompletedTask; } public void DeleteAppStateFromSession() { var httpContext = _httpContextAccessor?.HttpContext; if (httpContext != null) { var session = httpContext.Session; session.Remove(\u0022AppState\u0022); } } public Task\u003CAppState\u003E GetAppStateFromSession() { var httpContext = _httpContextAccessor.HttpContext; if (httpContext == null || httpContext.Session == null) { return Task.FromResult(new AppState()); } var session = httpContext.Session; var jsonState = session.GetString(\u0022AppState\u0022); if (jsonState == null) { return Task.FromResult(new AppState()); } var appState = JsonSerializer.Deserialize\u003CAppState\u003E(jsonState); if (appState == null) { return Task.FromResult(new AppState()); } return Task.FromResult(appState); } public async Task SetInitalAppStateToSession(AppState state) { if (_httpContextAccessor.HttpContext != null) { var session = _httpContextAccessor.HttpContext.Session; if (session != null) { var jsonState = JsonSerializer.Serialize(state); session.SetString(\u0022InitalAppState\u0022, jsonState); } } await Task.CompletedTask; } public async Task\u003CAppState?\u003E GetInitalAppStateFromSession() { await Task.Yield(); var httpContext = _httpContextAccessor.HttpContext; if (httpContext == null) { return null; } var session = httpContext.Session; if (session == null) { return null; } var jsonState = session.GetString(\u0022InitalAppState\u0022); if (jsonState == null) { return null; } return JsonSerializer.Deserialize\u003CAppState\u003E(jsonState) ?? null; } }"
    },
    {
      "Class": "StateService",
      "Path": "FiloGH/Components/Services/StateService.cs",
      "Kind": "Entity",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "using Microsoft.JSInterop; using System.Text.Json; public class AppState { public string ColorTheme { get; set; } = \u0022light\u0022; public string Direction { get; set; } = \u0022ltr\u0022; public string NavigationStyles { get; set; } = \u0022vertical\u0022; public string MenuStyles { get; set; } = \u0022\u0022; public string LayoutStyles { get; set; } = \u0022default-menu\u0022; public string PageStyles { get; set; } = \u0022regular\u0022; public string WidthStyles { get; set; } = \u0022fullwidth\u0022; public string MenuPosition { get; set; } = \u0022fixed\u0022; public string HeaderPosition { get; set; } = \u0022fixed\u0022; public string MenuColor { get; set; } = \u0022dark\u0022; public string HeaderColor { get; set; } = \u0022light\u0022; public string ThemePrimary { get; set; } = \u0022\u0022; public string ThemeBackground { get; set; } = \u0022\u0022; public string ThemeBackground1 { get; set; } = \u0022\u0022; public string BackgroundImage { get; set; } = \u0022\u0022; public MainMenuItems? currentItem { get; set; } = null; public bool IsDifferentFrom(AppState other) { return ColorTheme != other.ColorTheme || Direction != other.Direction || NavigationStyles != other.NavigationStyles || MenuStyles != other.MenuStyles || LayoutStyles != other.LayoutStyles || PageStyles != other.PageStyles || WidthStyles != other.WidthStyles || MenuPosition != other.MenuPosition || HeaderPosition != other.HeaderPosition || MenuColor != other.MenuColor || HeaderColor != other.HeaderColor || ThemePrimary != other.ThemePrimary || ThemeBackground != other.ThemeBackground || ThemeBackground1 != other.ThemeBackground1 || BackgroundImage != other.BackgroundImage || (currentItem != null ? !currentItem.Equals(other.currentItem) : other.currentItem != null); } public override bool Equals(object? obj) { if (obj == null || GetType() != obj.GetType()) { return false; } AppState other = (AppState)obj; return ColorTheme == other.ColorTheme \u0026\u0026 Direction == other.Direction \u0026\u0026 NavigationStyles == other.NavigationStyles \u0026\u0026 MenuStyles == other.MenuStyles \u0026\u0026 LayoutStyles == other.LayoutStyles \u0026\u0026 PageStyles == other.PageStyles \u0026\u0026 WidthStyles == other.WidthStyles \u0026\u0026 MenuPosition == other.MenuPosition \u0026\u0026 HeaderPosition == other.HeaderPosition \u0026\u0026 MenuColor == other.MenuColor \u0026\u0026 HeaderColor == other.HeaderColor \u0026\u0026 ThemePrimary == other.ThemePrimary \u0026\u0026 ThemeBackground == other.ThemeBackground \u0026\u0026 ThemeBackground1 == other.ThemeBackground1 \u0026\u0026 BackgroundImage == other.BackgroundImage \u0026\u0026 Equals(currentItem, other.currentItem); } public override int GetHashCode() { return base.GetHashCode(); } public async Task InitializeFromSession(AppState sessionState, SessionService _sessionService) { var _currentState = new AppState(); var stored = await _sessionService.GetInitalAppStateFromSession(); if (stored != null \u0026\u0026 _currentState.IsDifferentFrom(stored)) { ColorTheme = ColorTheme; Direction = Direction; NavigationStyles = NavigationStyles; MenuStyles = MenuStyles; LayoutStyles = LayoutStyles; PageStyles = PageStyles; WidthStyles = WidthStyles; MenuPosition = MenuPosition; HeaderPosition = HeaderPosition; MenuColor = MenuColor; HeaderColor = HeaderColor; ThemePrimary = ThemePrimary; ThemeBackground = ThemeBackground; ThemeBackground1 = ThemeBackground1; BackgroundImage = BackgroundImage; currentItem = currentItem; await _sessionService.SetInitalAppStateToSession(_currentState); } else if (sessionState != null) { ColorTheme = sessionState.ColorTheme; Direction = sessionState.Direction; NavigationStyles = sessionState.NavigationStyles; MenuStyles = sessionState.MenuStyles; LayoutStyles = sessionState.LayoutStyles; PageStyles = sessionState.PageStyles; WidthStyles = sessionState.WidthStyles; MenuPosition = sessionState.MenuPosition; HeaderPosition = sessionState.HeaderPosition; MenuColor = sessionState.MenuColor; HeaderColor = sessionState.HeaderColor; ThemePrimary = sessionState.ThemePrimary; ThemeBackground = sessionState.ThemeBackground; ThemeBackground1 = sessionState.ThemeBackground1; BackgroundImage = sessionState.BackgroundImage; currentItem = sessionState.currentItem; } } } public class StateService { private readonly IJSRuntime _jsRuntime; private readonly SessionService _sessionService; private readonly AppState _currentState; private readonly ILogger\u003CAppState\u003E _logger; public AppState GetAppState() { return _currentState; } public event Action OnChange; public event Action? OnStateChanged; public StateService(IJSRuntime jsRuntime, SessionService sessionService, AppState appState, ILogger\u003CAppState\u003E logger) { _jsRuntime = jsRuntime; _sessionService = sessionService; _currentState = new AppState(); OnChange = () =\u003E { }; _logger = logger; Task.Run(async () =\u003E await InitializeAppStateAsync()); } private async Task InitializeAppStateAsync() { try { var sessionState = await _sessionService.GetAppStateFromSession(); var initialAppState = await _sessionService.GetInitalAppStateFromSession(); if (initialAppState == null) { await _sessionService.SetInitalAppStateToSession(_currentState); } await _currentState.InitializeFromSession(sessionState, _sessionService); OnChange?.Invoke(); NotifyStateChanged(); } catch (Exception ex) { _logger.LogError(ex, \u0022Error initializing AppState\u0022); } } public async Task InitializeLandingAppState() { var sessionState = await _sessionService.GetAppStateFromSession(); _currentState.NavigationStyles = \u0022horizontal\u0022; _currentState.MenuStyles = \u0022menu-click\u0022; await _currentState.InitializeFromSession(sessionState, _sessionService); NotifyStateChanged(); } private async void NotifyStateChanged() { await _sessionService.SetAppStateToSession(_currentState); OnStateChanged?.Invoke(); } public async Task directionFn(string val) { _currentState.Direction = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022dir\u0022, val); NotifyStateChanged(); } public Task setCurrentItem(MainMenuItems val) { _currentState.currentItem = val; return Task.CompletedTask; } public async Task colorthemeFn(string val, bool stateClick) { _currentState.ColorTheme = val; if (stateClick) { _currentState.ThemeBackground = \u0022\u0022; _currentState.ThemeBackground1 = \u0022\u0022; } await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-theme-mode\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, val); if (stateClick) { if (val == \u0022light\u0022) { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, \u0022dark\u0022); await menuColorFn(\u0022dark\u0022); } else { await menuColorFn(val); } await headerColorFn(val); } await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--body-bg-rgb\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--body-bg-rgb2\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--light-rgb\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--form-control-bg\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeCssVariable\u0022, \u0022--input-border\u0022); NotifyStateChanged(); await PersistState(); } int screenSize = 1268; public async Task navigationStylesFn(string val, bool stateClick) { if (stateClick \u0026\u0026 val == \u0022vertical\u0022) { _currentState.MenuStyles = \u0022\u0022; _currentState.LayoutStyles = \u0022default-menu\u0022; if(_currentState.HeaderColor == \u0022light\u0022) { _currentState.HeaderColor = \u0022transparent\u0022; await headerColorFn(_currentState.HeaderColor); } } if (stateClick \u0026\u0026 val == \u0022horizontal\u0022 \u0026\u0026 _currentState.ColorTheme != \u0022dark\u0022) { if(_currentState.HeaderColor == \u0022transparent\u0022) { _currentState.HeaderColor = \u0022light\u0022; await headerColorFn(_currentState.HeaderColor); } } if (string.IsNullOrEmpty(_currentState.MenuStyles) \u0026\u0026 val == \u0022horizontal\u0022) { _currentState.MenuStyles = \u0022menu-click\u0022; _currentState.LayoutStyles = \u0022\u0022; await menuStylesFn(\u0022menu-click\u0022); } _currentState.NavigationStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, val); if (val == \u0022horizontal\u0022) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-vertical-style\u0022); } else { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); if (await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022) \u003E 992) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-toggled\u0022); } } screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task layoutStylesFn(string val) { _currentState.LayoutStyles = val; _currentState.MenuStyles = \u0022\u0022; await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); switch (val) { case \u0022default-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); if (await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022) \u003E 992) { await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-toggled\u0022); } break; case \u0022closed-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022closed\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close-menu-close\u0022); break; case \u0022detached\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022detached\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022detached-close\u0022); break; case \u0022icontext-menu\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022icontext\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022icon-text-close\u0022); break; case \u0022icon-overlay\u0022: await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022overlay\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022icon-overlay-close\u0022); break; case \u0022double-menu\u0022: var isdoubleMenuActive = await _jsRuntime.InvokeAsync\u003Cbool\u003E(\u0022interop.isEleExist\u0022, \u0022.double-menu-active\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-vertical-style\u0022, \u0022doublemenu\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-layout\u0022, \u0022vertical\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022double-menu-open\u0022); if (!isdoubleMenuActive) { await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022double-menu-close\u0022); } break; } screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task menuStylesFn(string val) { _currentState.LayoutStyles = \u0022\u0022; _currentState.MenuStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-vertical-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-hor-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-nav-style\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, $\u0022{val}-closed\u0022); screenSize = await _jsRuntime.InvokeAsync\u003Cint\u003E(\u0022interop.inner\u0022, \u0022innerWidth\u0022); if (screenSize \u003C 992) { await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.addAttributeToHtml\u0022, \u0022data-toggled\u0022, \u0022close\u0022); } NotifyStateChanged(); } public async Task pageStyleFn(string val) { _currentState.PageStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-page-style\u0022, val); NotifyStateChanged(); } public async Task widthStylessFn(string val) { _currentState.WidthStyles = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-width\u0022, val); NotifyStateChanged(); } public async Task menuPositionFn(string val) { _currentState.MenuPosition = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-position\u0022, val); NotifyStateChanged(); } public async Task headerPositionFn(string val) { _currentState.HeaderPosition = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-position\u0022, val); NotifyStateChanged(); } public async Task menuColorFn(string val) { _currentState.MenuColor = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, val); NotifyStateChanged(); } public async Task headerColorFn(string val) { _currentState.HeaderColor = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, val); NotifyStateChanged(); } public async Task themePrimaryFn(string val) { _currentState.ThemePrimary = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--primary-rgb\u0022, val); NotifyStateChanged(); } public async Task themeBackgroundFn(string val, string val2,bool stateClick) { _currentState.ThemeBackground = val; _currentState.ThemeBackground1 = val2; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-theme-mode\u0022, \u0022dark\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-header-styles\u0022, \u0022dark\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-menu-styles\u0022, \u0022dark\u0022); _currentState.ColorTheme = \u0022dark\u0022; if (stateClick) { _currentState.MenuColor = \u0022dark\u0022; _currentState.HeaderColor = \u0022dark\u0022; } await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--body-bg-rgb\u0022, val); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--body-bg-rgb2\u0022, val2); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--light-rgb\u0022, val2); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--form-control-bg\u0022, $\u0022rgb({val2})\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.setCssVariable\u0022, \u0022--input-border\u0022, \u0022rgba(255,255,255,0.1)\u0022); NotifyStateChanged(); } public async Task backgroundImageFn(string val) { _currentState.BackgroundImage = val; await _jsRuntime.InvokeVoidAsync(\u0022interop.addAttributeToHtml\u0022, \u0022data-bg-img\u0022, val); NotifyStateChanged(); } public async Task reset() { _currentState.ColorTheme = \u0022light\u0022; _currentState.Direction = \u0022ltr\u0022; _currentState.NavigationStyles = \u0022vertical\u0022; _currentState.MenuStyles = \u0022\u0022; _currentState.LayoutStyles = \u0022default-menu\u0022; _currentState.PageStyles = \u0022regular\u0022; _currentState.WidthStyles = \u0022fullwidth\u0022; _currentState.MenuPosition = \u0022fixed\u0022; _currentState.HeaderPosition = \u0022fixed\u0022; _currentState.MenuColor = \u0022dark\u0022; _currentState.HeaderColor = \u0022light\u0022; _currentState.ThemePrimary = \u0022\u0022; _currentState.ThemeBackground = \u0022\u0022; _currentState.ThemeBackground1 = \u0022\u0022; _currentState.BackgroundImage = \u0022\u0022; await _jsRuntime.InvokeVoidAsync(\u0022interop.clearAllLocalStorage\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.setclearCssVariables\u0022); await colorthemeFn(\u0022light\u0022, false); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-nav-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-menu-position\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-header-position\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-page-style\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-width\u0022); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022data-bg-img\u0022); await directionFn(\u0022ltr\u0022); await widthStylessFn(\u0022full-width\u0022); await navigationStylesFn(\u0022vertical\u0022, false); await menuColorFn(\u0022dark\u0022); await headerColorFn(\u0022light\u0022); _sessionService.DeleteAppStateFromSession(); NotifyStateChanged(); } public async Task Landingreset() { await _jsRuntime.InvokeVoidAsync(\u0022interop.clearAllLocalStorage\u0022); await colorthemeFn(\u0022light\u0022, false); await _jsRuntime.InvokeVoidAsync(\u0022interop.removeAttributeFromHtml\u0022, \u0022style\u0022); await directionFn(\u0022ltr\u0022); await menuColorFn(\u0022dark\u0022); _currentState.ThemePrimary = \u0022\u0022; _sessionService.DeleteAppStateFromSession(); NotifyStateChanged(); } public async Task retrieveFromLocalStorage() { string direction = _currentState.Direction; await directionFn(direction); string navstyles = _currentState.NavigationStyles; await navigationStylesFn(navstyles, false); string pageStyle = _currentState.PageStyles; await pageStyleFn(pageStyle); string widthStyles = _currentState.WidthStyles; await widthStylessFn(widthStyles); string ynexmenuposition = _currentState.MenuPosition; await menuPositionFn(ynexmenuposition); string ynexheaderposition = _currentState.HeaderPosition; await headerPositionFn(ynexheaderposition); string ynexcolortheme = _currentState.ColorTheme; await colorthemeFn(ynexcolortheme, false); string ynexbgimg = _currentState.BackgroundImage; if (!string.IsNullOrEmpty(ynexbgimg)) { await backgroundImageFn(ynexbgimg); } string ynexbgcolor = _currentState.ThemeBackground; string ynexbgcolor1 = _currentState.ThemeBackground1; if (!string.IsNullOrEmpty(ynexbgcolor)) { await themeBackgroundFn(ynexbgcolor, ynexbgcolor1,false); _currentState.ColorTheme = \u0022dark\u0022; } string ynexMenu = _currentState.MenuColor; await menuColorFn(ynexMenu); string ynexHeader = _currentState.HeaderColor; await headerColorFn(ynexHeader); string ynexmenuStyles = _currentState.MenuStyles; string ynexverticalstyles = _currentState.LayoutStyles; if (string.IsNullOrEmpty(ynexverticalstyles)) { await menuStylesFn(ynexmenuStyles); } else { await layoutStylesFn(ynexverticalstyles); } string ynexprimaryRGB = _currentState.ThemePrimary; await themePrimaryFn(ynexprimaryRGB); } public async Task retrieveFromLandingLocalStorage() { await navigationStylesFn(\u0022horizontal\u0022, false); _currentState.MenuStyles = \u0022menu-click\u0022; _currentState.LayoutStyles = \u0022\u0022; await menuStylesFn(\u0022menu-click\u0022); string direction = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexdirection\u0022) ?? _currentState.Direction; await directionFn(direction); string ynexcolortheme = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexcolortheme\u0022) ?? _currentState.ColorTheme; await colorthemeFn(ynexcolortheme, false); string ynexprimaryRGB = await _jsRuntime.InvokeAsync\u003Cstring\u003E(\u0022interop.getLocalStorageItem\u0022, \u0022ynexprimaryRGB\u0022) ?? _currentState.ThemePrimary; await themePrimaryFn(ynexprimaryRGB); } private async Task PersistState() { await Task.Delay(0); await _sessionService.SetAppStateToSession(_currentState); } }"
    },
    {
      "Class": "StockItem",
      "Path": "FiloGH.Core/Entities/StockItem.cs",
      "Kind": "Entity",
      "PropertyCount": 13,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "ItemCode",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StockItemTypeId",
          "Attributes": []
        },
        {
          "Type": "StockItemType",
          "Name": "StockItemType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BaseUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "BaseUnit",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsMetalItem",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalTypeId",
          "Attributes": []
        },
        {
          "Type": "MetalType?",
          "Name": "MetalType",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "MetalPurity?",
          "Name": "MetalPurity",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class StockItem { public int Id { get; set; } [MaxLength(50)] public required string ItemCode { get; set; } [MaxLength(255)] public required string Name { get; set; } public bool IsActive { get; set; } = true; public byte StockItemTypeId { get; set; } public required StockItemType StockItemType { get; set; } = null!; public byte BaseUnitId { get; set; } public required UnitOfMeasure BaseUnit { get; set; } = null!; public bool IsMetalItem { get; set; } = false; public byte? MetalTypeId { get; set; } public MetalType? MetalType { get; set; } public byte? MetalPurityId { get; set; } public MetalPurity? MetalPurity { get; set; } } }"
    },
    {
      "Class": "StockItemType",
      "Path": "FiloGH.Core/Entities/StockItemType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsTracked",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class StockItemType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool IsTracked { get; set; } = true; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "StockLocation",
      "Path": "FiloGH.Core/Entities/StockLocation.cs",
      "Kind": "Entity",
      "PropertyCount": 10,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "LocationType",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsRestricted",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsPhysicalInventoryEnabled",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "ResponsibleUserId",
          "Attributes": []
        },
        {
          "Type": "User?",
          "Name": "ResponsibleUser",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.Collections.Generic; namespace FiloGH.Core.Entities { public class StockLocation { public int Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; [MaxLength(20)] public required string LocationType { get; set; } public bool IsRestricted { get; set; } = false; public bool IsPhysicalInventoryEnabled { get; set; } = true; public byte? ResponsibleUserId { get; set; } public User? ResponsibleUser { get; set; } } }"
    },
    {
      "Class": "StockMovementType",
      "Path": "FiloGH.Core/Entities/StockMovementType.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "short",
          "Name": "Sign",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFF using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class StockMovementType { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public short Sign { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "StockTransaction",
      "Path": "FiloGH.Core/Entities/StockTransaction.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 24,
      "Properties": [
        {
          "Type": "long",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MovementTypeId",
          "Attributes": []
        },
        {
          "Type": "StockMovementType",
          "Name": "MovementType",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "TransactionDate",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "SourceOrderLineId",
          "Attributes": []
        },
        {
          "Type": "OrderLine?",
          "Name": "SourceOrderLine",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceDocType",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "LocationId",
          "Attributes": []
        },
        {
          "Type": "Location",
          "Name": "Location",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "MetalCurrency",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "MetalPurityId",
          "Attributes": []
        },
        {
          "Type": "MetalPurity?",
          "Name": "MetalPurity",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Fineness",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "WeightInGrams",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BaseExchangeCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency",
          "Name": "BaseExchangeCurrency",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "CostPerGramEUR",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "FixedExchangeRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,8)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFF using FiloGH.Core.Interfaces; using System; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class StockTransaction : IEntity\u003Clong\u003E { public long Id { get; set; } public byte MovementTypeId { get; set; } public required StockMovementType MovementType { get; set; } = null!; public DateTimeOffset TransactionDate { get; set; } public int? SourceOrderLineId { get; set; } public OrderLine? SourceOrderLine { get; set; } [MaxLength(50)] public string? ReferenceDocType { get; set; } public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public byte LocationId { get; set; } public required Location Location { get; set; } = null!; public byte MetalCurrencyId { get; set; } public required Currency MetalCurrency { get; set; } = null!; public byte? MetalPurityId { get; set; } public MetalPurity? MetalPurity { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal Fineness { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal WeightInGrams { get; set; } public byte BaseExchangeCurrencyId { get; set; } public required Currency BaseExchangeCurrency { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal CostPerGramEUR { get; set; } [Column(TypeName = \u0022decimal(19,8)\u0022)] public decimal FixedExchangeRate { get; set; } public byte CreatedById { get; set; } public required User CreatedBy { get; set; } [MaxLength(500)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "TaxRate",
      "Path": "FiloGH.Core/Entities/TaxRate.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "RatePercentage",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(5,2)\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "ValidFromDate",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class TaxRate { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(20)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } [Column(TypeName = \u0022decimal(5,2)\u0022)] public decimal RatePercentage { get; set; } public DateTimeOffset ValidFromDate { get; set; } = DateTimeOffset.Now; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "TimeLine",
      "Path": "FiloGH.Models/Entities/TimeLine.cs",
      "Kind": "Entity",
      "PropertyCount": 7,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Comment",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Models.Entities { public class TimeLine { public int Id { get; set; } public DateTimeOffset CreatedAt { get; set; } public int CreatedById { get; set; } public required User CreatedBy { get; set; } public int OrderId { get; set; } public required Order Order { get; set; } public string? Comment { get; set; } } }"
    },
    {
      "Class": "Unit",
      "Path": "FiloGH.Models/Entities/Unit.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Unit { public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } public bool IsActive { get; set; } } }"
    },
    {
      "Class": "UnitOfMeasure",
      "Path": "FiloGH.Core/Entities/UnitOfMeasure.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "UomTypeId",
          "Attributes": []
        },
        {
          "Type": "UomType",
          "Name": "UomType",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "BaseUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure?",
          "Name": "BaseUnit",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "ConversionFactor",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(10,5)\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "DecimalPlaces",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CUnitOfMeasure\u003E",
          "Name": "RelatedUnits",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class UnitOfMeasure : IEntity\u003Cbyte\u003E { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } public byte UomTypeId { get; set; } public required UomType UomType { get; set; } = null!; public byte? BaseUnitId { get; set; } public UnitOfMeasure? BaseUnit { get; set; } [Column(TypeName = \u0022decimal(10,5)\u0022)] public decimal ConversionFactor { get; set; } = 1.0M; public byte DecimalPlaces { get; set; } = 2; public bool IsActive { get; set; } = true; public ICollection\u003CUnitOfMeasure\u003E RelatedUnits { get; set; } = new List\u003CUnitOfMeasure\u003E(); } }"
    },
    {
      "Class": "UnitOfMeasureConversion",
      "Path": "FiloGH.Core/Entities/UnitOfMeasureConversion.cs",
      "Kind": "Entity",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "FromUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "FromUnit",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "ToUnitId",
          "Attributes": []
        },
        {
          "Type": "UnitOfMeasure",
          "Name": "ToUnit",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "ConversionRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,8)\u0022)]"
          ]
        },
        {
          "Type": "int?",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant?",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class UnitOfMeasureConversion { public int Id { get; set; } public byte FromUnitId { get; set; } public required UnitOfMeasure FromUnit { get; set; } = null!; public byte ToUnitId { get; set; } public required UnitOfMeasure ToUnit { get; set; } = null!; [Column(TypeName = \u0022decimal(19,8)\u0022)] public decimal ConversionRate { get; set; } public int? ProductVariantId { get; set; } public ProductVariant? ProductVariant { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "UnitOfMeasureService",
      "Path": "FiloGH.Application/Services/Concrete/UnitOfMeasureService.cs",
      "Kind": "Entity",
      "BaseName": "IUnitOfMeasureService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.Services.Abstract; using FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Query; using System; using System.Collections.Generic; using System.Linq; using System.Linq.Expressions; using System.Threading.Tasks; namespace FiloGH.Application.Services.Concrete { public class UnitOfMeasureService : IUnitOfMeasureService { private readonly IGenericRepository\u003CUnitOfMeasure, byte\u003E _uomRepository; private readonly IUnitOfWork _uow; public UnitOfMeasureService(IUnitOfWork uow) { _uow = uow; _uomRepository = _uow.GetRepository\u003CUnitOfMeasure, byte\u003E(); } public async Task\u003CUnitOfMeasure?\u003E GetByIdAsync(byte id, string? includeProperties = null) { return await _uomRepository.GetByIdAsync(id, disableTracking: false, includeProperties: includeProperties); } public async Task\u003CIEnumerable\u003CUnitOfMeasure\u003E\u003E GetAllAsync( Expression\u003CFunc\u003CUnitOfMeasure, bool\u003E\u003E? filter = null, Func\u003CIQueryable\u003CUnitOfMeasure\u003E, IOrderedQueryable\u003CUnitOfMeasure\u003E\u003E? orderBy = null, Func\u003CIQueryable\u003CUnitOfMeasure\u003E, IIncludableQueryable\u003CUnitOfMeasure, object\u003E\u003E? include = null, bool disableTracking = true) { Func\u003CIQueryable\u003CUnitOfMeasure\u003E, IIncludableQueryable\u003CUnitOfMeasure, object\u003E\u003E defaultInclude = source =\u003E source.Include(u =\u003E u.UomType!).Include(u =\u003E u.BaseUnit!); var entities = await _uomRepository.GetAllAsync( filter, orderBy, include ?? defaultInclude, disableTracking); if (orderBy == null) { return entities.OrderBy(u =\u003E u.Name).ToList(); } return entities; } public async Task AddAsync(UnitOfMeasure uom) { if (uom.UomType != null \u0026\u0026 uom.UomTypeId != 0) { uom.UomType = null!; } if (uom.BaseUnit != null \u0026\u0026 uom.BaseUnitId.HasValue) { uom.BaseUnit = null; } await _uomRepository.AddAsync(uom); await _uow.SaveAsync(); } public async Task UpdateAsync(UnitOfMeasure uom) { var existingUoM = await _uomRepository.GetByIdAsync(uom.Id, disableTracking: false); if (existingUoM == null) { throw new KeyNotFoundException($\u0022UnitOfMeasure with ID {uom.Id} not found.\u0022); } existingUoM.Name = uom.Name; existingUoM.Code = uom.Code; existingUoM.ConversionFactor = uom.ConversionFactor; existingUoM.DecimalPlaces = uom.DecimalPlaces; existingUoM.IsActive = uom.IsActive; existingUoM.UomTypeId = uom.UomTypeId; existingUoM.BaseUnitId = uom.BaseUnitId; await _uow.SaveAsync(); } public async Task DeleteAsync(byte id) { await _uomRepository.DeleteAsync(id); await _uow.SaveAsync(); } } }"
    },
    {
      "Class": "UnitOfWork",
      "Path": "FiloGH.Infrastructure/Repositories/UnitOfWork.cs",
      "Kind": "Entity",
      "BaseName": "IUnitOfWork",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.Interfaces; using FiloGH.Core.Interfaces; using FiloGH.Infrastructure.Data.Contexts; using Microsoft.EntityFrameworkCore; using System; using System.Collections.Generic; using System.Threading.Tasks; namespace FiloGH.Infrastructure.Repositories { public class UnitOfWork : IUnitOfWork { private readonly AppDbContext _context; private readonly Dictionary\u003Cstring, object\u003E _repositories; public UnitOfWork(AppDbContext context) { _context = context; _repositories = new Dictionary\u003Cstring, object\u003E(); } public IGenericRepository\u003CTEntity, TId\u003E GetRepository\u003CTEntity, TId\u003E() where TEntity : class, IEntity\u003CTId\u003E where TId : struct, IComparable, IConvertible, IComparable\u003CTId\u003E, IEquatable\u003CTId\u003E { var typeName = typeof(TEntity).Name; if (!_repositories.ContainsKey(typeName)) { var repositoryInstance = new GenericRepository\u003CTEntity, TId\u003E(_context); _repositories.Add(typeName, repositoryInstance); } return (IGenericRepository\u003CTEntity, TId\u003E)_repositories[typeName]; } public async Task\u003Cint\u003E SaveAsync() { try { return await _context.SaveChangesAsync(); } catch (DbUpdateException ex) { Console.WriteLine($\u0022Veritaban\u0131 Kaydetme Hatas\u0131: {ex.Message}\u0022); throw; } } public int Save() { try { return _context.SaveChanges(); } catch (DbUpdateException ex) { Console.WriteLine($\u0022Veritaban\u0131 Kaydetme Hatas\u0131: {ex.Message}\u0022); throw; } } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { if (disposing) { _context.Dispose(); } } } }"
    },
    {
      "Class": "UomType",
      "Path": "FiloGH.Core/Entities/UomType.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CUnitOfMeasure\u003E",
          "Name": "UnitOfMeasures",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class UomType : IEntity\u003Cbyte\u003E { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(50)] public required string Name { get; set; } [MaxLength(10)] public required string Code { get; set; } public bool IsActive { get; set; } = true; public ICollection\u003CUnitOfMeasure\u003E UnitOfMeasures { get; set; } = new List\u003CUnitOfMeasure\u003E(); } }"
    },
    {
      "Class": "UomTypeService",
      "Path": "FiloGH.Application/Services/Concrete/UomTypeService.cs",
      "Kind": "Entity",
      "BaseName": "BaseService",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing FiloGH.Application.Services.Abstract; using FiloGH.Core.Entities; using FiloGH.Core.Interfaces; using FiloGH.Core.Services; using Microsoft.EntityFrameworkCore.Query; using System.Linq.Expressions; using System.Collections.Generic; using System.Threading.Tasks; using System.Linq; using System; namespace FiloGH.Application.Services.Concrete { public class UomTypeService : BaseService\u003CUomType, byte\u003E, IUomTypeService { public UomTypeService(IUnitOfWork uow) : base(uow) { } public override async Task\u003CUomType\u003E AddAsync(UomType entity) { await Repository.AddAsync(entity); await UnitOfWork.SaveAsync(); return entity; } async Task IBaseService\u003CUomType, byte\u003E.AddAsync(UomType entity) { await this.AddAsync(entity); } public override async Task UpdateAsync(UomType entity) { Repository.Update(entity); await UnitOfWork.SaveAsync(); } public override async Task DeleteAsync(byte id) { await Repository.DeleteAsync(id); await UnitOfWork.SaveAsync(); } public async Task\u003CIEnumerable\u003CUomType\u003E\u003E GetAllAsync( Expression\u003CFunc\u003CUomType, bool\u003E\u003E? filter = null, Func\u003CIQueryable\u003CUomType\u003E, IOrderedQueryable\u003CUomType\u003E\u003E? orderBy = null, Func\u003CIQueryable\u003CUomType\u003E, IIncludableQueryable\u003CUomType, object\u003E\u003E? include = null, bool disableTracking = true) { return await Repository.GetAllAsync(filter, orderBy, include, disableTracking); } public async Task\u003CUomType?\u003E GetByIdAsync(byte id, string? includeProperties = null) { return await Repository.GetByIdAsync(id, disableTracking: false, includeProperties: includeProperties); } public async Task\u003CIEnumerable\u003CUomType\u003E\u003E GetUomTypesByNameOrderedAsync() { var list = await Repository.GetAllAsync(); return list.OrderBy(t =\u003E t.Name).ToList(); } } }"
    },
    {
      "Class": "User",
      "Path": "FiloGH.Core/Entities/User.cs",
      "Kind": "Entity",
      "PropertyCount": 16,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Username",
          "Attributes": [
            "[StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Email",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "FirstName",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "LastName",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "PasswordHash",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte?",
          "Name": "DefaultCurrencyId",
          "Attributes": []
        },
        {
          "Type": "Currency?",
          "Name": "DefaultCurrency",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "PrimaryBranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "PrimaryBranch",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "UserRoleId",
          "Attributes": []
        },
        {
          "Type": "UserRole",
          "Name": "UserRole",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "LastLogin",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CUserBranchAccess\u003E",
          "Name": "BranchAccesses",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class User { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 alan\u0131 bo\u015F b\u0131rak\u0131lamaz.\u0022)] [StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)] public required string Username { get; set; } [MaxLength(255)] [RegularExpression(@\u0022^[^@\\s]\u002B@[^@\\s]\u002B\\.[^@\\s]\u002B$\u0022, ErrorMessage = \u0022Ge\u00E7erli bir e-posta adresi giriniz.\u0022)] public string? Email { get; set; } [MaxLength(100)] public required string FirstName { get; set; } [MaxLength(100)] public required string LastName { get; set; } [MaxLength(255)] public required string PasswordHash { get; set; } public bool IsActive { get; set; } = true; public byte? DefaultCurrencyId { get; set; } public Currency? DefaultCurrency { get; set; } public byte PrimaryBranchId { get; set; } public required Branch PrimaryBranch { get; set; } = null!; public byte UserRoleId { get; set; } public required UserRole UserRole { get; set; } = null!; public DateTimeOffset CreatedAt { get; set; } = DateTimeOffset.Now; public DateTimeOffset? LastLogin { get; set; } public ICollection\u003CUserBranchAccess\u003E BranchAccesses { get; set; } = new List\u003CUserBranchAccess\u003E(); } }"
    },
    {
      "Class": "UserBranchAccess",
      "Path": "FiloGH.Core/Entities/UserBranchAccess.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "UserId",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "User",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "CanWrite",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Core.Entities { public class UserBranchAccess { public byte UserId { get; set; } public required User User { get; set; } = null!; public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public bool CanWrite { get; set; } = true; } }"
    },
    {
      "Class": "UserCreateDto",
      "Path": "FiloGH.Application/DTOs/User/UserCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "string",
          "Name": "Username",
          "Attributes": [
            "[StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "FirstName",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Ad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "LastName",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Soyad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Email",
          "Attributes": [
            "[MaxLength(255, ErrorMessage = \u0022E-posta adresi en fazla 255 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Password",
          "Attributes": [
            "[StringLength(100, MinimumLength = 8, ErrorMessage = \u0022\u015Eifre en az 8 karakter uzunlu\u011Funda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "PrimaryBranchId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u015Eube Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "UserRoleId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Rol Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "DefaultCurrencyId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Para Birimi Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.User { public record UserCreateDto { [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 Ad\u0131 zorunludur.\u0022)] [StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)] public required string Username { get; init; } [Required(ErrorMessage = \u0022Ad zorunludur.\u0022)] [MaxLength(100, ErrorMessage = \u0022Ad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)] public required string FirstName { get; init; } [Required(ErrorMessage = \u0022Soyad zorunludur.\u0022)] [MaxLength(100, ErrorMessage = \u0022Soyad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)] public required string LastName { get; init; } [EmailAddress(ErrorMessage = \u0022Ge\u00E7erli bir E-posta adresi giriniz.\u0022)] [MaxLength(255, ErrorMessage = \u0022E-posta adresi en fazla 255 karakter olmal\u0131d\u0131r.\u0022)] public string? Email { get; init; } [Required(ErrorMessage = \u0022\u015Eifre zorunludur.\u0022)] [StringLength(100, MinimumLength = 8, ErrorMessage = \u0022\u015Eifre en az 8 karakter uzunlu\u011Funda olmal\u0131d\u0131r.\u0022)] public required string Password { get; init; } public required bool IsActive { get; init; } = true; [Required(ErrorMessage = \u0022Birincil \u015Eube (Branch) zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u015Eube Kimli\u011Fi belirtilmelidir.\u0022)] public required byte PrimaryBranchId { get; init; } [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 Rol\u00FC zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Rol Kimli\u011Fi belirtilmelidir.\u0022)] public required byte UserRoleId { get; init; } [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Para Birimi Kimli\u011Fi belirtilmelidir.\u0022)] public byte? DefaultCurrencyId { get; init; } } }"
    },
    {
      "Class": "UserGetDto",
      "Path": "FiloGH.Application/DTOs/User/UserGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace FiloGH.Application.DTOs.User { internal class UserGetDto { } }"
    },
    {
      "Class": "UserRole",
      "Path": "FiloGH.Core/Entities/UserRole.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(20)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsDefault",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class UserRole { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(100)] public required string Name { get; set; } [MaxLength(20)] public required string Code { get; set; } public bool IsDefault { get; set; } = false; public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "UserRolePermission",
      "Path": "FiloGH.Core/Entities/UserRolePermission.cs",
      "Kind": "Entity",
      "PropertyCount": 4,
      "Properties": [
        {
          "Type": "byte",
          "Name": "UserRoleId",
          "Attributes": []
        },
        {
          "Type": "UserRole",
          "Name": "UserRole",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "PermissionId",
          "Attributes": []
        },
        {
          "Type": "Permission",
          "Name": "Permission",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFnamespace FiloGH.Core.Entities { public class UserRolePermission { public byte UserRoleId { get; set; } public required UserRole UserRole { get; set; } = null!; public int PermissionId { get; set; } public required Permission Permission { get; set; } = null!; } }"
    },
    {
      "Class": "UserSummaryDto",
      "Path": "FiloGH.Application/DTOs/User/UserSummaryDto.cs",
      "Kind": "Dto",
      "PropertyCount": 0,
      "Properties": [],
      "Code": "\uFEFFusing System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace FiloGH.Application.DTOs.User { internal class UserSummaryDto { } }"
    },
    {
      "Class": "UserUpdateDto",
      "Path": "FiloGH.Application/DTOs/User/UserUpdateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Kullan\u0131c\u0131 Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Username",
          "Attributes": [
            "[StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "FirstName",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Ad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "LastName",
          "Attributes": [
            "[MaxLength(100, ErrorMessage = \u0022Soyad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Email",
          "Attributes": [
            "[MaxLength(255, ErrorMessage = \u0022E-posta adresi en fazla 255 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "PrimaryBranchId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u015Eube Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "UserRoleId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Rol Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte?",
          "Name": "DefaultCurrencyId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Para Birimi Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.User { public record UserUpdateDto { [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 Kimli\u011Fi zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Kullan\u0131c\u0131 Kimli\u011Fi belirtilmelidir.\u0022)] public required byte Id { get; init; } [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 Ad\u0131 zorunludur.\u0022)] [StringLength(50, MinimumLength = 3, ErrorMessage = \u0022Kullan\u0131c\u0131 ad\u0131 3 ile 50 karakter aras\u0131nda olmal\u0131d\u0131r.\u0022)] public required string Username { get; init; } [Required(ErrorMessage = \u0022Ad zorunludur.\u0022)] [MaxLength(100, ErrorMessage = \u0022Ad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)] public required string FirstName { get; init; } [Required(ErrorMessage = \u0022Soyad zorunludur.\u0022)] [MaxLength(100, ErrorMessage = \u0022Soyad en fazla 100 karakter olmal\u0131d\u0131r.\u0022)] public required string LastName { get; init; } [EmailAddress(ErrorMessage = \u0022Ge\u00E7erli bir E-posta adresi giriniz.\u0022)] [MaxLength(255, ErrorMessage = \u0022E-posta adresi en fazla 255 karakter olmal\u0131d\u0131r.\u0022)] public string? Email { get; init; } public required bool IsActive { get; init; } [Required(ErrorMessage = \u0022Birincil \u015Eube (Branch) zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u015Eube Kimli\u011Fi belirtilmelidir.\u0022)] public required byte PrimaryBranchId { get; init; } [Required(ErrorMessage = \u0022Kullan\u0131c\u0131 Rol\u00FC zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Rol Kimli\u011Fi belirtilmelidir.\u0022)] public required byte UserRoleId { get; init; } [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Para Birimi Kimli\u011Fi belirtilmelidir.\u0022)] public byte? DefaultCurrencyId { get; init; } } }"
    },
    {
      "Class": "Vat",
      "Path": "FiloGH.Models/Entities/Vat.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Active",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "Position",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "string",
          "Name": "PresentmentTaxRate",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "Rate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(9,3)\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Models.Entities { public class Vat { public int Id { get; set; } public bool Active { get; set; } public int Position { get; set; } [MaxLength(255)] public required string Name { get; set; } [MaxLength(255)] public required string PresentmentTaxRate { get; set; } [Column(TypeName = \u0022decimal(9,3)\u0022)] public decimal Rate { get; set; } } }"
    },
    {
      "Class": "Vendor",
      "Path": "FiloGH.Models/Entities/Vendor.cs",
      "Kind": "Entity",
      "PropertyCount": 3,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "Enabled",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "VendorName",
          "Attributes": [
            "[MaxLength(255)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Models.Entities { public class Vendor { public int Id { get; set; } public bool Enabled { get; set; } [MaxLength(255)] public required string VendorName { get; set; } } }"
    },
    {
      "Class": "WorkCenter",
      "Path": "FiloGH.Core/Entities/WorkCenter.cs",
      "Kind": "Entity",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(100)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "BranchId",
          "Attributes": []
        },
        {
          "Type": "Branch",
          "Name": "Branch",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsMachine",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "HourlyCostRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        },
        {
          "Type": "ICollection\u003CWorkCenterOperation\u003E?",
          "Name": "AllowedOperations",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class WorkCenter { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(100)] public required string Name { get; set; } public byte BranchId { get; set; } public required Branch Branch { get; set; } = null!; public bool IsMachine { get; set; } = true; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal HourlyCostRate { get; set; } = 0; public bool IsActive { get; set; } = true; public ICollection\u003CWorkCenterOperation\u003E? AllowedOperations { get; set; } } }"
    },
    {
      "Class": "WorkCenterOperation",
      "Path": "FiloGH.Core/Entities/WorkCenterOperation.cs",
      "Kind": "Entity",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "WorkCenterId",
          "Attributes": []
        },
        {
          "Type": "WorkCenter",
          "Name": "WorkCenter",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "OperationDefinitionId",
          "Attributes": []
        },
        {
          "Type": "OperationDefinition",
          "Name": "OperationDefinition",
          "Attributes": []
        },
        {
          "Type": "decimal?",
          "Name": "OverrideCostRate",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsActive",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class WorkCenterOperation { public byte WorkCenterId { get; set; } public required WorkCenter WorkCenter { get; set; } = null!; public byte OperationDefinitionId { get; set; } public required OperationDefinition OperationDefinition { get; set; } = null!; [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal? OverrideCostRate { get; set; } public bool IsActive { get; set; } = true; } }"
    },
    {
      "Class": "WorkOrder",
      "Path": "FiloGH.Core/Entities/WorkOrder.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "WorkOrderNumber",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "DueDate",
          "Attributes": []
        },
        {
          "Type": "int?",
          "Name": "OrderId",
          "Attributes": []
        },
        {
          "Type": "Order?",
          "Name": "Order",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductVariantId",
          "Attributes": []
        },
        {
          "Type": "ProductVariant",
          "Name": "ProductVariant",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "WorkOrderStatus",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "CreatedBy",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "Quantity",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,2)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "TargetMetalWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "IssuedMetalWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "CalculatedScrapWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CWorkOrderOperation\u003E?",
          "Name": "Operations",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using FiloGH.Core.Interfaces; namespace FiloGH.Core.Entities { public class WorkOrder : IEntity\u003Cint\u003E { public int Id { get; set; } [MaxLength(50)] public required string WorkOrderNumber { get; set; } public DateTimeOffset CreatedDate { get; set; } public DateTimeOffset DueDate { get; set; } public int? OrderId { get; set; } public Order? Order { get; set; } public int ProductVariantId { get; set; } public required ProductVariant ProductVariant { get; set; } = null!; public byte StatusId { get; set; } public required WorkOrderStatus Status { get; set; } = null!; public byte CreatedById { get; set; } public required User CreatedBy { get; set; } = null!; [Column(TypeName = \u0022decimal(19,2)\u0022)] public decimal Quantity { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal TargetMetalWeight { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal IssuedMetalWeight { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal CalculatedScrapWeight { get; set; } public ICollection\u003CWorkOrderOperation\u003E? Operations { get; set; } } }"
    },
    {
      "Class": "WorkOrderCreateDto",
      "Path": "FiloGH.Application/DTOs/WorkOrder/WorkOrderCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": [
            "[Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u00DCr\u00FCn Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Metal Tipi Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u0130\u015F Emri Durum Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "Quantity",
          "Attributes": [
            "[Range(1, 10000, ErrorMessage = \u0022Miktar 1 ile 10000 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "PlannedStartDate",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Planlanan Ba\u015Flang\u0131\u00E7 Tarihi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "PlannedCompletionDate",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceCode",
          "Attributes": [
            "[MaxLength(20, ErrorMessage = \u0022Referans Kod en fazla 20 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022Notlar en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.WorkOrder { public record WorkOrderCreateDto { [Required(ErrorMessage = \u0022\u00DCr\u00FCn Kimli\u011Fi (Product Id) zorunludur.\u0022)] [Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u00DCr\u00FCn Kimli\u011Fi belirtilmelidir.\u0022)] public required int ProductId { get; init; } [Required(ErrorMessage = \u0022Metal Tipi Kimli\u011Fi (Metal Type Id) zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Metal Tipi Kimli\u011Fi belirtilmelidir.\u0022)] public required byte MetalTypeId { get; init; } [Required(ErrorMessage = \u0022\u0130\u015F Emri Durum Kimli\u011Fi (Work Order Status Id) zorunludur. (\u00D6rn: NEW)\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u0130\u015F Emri Durum Kimli\u011Fi belirtilmelidir.\u0022)] public required byte StatusId { get; init; } [Required(ErrorMessage = \u0022Sipari\u015F Miktar\u0131 zorunludur.\u0022)] [Range(1, 10000, ErrorMessage = \u0022Miktar 1 ile 10000 aras\u0131nda olmal\u0131d\u0131r.\u0022)] public required int Quantity { get; init; } [Required(ErrorMessage = \u0022Planlanan Ba\u015Flang\u0131\u00E7 Tarihi zorunludur.\u0022)] public required DateTimeOffset PlannedStartDate { get; init; } public DateTimeOffset? PlannedCompletionDate { get; init; } [MaxLength(20, ErrorMessage = \u0022Referans Kod en fazla 20 karakter olmal\u0131d\u0131r.\u0022)] public string? ReferenceCode { get; init; } [MaxLength(500, ErrorMessage = \u0022Notlar en fazla 500 karakter olmal\u0131d\u0131r.\u0022)] public string? Notes { get; init; } } }"
    },
    {
      "Class": "WorkOrderGetDto",
      "Path": "FiloGH.Application/DTOs/WorkOrder/WorkOrderGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": []
        },
        {
          "Type": "ProductGetDto",
          "Name": "Product",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": []
        },
        {
          "Type": "MetalTypeGetDto",
          "Name": "MetalType",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "WorkOrderStatusGetDto",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "Quantity",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "PlannedStartDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "PlannedCompletionDate",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ActualCompletionDate",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceCode",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "CreatedById",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "CreatedByName",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System; using FiloGH.Application.DTOs.MetalType; using FiloGH.Application.DTOs.Product; using FiloGH.Application.DTOs.WorkOrderStatus; namespace FiloGH.Application.DTOs.WorkOrder { public record WorkOrderGetDto { public required int Id { get; init; } public required int ProductId { get; init; } public required ProductGetDto Product { get; init; } public required byte MetalTypeId { get; init; } public required MetalTypeGetDto MetalType { get; init; } public required byte StatusId { get; init; } public required WorkOrderStatusGetDto Status { get; init; } public required int Quantity { get; init; } public required DateTimeOffset PlannedStartDate { get; init; } public DateTimeOffset? PlannedCompletionDate { get; init; } public DateTimeOffset? ActualCompletionDate { get; init; } public string? ReferenceCode { get; init; } public string? Notes { get; init; } public required DateTimeOffset CreatedAt { get; init; } public required int CreatedById { get; init; } public string? CreatedByName { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "WorkOrderOperation",
      "Path": "FiloGH.Core/Entities/WorkOrderOperation.cs",
      "Kind": "Entity",
      "BaseName": "IEntity",
      "PropertyCount": 17,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "WorkOrderId",
          "Attributes": []
        },
        {
          "Type": "WorkOrder",
          "Name": "WorkOrder",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "OperationDefinitionId",
          "Attributes": []
        },
        {
          "Type": "OperationDefinition",
          "Name": "OperationDefinition",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "WorkCenterId",
          "Attributes": []
        },
        {
          "Type": "WorkCenter",
          "Name": "WorkCenter",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": []
        },
        {
          "Type": "OperationStatus",
          "Name": "Status",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "SequenceNumber",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "AssignedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "StartedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "CompletedAt",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MetalInputWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "MetalOutputWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "decimal",
          "Name": "ScrapWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "ICollection\u003CWorkOrderOperationLog\u003E?",
          "Name": "Logs",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing FiloGH.Core.Interfaces; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class WorkOrderOperation : IEntity\u003Cint\u003E { public int Id { get; set; } public int WorkOrderId { get; set; } public required WorkOrder WorkOrder { get; set; } = null!; public byte OperationDefinitionId { get; set; } public required OperationDefinition OperationDefinition { get; set; } = null!; public byte WorkCenterId { get; set; } public required WorkCenter WorkCenter { get; set; } = null!; public byte StatusId { get; set; } public required OperationStatus Status { get; set; } = null!; public int SequenceNumber { get; set; } public DateTimeOffset AssignedAt { get; set; } public DateTimeOffset? StartedAt { get; set; } public DateTimeOffset? CompletedAt { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalInputWeight { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalOutputWeight { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal ScrapWeight { get; set; } public ICollection\u003CWorkOrderOperationLog\u003E? Logs { get; set; } } }"
    },
    {
      "Class": "WorkOrderOperationLog",
      "Path": "FiloGH.Core/Entities/WorkOrderOperationLog.cs",
      "Kind": "Entity",
      "PropertyCount": 11,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "OperationId",
          "Attributes": []
        },
        {
          "Type": "WorkOrderOperation",
          "Name": "Operation",
          "Attributes": []
        },
        {
          "Type": "byte",
          "Name": "EmployeeId",
          "Attributes": []
        },
        {
          "Type": "User",
          "Name": "Employee",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "StartTime",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "EndTime",
          "Attributes": []
        },
        {
          "Type": "int",
          "Name": "DurationMinutes",
          "Attributes": []
        },
        {
          "Type": "decimal",
          "Name": "MetalAdjustmentWeight",
          "Attributes": [
            "[Column(TypeName = \u0022decimal(19,4)\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "AdjustmentType",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class WorkOrderOperationLog { public int Id { get; set; } public int OperationId { get; set; } public required WorkOrderOperation Operation { get; set; } = null!; public byte EmployeeId { get; set; } public required User Employee { get; set; } = null!; public DateTimeOffset StartTime { get; set; } public DateTimeOffset? EndTime { get; set; } public int DurationMinutes { get; set; } [Column(TypeName = \u0022decimal(19,4)\u0022)] public decimal MetalAdjustmentWeight { get; set; } = 0; [MaxLength(10)] public string? AdjustmentType { get; set; } [MaxLength(500)] public string? Notes { get; set; } } }"
    },
    {
      "Class": "WorkOrderStatus",
      "Path": "FiloGH.Core/Entities/WorkOrderStatus.cs",
      "Kind": "Entity",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsInProduction",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsEditable",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; namespace FiloGH.Core.Entities { public class WorkOrderStatus { [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public byte Id { get; set; } [MaxLength(10)] public required string Code { get; set; } [MaxLength(50)] public required string Name { get; set; } public bool IsInProduction { get; set; } = false; public bool IsEditable { get; set; } = true; } }"
    },
    {
      "Class": "WorkOrderStatusCreateDto",
      "Path": "FiloGH.Application/DTOs/WorkOrderStatus/WorkOrderStatusCreateDto.cs",
      "Kind": "Dto",
      "PropertyCount": 5,
      "Properties": [
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsInProduction",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsEditable",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.WorkOrderStatus { public record WorkOrderStatusCreateDto { [Required(ErrorMessage = \u0022Durum Kodu zorunludur (\u00D6rn: NEW, WIP, COMP).\u0022)] [MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)] public required string Code { get; init; } [Required(ErrorMessage = \u0022Durum Ad\u0131 zorunludur (\u00D6rn: Yeni Olu\u015Fturuldu, \u00DCretimde).\u0022)] [MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)] public required string Name { get; init; } public required bool IsInProduction { get; init; } public required bool IsEditable { get; init; } [MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)] public string? Description { get; init; } } }"
    },
    {
      "Class": "WorkOrderStatusGetDto",
      "Path": "FiloGH.Application/DTOs/WorkOrderStatus/WorkOrderStatusGetDto.cs",
      "Kind": "Dto",
      "PropertyCount": 8,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": []
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsInProduction",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsEditable",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset",
          "Name": "CreatedAt",
          "Attributes": []
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "ModifiedAt",
          "Attributes": []
        }
      ],
      "Code": "\uFEFFusing System; namespace FiloGH.Application.DTOs.WorkOrderStatus { public record WorkOrderStatusGetDto { public required byte Id { get; init; } public required string Code { get; init; } public required string Name { get; init; } public required bool IsInProduction { get; init; } public required bool IsEditable { get; init; } public string? Description { get; init; } public required DateTimeOffset CreatedAt { get; init; } public DateTimeOffset? ModifiedAt { get; init; } } }"
    },
    {
      "Class": "WorkOrderStatusUpdateDto",
      "Path": "FiloGH.Application/DTOs/WorkOrderStatus/WorkOrderStatusUpdateDto.cs",
      "Kind": "Dto",
      "BaseName": "WorkOrderStatusCreateDto",
      "PropertyCount": 6,
      "Properties": [
        {
          "Type": "byte",
          "Name": "Id",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Durum Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Code",
          "Attributes": [
            "[MaxLength(10, ErrorMessage = \u0022Kod en fazla 10 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string",
          "Name": "Name",
          "Attributes": [
            "[MaxLength(50, ErrorMessage = \u0022Ad en fazla 50 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "bool",
          "Name": "IsInProduction",
          "Attributes": []
        },
        {
          "Type": "bool",
          "Name": "IsEditable",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "Description",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022A\u00E7\u0131klama en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.WorkOrderStatus { public record WorkOrderStatusUpdateDto : WorkOrderStatusCreateDto { [Required(ErrorMessage = \u0022Durum Kimli\u011Fi zorunludur.\u0022)] [Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Durum Kimli\u011Fi belirtilmelidir.\u0022)] public required byte Id { get; init; } } }"
    },
    {
      "Class": "WorkOrderUpdateDto",
      "Path": "FiloGH.Application/DTOs/WorkOrder/WorkOrderUpdateDto.cs",
      "Kind": "Dto",
      "BaseName": "WorkOrderCreateDto",
      "PropertyCount": 9,
      "Properties": [
        {
          "Type": "int",
          "Name": "Id",
          "Attributes": [
            "[Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u0130\u015F Emri Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "ProductId",
          "Attributes": [
            "[Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u00DCr\u00FCn Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "MetalTypeId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir Metal Tipi Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "byte",
          "Name": "StatusId",
          "Attributes": [
            "[Range(1, byte.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u0130\u015F Emri Durum Kimli\u011Fi belirtilmelidir.\u0022)]"
          ]
        },
        {
          "Type": "int",
          "Name": "Quantity",
          "Attributes": [
            "[Range(1, 10000, ErrorMessage = \u0022Miktar 1 ile 10000 aras\u0131nda olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset",
          "Name": "PlannedStartDate",
          "Attributes": [
            "[Required(ErrorMessage = \u0022Planlanan Ba\u015Flang\u0131\u00E7 Tarihi zorunludur.\u0022)]"
          ]
        },
        {
          "Type": "DateTimeOffset?",
          "Name": "PlannedCompletionDate",
          "Attributes": []
        },
        {
          "Type": "string?",
          "Name": "ReferenceCode",
          "Attributes": [
            "[MaxLength(20, ErrorMessage = \u0022Referans Kod en fazla 20 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        },
        {
          "Type": "string?",
          "Name": "Notes",
          "Attributes": [
            "[MaxLength(500, ErrorMessage = \u0022Notlar en fazla 500 karakter olmal\u0131d\u0131r.\u0022)]"
          ]
        }
      ],
      "Code": "\uFEFFusing System.ComponentModel.DataAnnotations; namespace FiloGH.Application.DTOs.WorkOrder { public record WorkOrderUpdateDto : WorkOrderCreateDto { [Required(ErrorMessage = \u0022\u0130\u015F Emri Kimli\u011Fi zorunludur.\u0022)] [Range(1, int.MaxValue, ErrorMessage = \u0022Ge\u00E7erli bir \u0130\u015F Emri Kimli\u011Fi belirtilmelidir.\u0022)] public required int Id { get; init; } } }"
    }
  ]
}